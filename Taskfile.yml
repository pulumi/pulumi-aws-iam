version: "3"

vars:
  VERSION: 0.0.1
  PACK: aws-iam
  PROJECT: github.com/pulumi/pulumi-{{ .PACK }}
  PROVIDER: pulumi-resource-{{ .PACK }}
  CODEGEN: pulumi-gen-{{ .PACK }}
  VERSION_PATH: provider/pkg/version.Version
  WORKING_DIR:
    sh: pwd
  SCHEMA_PATH: "{{ .WORKING_DIR }}/schema.json"

tasks:
  build:
    desc: "Build providers and all SDKs"
    cmds:
      - task: generate:sdks
      - task: build:sdks
      - task: install:sdks

  generate:java:
    desc: "Generate Java SDK"
    cmds:
      - rm -rf sdk/java/{src,build}
      - cd provider/cmd/{{ .CODEGEN }} && go run . java ../../../sdk/java {{ .SCHEMA_PATH }}

  generate:python:
    desc: "Generate python SDK"
    cmds:
      - rm -rf sdk/python
      - cd provider/cmd/{{ .CODEGEN }} && go run . python ../../../sdk/python {{ .SCHEMA_PATH }}
      - cp {{ .WORKING_DIR }}/README.md sdk/python

  generate:nodejs:
    desc: "Generate NodeJS SDK"
    cmds:
      - rm -rf sdk/nodejs
      - cd provider/cmd/{{ .CODEGEN }} && go run . nodejs ../../../sdk/nodejs {{ .SCHEMA_PATH }}

  generate:go:
    desc: "Generate Go SDK"
    cmds:
      - rm -rf sdk/go
      - cd provider/cmd/{{ .CODEGEN }} && go run . go ../../../sdk/go {{ .SCHEMA_PATH }}

  generate:dotnet:
    desc: "Generate DotNet SDK"
    cmds:
      - rm -rf sdk/dotnet
      - cd provider/cmd/{{ .CODEGEN }} && go run . dotnet ../../../sdk/dotnet {{ .SCHEMA_PATH }}

  generate:sdks:
    desc: "Generate all SDKs"
    cmds:
      - task: generate:java
      - task: generate:python
      - task: generate:nodejs
      - task: generate:go
      - task: generate:dotnet

  build:provider:
    desc: Build the provider binary
    vars:
      VERSION:
        sh: pulumictl get version -r {{ .WORKING_DIR }}
    cmds:
      - rm -rf {{ .WORKING_DIR }}/bin/{{ .PROVIDER }}
      - cd provider/cmd/{{ .PROVIDER }} && go build -a -o {{ .WORKING_DIR }}/bin/{{ .PROVIDER }} -ldflags "-X {{ .PROJECT }}/{{ .VERSION_PATH }}={{ .VERSION }}" .

  build:nodejs:
    desc: "Build the NodeJS SDK"
    dir: sdk/nodejs
    vars:
      VERSION:
        sh: pulumictl get version -r {{ .WORKING_DIR }} -p javascript
    cmds:
      - task: generate:nodejs
      - yarn install
      - yarn run tsc --version
      - yarn run tsc
      - cp ../../README.md ../../LICENSE package.json yarn.lock ./bin/
      - sed -i.bak -e "s/\${VERSION}/{{ .VERSION }}/g" ./bin/package.json
      - rm ./bin/package.json.bak

  build:python:
    desc: "Build the Python SDK"
    dir: sdk/python
    vars:
      PYTHON_VERSION:
        sh: pulumictl get version -r {{ .WORKING_DIR }} -p python
      VERSION:
        sh: pulumictl get version -r {{ .WORKING_DIR }}
    cmds:
      - task: generate:python
      - python3 setup.py clean --all 2>/dev/null
      - rm -rf ./bin/ ../python.bin/
      - cp -R . ../python.bin
      - mv ../python.bin ./bin
      - sed -i.bak -e "s/\${VERSION}/{{ .PYTHON_VERSION }}/g" -e "s/\${PLUGIN_VERSION}/{{ .VERSION }}/g" ./bin/setup.py
      - rm ./bin/setup.py.bak
      - cd ./bin && python3 setup.py build sdist

  build:dotnet:
    desc: "Build dotnet SDK"
    dir: sdk/dotnet
    vars:
      VERSION:
        sh: pulumictl get version -r {{ .WORKING_DIR }} -p dotnet
    cmds:
      - echo "{{ .VERSION }}" >version.txt
      - dotnet build /p:Version={{ .VERSION }}

  build:go:
    desc: "Build Go SDK"
    dir: sdk/go
    cmds:
      - task: generate:go

  build:java:
    desc: "Build Java SDK"
    dir: sdk/java
    cmds:
      - gradle --console=plain build

  build:sdks:
    desc: "Build all SDKs"
    cmds:
      - task: build:python
      - task: build:nodejs
      - task: build:go
      - task: build:dotnet
      - task: build:java

  install:nodejs:
    desc: "Install the NodeJS SDK for local dev"
    cmds:
      - "yarn link --cwd sdk/nodejs/bin/"

  install:python:
    desc: "Install the PyPi SDK for local dev"
    cmds:
      - pip3 install -e sdk/python/bin/

  install:dotnet:
    desc: "Install the Dotnet SDK for local dev"
    cmds:
      - mkdir -p {{ .WORKING_DIR }}/nuget
      - find . -name '*.nupkg' -print -exec cp -p {} {{ .WORKING_DIR }}/nuget \;

  install:java:
    desc: "Install the Java SDK for local dev"
    dir: sdk/java
    cmds:
      - gradle --console=plain publishToMavenLocal

  install:sdks:
    desc: "Install all SDKs for local dev"
    cmds:
      - task: install:nodejs
      - task: install:python
      - task: install:dotnet
      - task: install:java
