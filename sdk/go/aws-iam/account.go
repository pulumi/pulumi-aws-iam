// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package awsiam

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource helps you manage an Iam Account's Alias and Password Policy. If your IAM Account Alias was previously
// set (either via the AWS console or when AWS created your Account) you will see an error like the below:
//
// If you want to manage you Alias using Pulumi you will need to import this resource.
//
// ## Example Usage
// ## Account
//
// ```go
// package main
//
// import (
//
//	iam "github.com/pulumi/pulumi-aws-iam/sdk/go/aws-iam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//	    pulumi.Run(func(ctx *pulumi.Context) error {
//	        account, err := iam.NewAccount(ctx, "account", &iam.AccountArgs{
//	            AccountAlias: pulumi.String("cool-alias"),
//	            PasswordPolicy: iam.AccountPasswordPolicyArgs{
//	                MinimumLength:              pulumi.IntPtr(37),
//	                RequireNumbers:             pulumi.Bool(false),
//	                AllowUsersToChange:         pulumi.Bool(true),
//	                HardExpiry:                 pulumi.Bool(true),
//	                RequireSymbols:             pulumi.Bool(true),
//	                RequireLowercaseCharacters: pulumi.Bool(true),
//	                RequireUppercaseCharacters: pulumi.Bool(true),
//	            },
//	        })
//	        if err != nil {
//	            return err
//	        }
//
//	        ctx.Export("account", account)
//
//	        return nil
//	    })
//	}
//
// ```
// {{ /example }}
type Account struct {
	pulumi.ResourceState

	// The AWS ARN associated with the calling entity.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The AWS Account ID number of the account that owns or contains the calling entity.
	Id pulumi.StringOutput `pulumi:"id"`
	// Indicates whether passwords in the account expire. Returns true if max password
	// age contains a value greater than 0. Returns false if it is 0 or not present.
	PasswordPolicyExpirePasswords pulumi.BoolOutput `pulumi:"passwordPolicyExpirePasswords"`
	// The unique identifier of the calling entity.
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewAccount registers a new resource with the given unique name, arguments, and options.
func NewAccount(ctx *pulumi.Context,
	name string, args *AccountArgs, opts ...pulumi.ResourceOption) (*Account, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountAlias == nil {
		return nil, errors.New("invalid value for required argument 'AccountAlias'")
	}
	if args.PasswordPolicy == nil {
		return nil, errors.New("invalid value for required argument 'PasswordPolicy'")
	}
	var resource Account
	err := ctx.RegisterRemoteComponentResource("aws-iam:index:Account", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type accountArgs struct {
	// AWS IAM account alias for this account.
	AccountAlias string `pulumi:"accountAlias"`
	// Options to specify complexity requirements and mandatory rotation periods for your IAM users' passwords. If
	// left empty the default AWS password policy will be applied.
	PasswordPolicy AccountPasswordPolicy `pulumi:"passwordPolicy"`
}

// The set of arguments for constructing a Account resource.
type AccountArgs struct {
	// AWS IAM account alias for this account.
	AccountAlias pulumi.StringInput
	// Options to specify complexity requirements and mandatory rotation periods for your IAM users' passwords. If
	// left empty the default AWS password policy will be applied.
	PasswordPolicy AccountPasswordPolicyInput
}

func (AccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accountArgs)(nil)).Elem()
}

type AccountInput interface {
	pulumi.Input

	ToAccountOutput() AccountOutput
	ToAccountOutputWithContext(ctx context.Context) AccountOutput
}

func (*Account) ElementType() reflect.Type {
	return reflect.TypeOf((**Account)(nil)).Elem()
}

func (i *Account) ToAccountOutput() AccountOutput {
	return i.ToAccountOutputWithContext(context.Background())
}

func (i *Account) ToAccountOutputWithContext(ctx context.Context) AccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountOutput)
}

// AccountArrayInput is an input type that accepts AccountArray and AccountArrayOutput values.
// You can construct a concrete instance of `AccountArrayInput` via:
//
//	AccountArray{ AccountArgs{...} }
type AccountArrayInput interface {
	pulumi.Input

	ToAccountArrayOutput() AccountArrayOutput
	ToAccountArrayOutputWithContext(context.Context) AccountArrayOutput
}

type AccountArray []AccountInput

func (AccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Account)(nil)).Elem()
}

func (i AccountArray) ToAccountArrayOutput() AccountArrayOutput {
	return i.ToAccountArrayOutputWithContext(context.Background())
}

func (i AccountArray) ToAccountArrayOutputWithContext(ctx context.Context) AccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountArrayOutput)
}

// AccountMapInput is an input type that accepts AccountMap and AccountMapOutput values.
// You can construct a concrete instance of `AccountMapInput` via:
//
//	AccountMap{ "key": AccountArgs{...} }
type AccountMapInput interface {
	pulumi.Input

	ToAccountMapOutput() AccountMapOutput
	ToAccountMapOutputWithContext(context.Context) AccountMapOutput
}

type AccountMap map[string]AccountInput

func (AccountMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Account)(nil)).Elem()
}

func (i AccountMap) ToAccountMapOutput() AccountMapOutput {
	return i.ToAccountMapOutputWithContext(context.Background())
}

func (i AccountMap) ToAccountMapOutputWithContext(ctx context.Context) AccountMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountMapOutput)
}

type AccountOutput struct{ *pulumi.OutputState }

func (AccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Account)(nil)).Elem()
}

func (o AccountOutput) ToAccountOutput() AccountOutput {
	return o
}

func (o AccountOutput) ToAccountOutputWithContext(ctx context.Context) AccountOutput {
	return o
}

// The AWS ARN associated with the calling entity.
func (o AccountOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Account) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The AWS Account ID number of the account that owns or contains the calling entity.
func (o AccountOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v *Account) pulumi.StringOutput { return v.Id }).(pulumi.StringOutput)
}

// Indicates whether passwords in the account expire. Returns true if max password
// age contains a value greater than 0. Returns false if it is 0 or not present.
func (o AccountOutput) PasswordPolicyExpirePasswords() pulumi.BoolOutput {
	return o.ApplyT(func(v *Account) pulumi.BoolOutput { return v.PasswordPolicyExpirePasswords }).(pulumi.BoolOutput)
}

// The unique identifier of the calling entity.
func (o AccountOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *Account) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

type AccountArrayOutput struct{ *pulumi.OutputState }

func (AccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Account)(nil)).Elem()
}

func (o AccountArrayOutput) ToAccountArrayOutput() AccountArrayOutput {
	return o
}

func (o AccountArrayOutput) ToAccountArrayOutputWithContext(ctx context.Context) AccountArrayOutput {
	return o
}

func (o AccountArrayOutput) Index(i pulumi.IntInput) AccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Account {
		return vs[0].([]*Account)[vs[1].(int)]
	}).(AccountOutput)
}

type AccountMapOutput struct{ *pulumi.OutputState }

func (AccountMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Account)(nil)).Elem()
}

func (o AccountMapOutput) ToAccountMapOutput() AccountMapOutput {
	return o
}

func (o AccountMapOutput) ToAccountMapOutputWithContext(ctx context.Context) AccountMapOutput {
	return o
}

func (o AccountMapOutput) MapIndex(k pulumi.StringInput) AccountOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Account {
		return vs[0].(map[string]*Account)[vs[1].(string)]
	}).(AccountOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountInput)(nil)).Elem(), &Account{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountArrayInput)(nil)).Elem(), AccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountMapInput)(nil)).Elem(), AccountMap{})
	pulumi.RegisterOutputType(AccountOutput{})
	pulumi.RegisterOutputType(AccountArrayOutput{})
	pulumi.RegisterOutputType(AccountMapOutput{})
}
