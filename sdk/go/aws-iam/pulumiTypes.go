// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package awsiam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-iam/sdk/go/aws-iam/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// The IAM access key.
type AccessKeyOutput struct {
	// The encrypted secret, base64 encoded.
	EncryptedSecret *string `pulumi:"encryptedSecret"`
	// The access key ID.
	Id *string `pulumi:"id"`
	// The fingerprint of the PGP key used to encrypt the secret.
	KeyFingerprint *string `pulumi:"keyFingerprint"`
	// The access key secret.
	Secret *string `pulumi:"secret"`
	// The secret access key converted into an SES SMTP password by applying AWS's Sigv4 conversion algorithm.
	SesSmtpPasswordV4 *string `pulumi:"sesSmtpPasswordV4"`
	// Active or Inactive. Keys are initially active, but can be made inactive by other means.
	Status *string `pulumi:"status"`
}

// The IAM access key.
type AccessKeyOutputOutput struct{ *pulumi.OutputState }

func (AccessKeyOutputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessKeyOutput)(nil)).Elem()
}

func (o AccessKeyOutputOutput) ToAccessKeyOutputOutput() AccessKeyOutputOutput {
	return o
}

func (o AccessKeyOutputOutput) ToAccessKeyOutputOutputWithContext(ctx context.Context) AccessKeyOutputOutput {
	return o
}

// The encrypted secret, base64 encoded.
func (o AccessKeyOutputOutput) EncryptedSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessKeyOutput) *string { return v.EncryptedSecret }).(pulumi.StringPtrOutput)
}

// The access key ID.
func (o AccessKeyOutputOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessKeyOutput) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The fingerprint of the PGP key used to encrypt the secret.
func (o AccessKeyOutputOutput) KeyFingerprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessKeyOutput) *string { return v.KeyFingerprint }).(pulumi.StringPtrOutput)
}

// The access key secret.
func (o AccessKeyOutputOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessKeyOutput) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

// The secret access key converted into an SES SMTP password by applying AWS's Sigv4 conversion algorithm.
func (o AccessKeyOutputOutput) SesSmtpPasswordV4() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessKeyOutput) *string { return v.SesSmtpPasswordV4 }).(pulumi.StringPtrOutput)
}

// Active or Inactive. Keys are initially active, but can be made inactive by other means.
func (o AccessKeyOutputOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessKeyOutput) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Options to specify complexity requirements and mandatory rotation periods for your IAM users' passwords.
type AccountPasswordPolicy struct {
	// Whether to allow users to change their own password.
	AllowUsersToChange bool `pulumi:"allowUsersToChange"`
	// Whether users are prevented from setting a new password after their password has
	// expired (i.e. require administrator reset).
	HardExpiry bool `pulumi:"hardExpiry"`
	// The number of days that an user password is valid. If not set or a value of `0` is provided, then
	// passwords will not expire.
	MaxAge *int `pulumi:"maxAge"`
	// Minimum length to require for user passwords. Defaults to `8` if not set or
	// the provided value is invalid. Valid values are between 6 and 128.
	MinimumLength *int `pulumi:"minimumLength"`
	// Whether to require lowercase characters for user passwords.
	RequireLowercaseCharacters bool `pulumi:"requireLowercaseCharacters"`
	// Whether to require numbers for user passwords.
	RequireNumbers bool `pulumi:"requireNumbers"`
	// Whether to require symbols for user passwords.
	RequireSymbols bool `pulumi:"requireSymbols"`
	// Whether to require uppercase characters for user passwords.
	RequireUppercaseCharacters bool `pulumi:"requireUppercaseCharacters"`
	// The number of previous passwords that users are prevented from reusing. If not set or a
	// value of `0` is provided, no reuse prevention policy will be used.
	ReusePrevention *int `pulumi:"reusePrevention"`
}

// AccountPasswordPolicyInput is an input type that accepts AccountPasswordPolicyArgs and AccountPasswordPolicyOutput values.
// You can construct a concrete instance of `AccountPasswordPolicyInput` via:
//
//	AccountPasswordPolicyArgs{...}
type AccountPasswordPolicyInput interface {
	pulumi.Input

	ToAccountPasswordPolicyOutput() AccountPasswordPolicyOutput
	ToAccountPasswordPolicyOutputWithContext(context.Context) AccountPasswordPolicyOutput
}

// Options to specify complexity requirements and mandatory rotation periods for your IAM users' passwords.
type AccountPasswordPolicyArgs struct {
	// Whether to allow users to change their own password.
	AllowUsersToChange pulumi.BoolInput `pulumi:"allowUsersToChange"`
	// Whether users are prevented from setting a new password after their password has
	// expired (i.e. require administrator reset).
	HardExpiry pulumi.BoolInput `pulumi:"hardExpiry"`
	// The number of days that an user password is valid. If not set or a value of `0` is provided, then
	// passwords will not expire.
	MaxAge pulumi.IntPtrInput `pulumi:"maxAge"`
	// Minimum length to require for user passwords. Defaults to `8` if not set or
	// the provided value is invalid. Valid values are between 6 and 128.
	MinimumLength pulumi.IntPtrInput `pulumi:"minimumLength"`
	// Whether to require lowercase characters for user passwords.
	RequireLowercaseCharacters pulumi.BoolInput `pulumi:"requireLowercaseCharacters"`
	// Whether to require numbers for user passwords.
	RequireNumbers pulumi.BoolInput `pulumi:"requireNumbers"`
	// Whether to require symbols for user passwords.
	RequireSymbols pulumi.BoolInput `pulumi:"requireSymbols"`
	// Whether to require uppercase characters for user passwords.
	RequireUppercaseCharacters pulumi.BoolInput `pulumi:"requireUppercaseCharacters"`
	// The number of previous passwords that users are prevented from reusing. If not set or a
	// value of `0` is provided, no reuse prevention policy will be used.
	ReusePrevention pulumi.IntPtrInput `pulumi:"reusePrevention"`
}

func (AccountPasswordPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountPasswordPolicy)(nil)).Elem()
}

func (i AccountPasswordPolicyArgs) ToAccountPasswordPolicyOutput() AccountPasswordPolicyOutput {
	return i.ToAccountPasswordPolicyOutputWithContext(context.Background())
}

func (i AccountPasswordPolicyArgs) ToAccountPasswordPolicyOutputWithContext(ctx context.Context) AccountPasswordPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountPasswordPolicyOutput)
}

// Options to specify complexity requirements and mandatory rotation periods for your IAM users' passwords.
type AccountPasswordPolicyOutput struct{ *pulumi.OutputState }

func (AccountPasswordPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountPasswordPolicy)(nil)).Elem()
}

func (o AccountPasswordPolicyOutput) ToAccountPasswordPolicyOutput() AccountPasswordPolicyOutput {
	return o
}

func (o AccountPasswordPolicyOutput) ToAccountPasswordPolicyOutputWithContext(ctx context.Context) AccountPasswordPolicyOutput {
	return o
}

// Whether to allow users to change their own password.
func (o AccountPasswordPolicyOutput) AllowUsersToChange() pulumi.BoolOutput {
	return o.ApplyT(func(v AccountPasswordPolicy) bool { return v.AllowUsersToChange }).(pulumi.BoolOutput)
}

// Whether users are prevented from setting a new password after their password has
// expired (i.e. require administrator reset).
func (o AccountPasswordPolicyOutput) HardExpiry() pulumi.BoolOutput {
	return o.ApplyT(func(v AccountPasswordPolicy) bool { return v.HardExpiry }).(pulumi.BoolOutput)
}

// The number of days that an user password is valid. If not set or a value of `0` is provided, then
// passwords will not expire.
func (o AccountPasswordPolicyOutput) MaxAge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AccountPasswordPolicy) *int { return v.MaxAge }).(pulumi.IntPtrOutput)
}

// Minimum length to require for user passwords. Defaults to `8` if not set or
// the provided value is invalid. Valid values are between 6 and 128.
func (o AccountPasswordPolicyOutput) MinimumLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AccountPasswordPolicy) *int { return v.MinimumLength }).(pulumi.IntPtrOutput)
}

// Whether to require lowercase characters for user passwords.
func (o AccountPasswordPolicyOutput) RequireLowercaseCharacters() pulumi.BoolOutput {
	return o.ApplyT(func(v AccountPasswordPolicy) bool { return v.RequireLowercaseCharacters }).(pulumi.BoolOutput)
}

// Whether to require numbers for user passwords.
func (o AccountPasswordPolicyOutput) RequireNumbers() pulumi.BoolOutput {
	return o.ApplyT(func(v AccountPasswordPolicy) bool { return v.RequireNumbers }).(pulumi.BoolOutput)
}

// Whether to require symbols for user passwords.
func (o AccountPasswordPolicyOutput) RequireSymbols() pulumi.BoolOutput {
	return o.ApplyT(func(v AccountPasswordPolicy) bool { return v.RequireSymbols }).(pulumi.BoolOutput)
}

// Whether to require uppercase characters for user passwords.
func (o AccountPasswordPolicyOutput) RequireUppercaseCharacters() pulumi.BoolOutput {
	return o.ApplyT(func(v AccountPasswordPolicy) bool { return v.RequireUppercaseCharacters }).(pulumi.BoolOutput)
}

// The number of previous passwords that users are prevented from reusing. If not set or a
// value of `0` is provided, no reuse prevention policy will be used.
func (o AccountPasswordPolicyOutput) ReusePrevention() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AccountPasswordPolicy) *int { return v.ReusePrevention }).(pulumi.IntPtrOutput)
}

// The admin role.
type AdminRole struct {
	// IAM role with admin access.
	Name *string `pulumi:"name"`
	// Path of admin IAM role. Defaults to '/'
	Path *string `pulumi:"path"`
	// Permissions boundary ARN to use for admin role.
	PermissionsBoundaryArn *string `pulumi:"permissionsBoundaryArn"`
	// List of policy ARNs to use for admin role.
	PolicyArns []string `pulumi:"policyArns"`
	// A map of tags to add.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AdminRole
func (val *AdminRole) Defaults() *AdminRole {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Name == nil {
		name_ := "admin"
		tmp.Name = &name_
	}
	return &tmp
}

// AdminRoleInput is an input type that accepts AdminRoleArgs and AdminRoleOutput values.
// You can construct a concrete instance of `AdminRoleInput` via:
//
//	AdminRoleArgs{...}
type AdminRoleInput interface {
	pulumi.Input

	ToAdminRoleOutput() AdminRoleOutput
	ToAdminRoleOutputWithContext(context.Context) AdminRoleOutput
}

// The admin role.
type AdminRoleArgs struct {
	// IAM role with admin access.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Path of admin IAM role. Defaults to '/'
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Permissions boundary ARN to use for admin role.
	PermissionsBoundaryArn pulumi.StringPtrInput `pulumi:"permissionsBoundaryArn"`
	// List of policy ARNs to use for admin role.
	PolicyArns pulumi.StringArrayInput `pulumi:"policyArns"`
	// A map of tags to add.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AdminRoleArgs
func (val *AdminRoleArgs) Defaults() *AdminRoleArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Name == nil {
		tmp.Name = pulumi.StringPtr("admin")
	}
	return &tmp
}
func (AdminRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AdminRole)(nil)).Elem()
}

func (i AdminRoleArgs) ToAdminRoleOutput() AdminRoleOutput {
	return i.ToAdminRoleOutputWithContext(context.Background())
}

func (i AdminRoleArgs) ToAdminRoleOutputWithContext(ctx context.Context) AdminRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdminRoleOutput)
}

func (i AdminRoleArgs) ToAdminRolePtrOutput() AdminRolePtrOutput {
	return i.ToAdminRolePtrOutputWithContext(context.Background())
}

func (i AdminRoleArgs) ToAdminRolePtrOutputWithContext(ctx context.Context) AdminRolePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdminRoleOutput).ToAdminRolePtrOutputWithContext(ctx)
}

// AdminRolePtrInput is an input type that accepts AdminRoleArgs, AdminRolePtr and AdminRolePtrOutput values.
// You can construct a concrete instance of `AdminRolePtrInput` via:
//
//	        AdminRoleArgs{...}
//
//	or:
//
//	        nil
type AdminRolePtrInput interface {
	pulumi.Input

	ToAdminRolePtrOutput() AdminRolePtrOutput
	ToAdminRolePtrOutputWithContext(context.Context) AdminRolePtrOutput
}

type adminRolePtrType AdminRoleArgs

func AdminRolePtr(v *AdminRoleArgs) AdminRolePtrInput {
	return (*adminRolePtrType)(v)
}

func (*adminRolePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AdminRole)(nil)).Elem()
}

func (i *adminRolePtrType) ToAdminRolePtrOutput() AdminRolePtrOutput {
	return i.ToAdminRolePtrOutputWithContext(context.Background())
}

func (i *adminRolePtrType) ToAdminRolePtrOutputWithContext(ctx context.Context) AdminRolePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdminRolePtrOutput)
}

// The admin role.
type AdminRoleOutput struct{ *pulumi.OutputState }

func (AdminRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdminRole)(nil)).Elem()
}

func (o AdminRoleOutput) ToAdminRoleOutput() AdminRoleOutput {
	return o
}

func (o AdminRoleOutput) ToAdminRoleOutputWithContext(ctx context.Context) AdminRoleOutput {
	return o
}

func (o AdminRoleOutput) ToAdminRolePtrOutput() AdminRolePtrOutput {
	return o.ToAdminRolePtrOutputWithContext(context.Background())
}

func (o AdminRoleOutput) ToAdminRolePtrOutputWithContext(ctx context.Context) AdminRolePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AdminRole) *AdminRole {
		return &v
	}).(AdminRolePtrOutput)
}

// IAM role with admin access.
func (o AdminRoleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AdminRole) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Path of admin IAM role. Defaults to '/'
func (o AdminRoleOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AdminRole) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Permissions boundary ARN to use for admin role.
func (o AdminRoleOutput) PermissionsBoundaryArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AdminRole) *string { return v.PermissionsBoundaryArn }).(pulumi.StringPtrOutput)
}

// List of policy ARNs to use for admin role.
func (o AdminRoleOutput) PolicyArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AdminRole) []string { return v.PolicyArns }).(pulumi.StringArrayOutput)
}

// A map of tags to add.
func (o AdminRoleOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v AdminRole) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type AdminRolePtrOutput struct{ *pulumi.OutputState }

func (AdminRolePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AdminRole)(nil)).Elem()
}

func (o AdminRolePtrOutput) ToAdminRolePtrOutput() AdminRolePtrOutput {
	return o
}

func (o AdminRolePtrOutput) ToAdminRolePtrOutputWithContext(ctx context.Context) AdminRolePtrOutput {
	return o
}

func (o AdminRolePtrOutput) Elem() AdminRoleOutput {
	return o.ApplyT(func(v *AdminRole) AdminRole {
		if v != nil {
			return *v
		}
		var ret AdminRole
		return ret
	}).(AdminRoleOutput)
}

// IAM role with admin access.
func (o AdminRolePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AdminRole) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Path of admin IAM role. Defaults to '/'
func (o AdminRolePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AdminRole) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Permissions boundary ARN to use for admin role.
func (o AdminRolePtrOutput) PermissionsBoundaryArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AdminRole) *string {
		if v == nil {
			return nil
		}
		return v.PermissionsBoundaryArn
	}).(pulumi.StringPtrOutput)
}

// List of policy ARNs to use for admin role.
func (o AdminRolePtrOutput) PolicyArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AdminRole) []string {
		if v == nil {
			return nil
		}
		return v.PolicyArns
	}).(pulumi.StringArrayOutput)
}

// A map of tags to add.
func (o AdminRolePtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AdminRole) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The admin role.
type AdminRoleWithMFA struct {
	// IAM role with admin access.
	Name *string `pulumi:"name"`
	// Path of admin IAM role.
	Path *string `pulumi:"path"`
	// Permissions boundary ARN to use for admin role.
	PermissionsBoundaryArn *string `pulumi:"permissionsBoundaryArn"`
	// List of policy ARNs to use for admin role.
	PolicyArns []string `pulumi:"policyArns"`
	// Whether admin role requires MFA.
	RequiresMfa *bool `pulumi:"requiresMfa"`
	// A map of tags to add.
	Tags map[string]string `pulumi:"tags"`
}

// AdminRoleWithMFAInput is an input type that accepts AdminRoleWithMFAArgs and AdminRoleWithMFAOutput values.
// You can construct a concrete instance of `AdminRoleWithMFAInput` via:
//
//	AdminRoleWithMFAArgs{...}
type AdminRoleWithMFAInput interface {
	pulumi.Input

	ToAdminRoleWithMFAOutput() AdminRoleWithMFAOutput
	ToAdminRoleWithMFAOutputWithContext(context.Context) AdminRoleWithMFAOutput
}

// The admin role.
type AdminRoleWithMFAArgs struct {
	// IAM role with admin access.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Path of admin IAM role.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Permissions boundary ARN to use for admin role.
	PermissionsBoundaryArn pulumi.StringPtrInput `pulumi:"permissionsBoundaryArn"`
	// List of policy ARNs to use for admin role.
	PolicyArns pulumi.StringArrayInput `pulumi:"policyArns"`
	// Whether admin role requires MFA.
	RequiresMfa pulumi.BoolPtrInput `pulumi:"requiresMfa"`
	// A map of tags to add.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (AdminRoleWithMFAArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AdminRoleWithMFA)(nil)).Elem()
}

func (i AdminRoleWithMFAArgs) ToAdminRoleWithMFAOutput() AdminRoleWithMFAOutput {
	return i.ToAdminRoleWithMFAOutputWithContext(context.Background())
}

func (i AdminRoleWithMFAArgs) ToAdminRoleWithMFAOutputWithContext(ctx context.Context) AdminRoleWithMFAOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdminRoleWithMFAOutput)
}

// The admin role.
type AdminRoleWithMFAOutput struct{ *pulumi.OutputState }

func (AdminRoleWithMFAOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdminRoleWithMFA)(nil)).Elem()
}

func (o AdminRoleWithMFAOutput) ToAdminRoleWithMFAOutput() AdminRoleWithMFAOutput {
	return o
}

func (o AdminRoleWithMFAOutput) ToAdminRoleWithMFAOutputWithContext(ctx context.Context) AdminRoleWithMFAOutput {
	return o
}

// IAM role with admin access.
func (o AdminRoleWithMFAOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AdminRoleWithMFA) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Path of admin IAM role.
func (o AdminRoleWithMFAOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AdminRoleWithMFA) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Permissions boundary ARN to use for admin role.
func (o AdminRoleWithMFAOutput) PermissionsBoundaryArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AdminRoleWithMFA) *string { return v.PermissionsBoundaryArn }).(pulumi.StringPtrOutput)
}

// List of policy ARNs to use for admin role.
func (o AdminRoleWithMFAOutput) PolicyArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AdminRoleWithMFA) []string { return v.PolicyArns }).(pulumi.StringArrayOutput)
}

// Whether admin role requires MFA.
func (o AdminRoleWithMFAOutput) RequiresMfa() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AdminRoleWithMFA) *bool { return v.RequiresMfa }).(pulumi.BoolPtrOutput)
}

// A map of tags to add.
func (o AdminRoleWithMFAOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v AdminRoleWithMFA) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The Amazon Managed Service for Prometheus IAM policy to the role.
type EKSAmazonManagedServicePrometheusPolicy struct {
	// Determines whether to attach the Amazon Managed Service for Prometheus IAM policy to the role.
	Attach bool `pulumi:"attach"`
	// List of AMP Workspace ARNs to read and write metrics. If not provided, a default ARN of "*"
	// will be provided.
	WorkspaceArns []string `pulumi:"workspaceArns"`
}

// EKSAmazonManagedServicePrometheusPolicyInput is an input type that accepts EKSAmazonManagedServicePrometheusPolicyArgs and EKSAmazonManagedServicePrometheusPolicyOutput values.
// You can construct a concrete instance of `EKSAmazonManagedServicePrometheusPolicyInput` via:
//
//	EKSAmazonManagedServicePrometheusPolicyArgs{...}
type EKSAmazonManagedServicePrometheusPolicyInput interface {
	pulumi.Input

	ToEKSAmazonManagedServicePrometheusPolicyOutput() EKSAmazonManagedServicePrometheusPolicyOutput
	ToEKSAmazonManagedServicePrometheusPolicyOutputWithContext(context.Context) EKSAmazonManagedServicePrometheusPolicyOutput
}

// The Amazon Managed Service for Prometheus IAM policy to the role.
type EKSAmazonManagedServicePrometheusPolicyArgs struct {
	// Determines whether to attach the Amazon Managed Service for Prometheus IAM policy to the role.
	Attach pulumi.BoolInput `pulumi:"attach"`
	// List of AMP Workspace ARNs to read and write metrics. If not provided, a default ARN of "*"
	// will be provided.
	WorkspaceArns pulumi.StringArrayInput `pulumi:"workspaceArns"`
}

func (EKSAmazonManagedServicePrometheusPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EKSAmazonManagedServicePrometheusPolicy)(nil)).Elem()
}

func (i EKSAmazonManagedServicePrometheusPolicyArgs) ToEKSAmazonManagedServicePrometheusPolicyOutput() EKSAmazonManagedServicePrometheusPolicyOutput {
	return i.ToEKSAmazonManagedServicePrometheusPolicyOutputWithContext(context.Background())
}

func (i EKSAmazonManagedServicePrometheusPolicyArgs) ToEKSAmazonManagedServicePrometheusPolicyOutputWithContext(ctx context.Context) EKSAmazonManagedServicePrometheusPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSAmazonManagedServicePrometheusPolicyOutput)
}

func (i EKSAmazonManagedServicePrometheusPolicyArgs) ToEKSAmazonManagedServicePrometheusPolicyPtrOutput() EKSAmazonManagedServicePrometheusPolicyPtrOutput {
	return i.ToEKSAmazonManagedServicePrometheusPolicyPtrOutputWithContext(context.Background())
}

func (i EKSAmazonManagedServicePrometheusPolicyArgs) ToEKSAmazonManagedServicePrometheusPolicyPtrOutputWithContext(ctx context.Context) EKSAmazonManagedServicePrometheusPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSAmazonManagedServicePrometheusPolicyOutput).ToEKSAmazonManagedServicePrometheusPolicyPtrOutputWithContext(ctx)
}

// EKSAmazonManagedServicePrometheusPolicyPtrInput is an input type that accepts EKSAmazonManagedServicePrometheusPolicyArgs, EKSAmazonManagedServicePrometheusPolicyPtr and EKSAmazonManagedServicePrometheusPolicyPtrOutput values.
// You can construct a concrete instance of `EKSAmazonManagedServicePrometheusPolicyPtrInput` via:
//
//	        EKSAmazonManagedServicePrometheusPolicyArgs{...}
//
//	or:
//
//	        nil
type EKSAmazonManagedServicePrometheusPolicyPtrInput interface {
	pulumi.Input

	ToEKSAmazonManagedServicePrometheusPolicyPtrOutput() EKSAmazonManagedServicePrometheusPolicyPtrOutput
	ToEKSAmazonManagedServicePrometheusPolicyPtrOutputWithContext(context.Context) EKSAmazonManagedServicePrometheusPolicyPtrOutput
}

type eksamazonManagedServicePrometheusPolicyPtrType EKSAmazonManagedServicePrometheusPolicyArgs

func EKSAmazonManagedServicePrometheusPolicyPtr(v *EKSAmazonManagedServicePrometheusPolicyArgs) EKSAmazonManagedServicePrometheusPolicyPtrInput {
	return (*eksamazonManagedServicePrometheusPolicyPtrType)(v)
}

func (*eksamazonManagedServicePrometheusPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EKSAmazonManagedServicePrometheusPolicy)(nil)).Elem()
}

func (i *eksamazonManagedServicePrometheusPolicyPtrType) ToEKSAmazonManagedServicePrometheusPolicyPtrOutput() EKSAmazonManagedServicePrometheusPolicyPtrOutput {
	return i.ToEKSAmazonManagedServicePrometheusPolicyPtrOutputWithContext(context.Background())
}

func (i *eksamazonManagedServicePrometheusPolicyPtrType) ToEKSAmazonManagedServicePrometheusPolicyPtrOutputWithContext(ctx context.Context) EKSAmazonManagedServicePrometheusPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSAmazonManagedServicePrometheusPolicyPtrOutput)
}

// The Amazon Managed Service for Prometheus IAM policy to the role.
type EKSAmazonManagedServicePrometheusPolicyOutput struct{ *pulumi.OutputState }

func (EKSAmazonManagedServicePrometheusPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EKSAmazonManagedServicePrometheusPolicy)(nil)).Elem()
}

func (o EKSAmazonManagedServicePrometheusPolicyOutput) ToEKSAmazonManagedServicePrometheusPolicyOutput() EKSAmazonManagedServicePrometheusPolicyOutput {
	return o
}

func (o EKSAmazonManagedServicePrometheusPolicyOutput) ToEKSAmazonManagedServicePrometheusPolicyOutputWithContext(ctx context.Context) EKSAmazonManagedServicePrometheusPolicyOutput {
	return o
}

func (o EKSAmazonManagedServicePrometheusPolicyOutput) ToEKSAmazonManagedServicePrometheusPolicyPtrOutput() EKSAmazonManagedServicePrometheusPolicyPtrOutput {
	return o.ToEKSAmazonManagedServicePrometheusPolicyPtrOutputWithContext(context.Background())
}

func (o EKSAmazonManagedServicePrometheusPolicyOutput) ToEKSAmazonManagedServicePrometheusPolicyPtrOutputWithContext(ctx context.Context) EKSAmazonManagedServicePrometheusPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EKSAmazonManagedServicePrometheusPolicy) *EKSAmazonManagedServicePrometheusPolicy {
		return &v
	}).(EKSAmazonManagedServicePrometheusPolicyPtrOutput)
}

// Determines whether to attach the Amazon Managed Service for Prometheus IAM policy to the role.
func (o EKSAmazonManagedServicePrometheusPolicyOutput) Attach() pulumi.BoolOutput {
	return o.ApplyT(func(v EKSAmazonManagedServicePrometheusPolicy) bool { return v.Attach }).(pulumi.BoolOutput)
}

// List of AMP Workspace ARNs to read and write metrics. If not provided, a default ARN of "*"
// will be provided.
func (o EKSAmazonManagedServicePrometheusPolicyOutput) WorkspaceArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EKSAmazonManagedServicePrometheusPolicy) []string { return v.WorkspaceArns }).(pulumi.StringArrayOutput)
}

type EKSAmazonManagedServicePrometheusPolicyPtrOutput struct{ *pulumi.OutputState }

func (EKSAmazonManagedServicePrometheusPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EKSAmazonManagedServicePrometheusPolicy)(nil)).Elem()
}

func (o EKSAmazonManagedServicePrometheusPolicyPtrOutput) ToEKSAmazonManagedServicePrometheusPolicyPtrOutput() EKSAmazonManagedServicePrometheusPolicyPtrOutput {
	return o
}

func (o EKSAmazonManagedServicePrometheusPolicyPtrOutput) ToEKSAmazonManagedServicePrometheusPolicyPtrOutputWithContext(ctx context.Context) EKSAmazonManagedServicePrometheusPolicyPtrOutput {
	return o
}

func (o EKSAmazonManagedServicePrometheusPolicyPtrOutput) Elem() EKSAmazonManagedServicePrometheusPolicyOutput {
	return o.ApplyT(func(v *EKSAmazonManagedServicePrometheusPolicy) EKSAmazonManagedServicePrometheusPolicy {
		if v != nil {
			return *v
		}
		var ret EKSAmazonManagedServicePrometheusPolicy
		return ret
	}).(EKSAmazonManagedServicePrometheusPolicyOutput)
}

// Determines whether to attach the Amazon Managed Service for Prometheus IAM policy to the role.
func (o EKSAmazonManagedServicePrometheusPolicyPtrOutput) Attach() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EKSAmazonManagedServicePrometheusPolicy) *bool {
		if v == nil {
			return nil
		}
		return &v.Attach
	}).(pulumi.BoolPtrOutput)
}

// List of AMP Workspace ARNs to read and write metrics. If not provided, a default ARN of "*"
// will be provided.
func (o EKSAmazonManagedServicePrometheusPolicyPtrOutput) WorkspaceArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EKSAmazonManagedServicePrometheusPolicy) []string {
		if v == nil {
			return nil
		}
		return v.WorkspaceArns
	}).(pulumi.StringArrayOutput)
}

// The Appmesh policies.
type EKSAppmeshPolicy struct {
	// Determines whether to attach the Appmesh Controller policy to the role.
	Controller *bool `pulumi:"controller"`
	// Determines whether to attach the Appmesh envoy proxy policy to the role.
	EnvoyProxy *bool `pulumi:"envoyProxy"`
}

// EKSAppmeshPolicyInput is an input type that accepts EKSAppmeshPolicyArgs and EKSAppmeshPolicyOutput values.
// You can construct a concrete instance of `EKSAppmeshPolicyInput` via:
//
//	EKSAppmeshPolicyArgs{...}
type EKSAppmeshPolicyInput interface {
	pulumi.Input

	ToEKSAppmeshPolicyOutput() EKSAppmeshPolicyOutput
	ToEKSAppmeshPolicyOutputWithContext(context.Context) EKSAppmeshPolicyOutput
}

// The Appmesh policies.
type EKSAppmeshPolicyArgs struct {
	// Determines whether to attach the Appmesh Controller policy to the role.
	Controller pulumi.BoolPtrInput `pulumi:"controller"`
	// Determines whether to attach the Appmesh envoy proxy policy to the role.
	EnvoyProxy pulumi.BoolPtrInput `pulumi:"envoyProxy"`
}

func (EKSAppmeshPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EKSAppmeshPolicy)(nil)).Elem()
}

func (i EKSAppmeshPolicyArgs) ToEKSAppmeshPolicyOutput() EKSAppmeshPolicyOutput {
	return i.ToEKSAppmeshPolicyOutputWithContext(context.Background())
}

func (i EKSAppmeshPolicyArgs) ToEKSAppmeshPolicyOutputWithContext(ctx context.Context) EKSAppmeshPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSAppmeshPolicyOutput)
}

func (i EKSAppmeshPolicyArgs) ToEKSAppmeshPolicyPtrOutput() EKSAppmeshPolicyPtrOutput {
	return i.ToEKSAppmeshPolicyPtrOutputWithContext(context.Background())
}

func (i EKSAppmeshPolicyArgs) ToEKSAppmeshPolicyPtrOutputWithContext(ctx context.Context) EKSAppmeshPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSAppmeshPolicyOutput).ToEKSAppmeshPolicyPtrOutputWithContext(ctx)
}

// EKSAppmeshPolicyPtrInput is an input type that accepts EKSAppmeshPolicyArgs, EKSAppmeshPolicyPtr and EKSAppmeshPolicyPtrOutput values.
// You can construct a concrete instance of `EKSAppmeshPolicyPtrInput` via:
//
//	        EKSAppmeshPolicyArgs{...}
//
//	or:
//
//	        nil
type EKSAppmeshPolicyPtrInput interface {
	pulumi.Input

	ToEKSAppmeshPolicyPtrOutput() EKSAppmeshPolicyPtrOutput
	ToEKSAppmeshPolicyPtrOutputWithContext(context.Context) EKSAppmeshPolicyPtrOutput
}

type eksappmeshPolicyPtrType EKSAppmeshPolicyArgs

func EKSAppmeshPolicyPtr(v *EKSAppmeshPolicyArgs) EKSAppmeshPolicyPtrInput {
	return (*eksappmeshPolicyPtrType)(v)
}

func (*eksappmeshPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EKSAppmeshPolicy)(nil)).Elem()
}

func (i *eksappmeshPolicyPtrType) ToEKSAppmeshPolicyPtrOutput() EKSAppmeshPolicyPtrOutput {
	return i.ToEKSAppmeshPolicyPtrOutputWithContext(context.Background())
}

func (i *eksappmeshPolicyPtrType) ToEKSAppmeshPolicyPtrOutputWithContext(ctx context.Context) EKSAppmeshPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSAppmeshPolicyPtrOutput)
}

// The Appmesh policies.
type EKSAppmeshPolicyOutput struct{ *pulumi.OutputState }

func (EKSAppmeshPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EKSAppmeshPolicy)(nil)).Elem()
}

func (o EKSAppmeshPolicyOutput) ToEKSAppmeshPolicyOutput() EKSAppmeshPolicyOutput {
	return o
}

func (o EKSAppmeshPolicyOutput) ToEKSAppmeshPolicyOutputWithContext(ctx context.Context) EKSAppmeshPolicyOutput {
	return o
}

func (o EKSAppmeshPolicyOutput) ToEKSAppmeshPolicyPtrOutput() EKSAppmeshPolicyPtrOutput {
	return o.ToEKSAppmeshPolicyPtrOutputWithContext(context.Background())
}

func (o EKSAppmeshPolicyOutput) ToEKSAppmeshPolicyPtrOutputWithContext(ctx context.Context) EKSAppmeshPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EKSAppmeshPolicy) *EKSAppmeshPolicy {
		return &v
	}).(EKSAppmeshPolicyPtrOutput)
}

// Determines whether to attach the Appmesh Controller policy to the role.
func (o EKSAppmeshPolicyOutput) Controller() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EKSAppmeshPolicy) *bool { return v.Controller }).(pulumi.BoolPtrOutput)
}

// Determines whether to attach the Appmesh envoy proxy policy to the role.
func (o EKSAppmeshPolicyOutput) EnvoyProxy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EKSAppmeshPolicy) *bool { return v.EnvoyProxy }).(pulumi.BoolPtrOutput)
}

type EKSAppmeshPolicyPtrOutput struct{ *pulumi.OutputState }

func (EKSAppmeshPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EKSAppmeshPolicy)(nil)).Elem()
}

func (o EKSAppmeshPolicyPtrOutput) ToEKSAppmeshPolicyPtrOutput() EKSAppmeshPolicyPtrOutput {
	return o
}

func (o EKSAppmeshPolicyPtrOutput) ToEKSAppmeshPolicyPtrOutputWithContext(ctx context.Context) EKSAppmeshPolicyPtrOutput {
	return o
}

func (o EKSAppmeshPolicyPtrOutput) Elem() EKSAppmeshPolicyOutput {
	return o.ApplyT(func(v *EKSAppmeshPolicy) EKSAppmeshPolicy {
		if v != nil {
			return *v
		}
		var ret EKSAppmeshPolicy
		return ret
	}).(EKSAppmeshPolicyOutput)
}

// Determines whether to attach the Appmesh Controller policy to the role.
func (o EKSAppmeshPolicyPtrOutput) Controller() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EKSAppmeshPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.Controller
	}).(pulumi.BoolPtrOutput)
}

// Determines whether to attach the Appmesh envoy proxy policy to the role.
func (o EKSAppmeshPolicyPtrOutput) EnvoyProxy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EKSAppmeshPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.EnvoyProxy
	}).(pulumi.BoolPtrOutput)
}

// The Cert Manager IAM policy to attach to the role.
type EKSCertManagerPolicy struct {
	// Determines whether to attach the Cert Manager IAM policy to the role.
	Attach bool `pulumi:"attach"`
	// Route53 hosted zone ARNs to allow Cert manager to manage records. If not provided,
	// the default ARN "arn:aws:route53:::hostedzone/*" will be applied.
	HostedZoneArns []string `pulumi:"hostedZoneArns"`
}

// EKSCertManagerPolicyInput is an input type that accepts EKSCertManagerPolicyArgs and EKSCertManagerPolicyOutput values.
// You can construct a concrete instance of `EKSCertManagerPolicyInput` via:
//
//	EKSCertManagerPolicyArgs{...}
type EKSCertManagerPolicyInput interface {
	pulumi.Input

	ToEKSCertManagerPolicyOutput() EKSCertManagerPolicyOutput
	ToEKSCertManagerPolicyOutputWithContext(context.Context) EKSCertManagerPolicyOutput
}

// The Cert Manager IAM policy to attach to the role.
type EKSCertManagerPolicyArgs struct {
	// Determines whether to attach the Cert Manager IAM policy to the role.
	Attach pulumi.BoolInput `pulumi:"attach"`
	// Route53 hosted zone ARNs to allow Cert manager to manage records. If not provided,
	// the default ARN "arn:aws:route53:::hostedzone/*" will be applied.
	HostedZoneArns pulumi.StringArrayInput `pulumi:"hostedZoneArns"`
}

func (EKSCertManagerPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EKSCertManagerPolicy)(nil)).Elem()
}

func (i EKSCertManagerPolicyArgs) ToEKSCertManagerPolicyOutput() EKSCertManagerPolicyOutput {
	return i.ToEKSCertManagerPolicyOutputWithContext(context.Background())
}

func (i EKSCertManagerPolicyArgs) ToEKSCertManagerPolicyOutputWithContext(ctx context.Context) EKSCertManagerPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSCertManagerPolicyOutput)
}

func (i EKSCertManagerPolicyArgs) ToEKSCertManagerPolicyPtrOutput() EKSCertManagerPolicyPtrOutput {
	return i.ToEKSCertManagerPolicyPtrOutputWithContext(context.Background())
}

func (i EKSCertManagerPolicyArgs) ToEKSCertManagerPolicyPtrOutputWithContext(ctx context.Context) EKSCertManagerPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSCertManagerPolicyOutput).ToEKSCertManagerPolicyPtrOutputWithContext(ctx)
}

// EKSCertManagerPolicyPtrInput is an input type that accepts EKSCertManagerPolicyArgs, EKSCertManagerPolicyPtr and EKSCertManagerPolicyPtrOutput values.
// You can construct a concrete instance of `EKSCertManagerPolicyPtrInput` via:
//
//	        EKSCertManagerPolicyArgs{...}
//
//	or:
//
//	        nil
type EKSCertManagerPolicyPtrInput interface {
	pulumi.Input

	ToEKSCertManagerPolicyPtrOutput() EKSCertManagerPolicyPtrOutput
	ToEKSCertManagerPolicyPtrOutputWithContext(context.Context) EKSCertManagerPolicyPtrOutput
}

type ekscertManagerPolicyPtrType EKSCertManagerPolicyArgs

func EKSCertManagerPolicyPtr(v *EKSCertManagerPolicyArgs) EKSCertManagerPolicyPtrInput {
	return (*ekscertManagerPolicyPtrType)(v)
}

func (*ekscertManagerPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EKSCertManagerPolicy)(nil)).Elem()
}

func (i *ekscertManagerPolicyPtrType) ToEKSCertManagerPolicyPtrOutput() EKSCertManagerPolicyPtrOutput {
	return i.ToEKSCertManagerPolicyPtrOutputWithContext(context.Background())
}

func (i *ekscertManagerPolicyPtrType) ToEKSCertManagerPolicyPtrOutputWithContext(ctx context.Context) EKSCertManagerPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSCertManagerPolicyPtrOutput)
}

// The Cert Manager IAM policy to attach to the role.
type EKSCertManagerPolicyOutput struct{ *pulumi.OutputState }

func (EKSCertManagerPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EKSCertManagerPolicy)(nil)).Elem()
}

func (o EKSCertManagerPolicyOutput) ToEKSCertManagerPolicyOutput() EKSCertManagerPolicyOutput {
	return o
}

func (o EKSCertManagerPolicyOutput) ToEKSCertManagerPolicyOutputWithContext(ctx context.Context) EKSCertManagerPolicyOutput {
	return o
}

func (o EKSCertManagerPolicyOutput) ToEKSCertManagerPolicyPtrOutput() EKSCertManagerPolicyPtrOutput {
	return o.ToEKSCertManagerPolicyPtrOutputWithContext(context.Background())
}

func (o EKSCertManagerPolicyOutput) ToEKSCertManagerPolicyPtrOutputWithContext(ctx context.Context) EKSCertManagerPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EKSCertManagerPolicy) *EKSCertManagerPolicy {
		return &v
	}).(EKSCertManagerPolicyPtrOutput)
}

// Determines whether to attach the Cert Manager IAM policy to the role.
func (o EKSCertManagerPolicyOutput) Attach() pulumi.BoolOutput {
	return o.ApplyT(func(v EKSCertManagerPolicy) bool { return v.Attach }).(pulumi.BoolOutput)
}

// Route53 hosted zone ARNs to allow Cert manager to manage records. If not provided,
// the default ARN "arn:aws:route53:::hostedzone/*" will be applied.
func (o EKSCertManagerPolicyOutput) HostedZoneArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EKSCertManagerPolicy) []string { return v.HostedZoneArns }).(pulumi.StringArrayOutput)
}

type EKSCertManagerPolicyPtrOutput struct{ *pulumi.OutputState }

func (EKSCertManagerPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EKSCertManagerPolicy)(nil)).Elem()
}

func (o EKSCertManagerPolicyPtrOutput) ToEKSCertManagerPolicyPtrOutput() EKSCertManagerPolicyPtrOutput {
	return o
}

func (o EKSCertManagerPolicyPtrOutput) ToEKSCertManagerPolicyPtrOutputWithContext(ctx context.Context) EKSCertManagerPolicyPtrOutput {
	return o
}

func (o EKSCertManagerPolicyPtrOutput) Elem() EKSCertManagerPolicyOutput {
	return o.ApplyT(func(v *EKSCertManagerPolicy) EKSCertManagerPolicy {
		if v != nil {
			return *v
		}
		var ret EKSCertManagerPolicy
		return ret
	}).(EKSCertManagerPolicyOutput)
}

// Determines whether to attach the Cert Manager IAM policy to the role.
func (o EKSCertManagerPolicyPtrOutput) Attach() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EKSCertManagerPolicy) *bool {
		if v == nil {
			return nil
		}
		return &v.Attach
	}).(pulumi.BoolPtrOutput)
}

// Route53 hosted zone ARNs to allow Cert manager to manage records. If not provided,
// the default ARN "arn:aws:route53:::hostedzone/*" will be applied.
func (o EKSCertManagerPolicyPtrOutput) HostedZoneArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EKSCertManagerPolicy) []string {
		if v == nil {
			return nil
		}
		return v.HostedZoneArns
	}).(pulumi.StringArrayOutput)
}

// The Cluster Autoscaler IAM policy to the role.
type EKSClusterAutoscalerPolicy struct {
	// Determines whether to attach the Cluster Autoscaler IAM policy to the role.
	Attach bool `pulumi:"attach"`
	// List of cluster IDs to appropriately scope permissions within the Cluster Autoscaler IAM policy.
	ClusterIds []string `pulumi:"clusterIds"`
}

// EKSClusterAutoscalerPolicyInput is an input type that accepts EKSClusterAutoscalerPolicyArgs and EKSClusterAutoscalerPolicyOutput values.
// You can construct a concrete instance of `EKSClusterAutoscalerPolicyInput` via:
//
//	EKSClusterAutoscalerPolicyArgs{...}
type EKSClusterAutoscalerPolicyInput interface {
	pulumi.Input

	ToEKSClusterAutoscalerPolicyOutput() EKSClusterAutoscalerPolicyOutput
	ToEKSClusterAutoscalerPolicyOutputWithContext(context.Context) EKSClusterAutoscalerPolicyOutput
}

// The Cluster Autoscaler IAM policy to the role.
type EKSClusterAutoscalerPolicyArgs struct {
	// Determines whether to attach the Cluster Autoscaler IAM policy to the role.
	Attach pulumi.BoolInput `pulumi:"attach"`
	// List of cluster IDs to appropriately scope permissions within the Cluster Autoscaler IAM policy.
	ClusterIds pulumi.StringArrayInput `pulumi:"clusterIds"`
}

func (EKSClusterAutoscalerPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EKSClusterAutoscalerPolicy)(nil)).Elem()
}

func (i EKSClusterAutoscalerPolicyArgs) ToEKSClusterAutoscalerPolicyOutput() EKSClusterAutoscalerPolicyOutput {
	return i.ToEKSClusterAutoscalerPolicyOutputWithContext(context.Background())
}

func (i EKSClusterAutoscalerPolicyArgs) ToEKSClusterAutoscalerPolicyOutputWithContext(ctx context.Context) EKSClusterAutoscalerPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSClusterAutoscalerPolicyOutput)
}

func (i EKSClusterAutoscalerPolicyArgs) ToEKSClusterAutoscalerPolicyPtrOutput() EKSClusterAutoscalerPolicyPtrOutput {
	return i.ToEKSClusterAutoscalerPolicyPtrOutputWithContext(context.Background())
}

func (i EKSClusterAutoscalerPolicyArgs) ToEKSClusterAutoscalerPolicyPtrOutputWithContext(ctx context.Context) EKSClusterAutoscalerPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSClusterAutoscalerPolicyOutput).ToEKSClusterAutoscalerPolicyPtrOutputWithContext(ctx)
}

// EKSClusterAutoscalerPolicyPtrInput is an input type that accepts EKSClusterAutoscalerPolicyArgs, EKSClusterAutoscalerPolicyPtr and EKSClusterAutoscalerPolicyPtrOutput values.
// You can construct a concrete instance of `EKSClusterAutoscalerPolicyPtrInput` via:
//
//	        EKSClusterAutoscalerPolicyArgs{...}
//
//	or:
//
//	        nil
type EKSClusterAutoscalerPolicyPtrInput interface {
	pulumi.Input

	ToEKSClusterAutoscalerPolicyPtrOutput() EKSClusterAutoscalerPolicyPtrOutput
	ToEKSClusterAutoscalerPolicyPtrOutputWithContext(context.Context) EKSClusterAutoscalerPolicyPtrOutput
}

type eksclusterAutoscalerPolicyPtrType EKSClusterAutoscalerPolicyArgs

func EKSClusterAutoscalerPolicyPtr(v *EKSClusterAutoscalerPolicyArgs) EKSClusterAutoscalerPolicyPtrInput {
	return (*eksclusterAutoscalerPolicyPtrType)(v)
}

func (*eksclusterAutoscalerPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EKSClusterAutoscalerPolicy)(nil)).Elem()
}

func (i *eksclusterAutoscalerPolicyPtrType) ToEKSClusterAutoscalerPolicyPtrOutput() EKSClusterAutoscalerPolicyPtrOutput {
	return i.ToEKSClusterAutoscalerPolicyPtrOutputWithContext(context.Background())
}

func (i *eksclusterAutoscalerPolicyPtrType) ToEKSClusterAutoscalerPolicyPtrOutputWithContext(ctx context.Context) EKSClusterAutoscalerPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSClusterAutoscalerPolicyPtrOutput)
}

// The Cluster Autoscaler IAM policy to the role.
type EKSClusterAutoscalerPolicyOutput struct{ *pulumi.OutputState }

func (EKSClusterAutoscalerPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EKSClusterAutoscalerPolicy)(nil)).Elem()
}

func (o EKSClusterAutoscalerPolicyOutput) ToEKSClusterAutoscalerPolicyOutput() EKSClusterAutoscalerPolicyOutput {
	return o
}

func (o EKSClusterAutoscalerPolicyOutput) ToEKSClusterAutoscalerPolicyOutputWithContext(ctx context.Context) EKSClusterAutoscalerPolicyOutput {
	return o
}

func (o EKSClusterAutoscalerPolicyOutput) ToEKSClusterAutoscalerPolicyPtrOutput() EKSClusterAutoscalerPolicyPtrOutput {
	return o.ToEKSClusterAutoscalerPolicyPtrOutputWithContext(context.Background())
}

func (o EKSClusterAutoscalerPolicyOutput) ToEKSClusterAutoscalerPolicyPtrOutputWithContext(ctx context.Context) EKSClusterAutoscalerPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EKSClusterAutoscalerPolicy) *EKSClusterAutoscalerPolicy {
		return &v
	}).(EKSClusterAutoscalerPolicyPtrOutput)
}

// Determines whether to attach the Cluster Autoscaler IAM policy to the role.
func (o EKSClusterAutoscalerPolicyOutput) Attach() pulumi.BoolOutput {
	return o.ApplyT(func(v EKSClusterAutoscalerPolicy) bool { return v.Attach }).(pulumi.BoolOutput)
}

// List of cluster IDs to appropriately scope permissions within the Cluster Autoscaler IAM policy.
func (o EKSClusterAutoscalerPolicyOutput) ClusterIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EKSClusterAutoscalerPolicy) []string { return v.ClusterIds }).(pulumi.StringArrayOutput)
}

type EKSClusterAutoscalerPolicyPtrOutput struct{ *pulumi.OutputState }

func (EKSClusterAutoscalerPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EKSClusterAutoscalerPolicy)(nil)).Elem()
}

func (o EKSClusterAutoscalerPolicyPtrOutput) ToEKSClusterAutoscalerPolicyPtrOutput() EKSClusterAutoscalerPolicyPtrOutput {
	return o
}

func (o EKSClusterAutoscalerPolicyPtrOutput) ToEKSClusterAutoscalerPolicyPtrOutputWithContext(ctx context.Context) EKSClusterAutoscalerPolicyPtrOutput {
	return o
}

func (o EKSClusterAutoscalerPolicyPtrOutput) Elem() EKSClusterAutoscalerPolicyOutput {
	return o.ApplyT(func(v *EKSClusterAutoscalerPolicy) EKSClusterAutoscalerPolicy {
		if v != nil {
			return *v
		}
		var ret EKSClusterAutoscalerPolicy
		return ret
	}).(EKSClusterAutoscalerPolicyOutput)
}

// Determines whether to attach the Cluster Autoscaler IAM policy to the role.
func (o EKSClusterAutoscalerPolicyPtrOutput) Attach() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EKSClusterAutoscalerPolicy) *bool {
		if v == nil {
			return nil
		}
		return &v.Attach
	}).(pulumi.BoolPtrOutput)
}

// List of cluster IDs to appropriately scope permissions within the Cluster Autoscaler IAM policy.
func (o EKSClusterAutoscalerPolicyPtrOutput) ClusterIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EKSClusterAutoscalerPolicy) []string {
		if v == nil {
			return nil
		}
		return v.ClusterIds
	}).(pulumi.StringArrayOutput)
}

// The EBS CSI IAM policy to the role.
type EKSEBSCSIPolicy struct {
	// Determines whether to attach the EBS CSI IAM policy to the role.
	Attach bool `pulumi:"attach"`
	// KMS CMK IDs to allow EBS CSI to manage encrypted volumes.
	KmsCmkIds []string `pulumi:"kmsCmkIds"`
}

// EKSEBSCSIPolicyInput is an input type that accepts EKSEBSCSIPolicyArgs and EKSEBSCSIPolicyOutput values.
// You can construct a concrete instance of `EKSEBSCSIPolicyInput` via:
//
//	EKSEBSCSIPolicyArgs{...}
type EKSEBSCSIPolicyInput interface {
	pulumi.Input

	ToEKSEBSCSIPolicyOutput() EKSEBSCSIPolicyOutput
	ToEKSEBSCSIPolicyOutputWithContext(context.Context) EKSEBSCSIPolicyOutput
}

// The EBS CSI IAM policy to the role.
type EKSEBSCSIPolicyArgs struct {
	// Determines whether to attach the EBS CSI IAM policy to the role.
	Attach pulumi.BoolInput `pulumi:"attach"`
	// KMS CMK IDs to allow EBS CSI to manage encrypted volumes.
	KmsCmkIds pulumi.StringArrayInput `pulumi:"kmsCmkIds"`
}

func (EKSEBSCSIPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EKSEBSCSIPolicy)(nil)).Elem()
}

func (i EKSEBSCSIPolicyArgs) ToEKSEBSCSIPolicyOutput() EKSEBSCSIPolicyOutput {
	return i.ToEKSEBSCSIPolicyOutputWithContext(context.Background())
}

func (i EKSEBSCSIPolicyArgs) ToEKSEBSCSIPolicyOutputWithContext(ctx context.Context) EKSEBSCSIPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSEBSCSIPolicyOutput)
}

func (i EKSEBSCSIPolicyArgs) ToEKSEBSCSIPolicyPtrOutput() EKSEBSCSIPolicyPtrOutput {
	return i.ToEKSEBSCSIPolicyPtrOutputWithContext(context.Background())
}

func (i EKSEBSCSIPolicyArgs) ToEKSEBSCSIPolicyPtrOutputWithContext(ctx context.Context) EKSEBSCSIPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSEBSCSIPolicyOutput).ToEKSEBSCSIPolicyPtrOutputWithContext(ctx)
}

// EKSEBSCSIPolicyPtrInput is an input type that accepts EKSEBSCSIPolicyArgs, EKSEBSCSIPolicyPtr and EKSEBSCSIPolicyPtrOutput values.
// You can construct a concrete instance of `EKSEBSCSIPolicyPtrInput` via:
//
//	        EKSEBSCSIPolicyArgs{...}
//
//	or:
//
//	        nil
type EKSEBSCSIPolicyPtrInput interface {
	pulumi.Input

	ToEKSEBSCSIPolicyPtrOutput() EKSEBSCSIPolicyPtrOutput
	ToEKSEBSCSIPolicyPtrOutputWithContext(context.Context) EKSEBSCSIPolicyPtrOutput
}

type eksebscsipolicyPtrType EKSEBSCSIPolicyArgs

func EKSEBSCSIPolicyPtr(v *EKSEBSCSIPolicyArgs) EKSEBSCSIPolicyPtrInput {
	return (*eksebscsipolicyPtrType)(v)
}

func (*eksebscsipolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EKSEBSCSIPolicy)(nil)).Elem()
}

func (i *eksebscsipolicyPtrType) ToEKSEBSCSIPolicyPtrOutput() EKSEBSCSIPolicyPtrOutput {
	return i.ToEKSEBSCSIPolicyPtrOutputWithContext(context.Background())
}

func (i *eksebscsipolicyPtrType) ToEKSEBSCSIPolicyPtrOutputWithContext(ctx context.Context) EKSEBSCSIPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSEBSCSIPolicyPtrOutput)
}

// The EBS CSI IAM policy to the role.
type EKSEBSCSIPolicyOutput struct{ *pulumi.OutputState }

func (EKSEBSCSIPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EKSEBSCSIPolicy)(nil)).Elem()
}

func (o EKSEBSCSIPolicyOutput) ToEKSEBSCSIPolicyOutput() EKSEBSCSIPolicyOutput {
	return o
}

func (o EKSEBSCSIPolicyOutput) ToEKSEBSCSIPolicyOutputWithContext(ctx context.Context) EKSEBSCSIPolicyOutput {
	return o
}

func (o EKSEBSCSIPolicyOutput) ToEKSEBSCSIPolicyPtrOutput() EKSEBSCSIPolicyPtrOutput {
	return o.ToEKSEBSCSIPolicyPtrOutputWithContext(context.Background())
}

func (o EKSEBSCSIPolicyOutput) ToEKSEBSCSIPolicyPtrOutputWithContext(ctx context.Context) EKSEBSCSIPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EKSEBSCSIPolicy) *EKSEBSCSIPolicy {
		return &v
	}).(EKSEBSCSIPolicyPtrOutput)
}

// Determines whether to attach the EBS CSI IAM policy to the role.
func (o EKSEBSCSIPolicyOutput) Attach() pulumi.BoolOutput {
	return o.ApplyT(func(v EKSEBSCSIPolicy) bool { return v.Attach }).(pulumi.BoolOutput)
}

// KMS CMK IDs to allow EBS CSI to manage encrypted volumes.
func (o EKSEBSCSIPolicyOutput) KmsCmkIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EKSEBSCSIPolicy) []string { return v.KmsCmkIds }).(pulumi.StringArrayOutput)
}

type EKSEBSCSIPolicyPtrOutput struct{ *pulumi.OutputState }

func (EKSEBSCSIPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EKSEBSCSIPolicy)(nil)).Elem()
}

func (o EKSEBSCSIPolicyPtrOutput) ToEKSEBSCSIPolicyPtrOutput() EKSEBSCSIPolicyPtrOutput {
	return o
}

func (o EKSEBSCSIPolicyPtrOutput) ToEKSEBSCSIPolicyPtrOutputWithContext(ctx context.Context) EKSEBSCSIPolicyPtrOutput {
	return o
}

func (o EKSEBSCSIPolicyPtrOutput) Elem() EKSEBSCSIPolicyOutput {
	return o.ApplyT(func(v *EKSEBSCSIPolicy) EKSEBSCSIPolicy {
		if v != nil {
			return *v
		}
		var ret EKSEBSCSIPolicy
		return ret
	}).(EKSEBSCSIPolicyOutput)
}

// Determines whether to attach the EBS CSI IAM policy to the role.
func (o EKSEBSCSIPolicyPtrOutput) Attach() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EKSEBSCSIPolicy) *bool {
		if v == nil {
			return nil
		}
		return &v.Attach
	}).(pulumi.BoolPtrOutput)
}

// KMS CMK IDs to allow EBS CSI to manage encrypted volumes.
func (o EKSEBSCSIPolicyPtrOutput) KmsCmkIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EKSEBSCSIPolicy) []string {
		if v == nil {
			return nil
		}
		return v.KmsCmkIds
	}).(pulumi.StringArrayOutput)
}

// The EFS CSI IAM policy to the role.
type EKSEFSCSIPolicy struct {
	// Determines whether to attach the EFS CSI IAM policy to the role.
	Attach bool `pulumi:"attach"`
}

// EKSEFSCSIPolicyInput is an input type that accepts EKSEFSCSIPolicyArgs and EKSEFSCSIPolicyOutput values.
// You can construct a concrete instance of `EKSEFSCSIPolicyInput` via:
//
//	EKSEFSCSIPolicyArgs{...}
type EKSEFSCSIPolicyInput interface {
	pulumi.Input

	ToEKSEFSCSIPolicyOutput() EKSEFSCSIPolicyOutput
	ToEKSEFSCSIPolicyOutputWithContext(context.Context) EKSEFSCSIPolicyOutput
}

// The EFS CSI IAM policy to the role.
type EKSEFSCSIPolicyArgs struct {
	// Determines whether to attach the EFS CSI IAM policy to the role.
	Attach pulumi.BoolInput `pulumi:"attach"`
}

func (EKSEFSCSIPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EKSEFSCSIPolicy)(nil)).Elem()
}

func (i EKSEFSCSIPolicyArgs) ToEKSEFSCSIPolicyOutput() EKSEFSCSIPolicyOutput {
	return i.ToEKSEFSCSIPolicyOutputWithContext(context.Background())
}

func (i EKSEFSCSIPolicyArgs) ToEKSEFSCSIPolicyOutputWithContext(ctx context.Context) EKSEFSCSIPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSEFSCSIPolicyOutput)
}

func (i EKSEFSCSIPolicyArgs) ToEKSEFSCSIPolicyPtrOutput() EKSEFSCSIPolicyPtrOutput {
	return i.ToEKSEFSCSIPolicyPtrOutputWithContext(context.Background())
}

func (i EKSEFSCSIPolicyArgs) ToEKSEFSCSIPolicyPtrOutputWithContext(ctx context.Context) EKSEFSCSIPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSEFSCSIPolicyOutput).ToEKSEFSCSIPolicyPtrOutputWithContext(ctx)
}

// EKSEFSCSIPolicyPtrInput is an input type that accepts EKSEFSCSIPolicyArgs, EKSEFSCSIPolicyPtr and EKSEFSCSIPolicyPtrOutput values.
// You can construct a concrete instance of `EKSEFSCSIPolicyPtrInput` via:
//
//	        EKSEFSCSIPolicyArgs{...}
//
//	or:
//
//	        nil
type EKSEFSCSIPolicyPtrInput interface {
	pulumi.Input

	ToEKSEFSCSIPolicyPtrOutput() EKSEFSCSIPolicyPtrOutput
	ToEKSEFSCSIPolicyPtrOutputWithContext(context.Context) EKSEFSCSIPolicyPtrOutput
}

type eksefscsipolicyPtrType EKSEFSCSIPolicyArgs

func EKSEFSCSIPolicyPtr(v *EKSEFSCSIPolicyArgs) EKSEFSCSIPolicyPtrInput {
	return (*eksefscsipolicyPtrType)(v)
}

func (*eksefscsipolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EKSEFSCSIPolicy)(nil)).Elem()
}

func (i *eksefscsipolicyPtrType) ToEKSEFSCSIPolicyPtrOutput() EKSEFSCSIPolicyPtrOutput {
	return i.ToEKSEFSCSIPolicyPtrOutputWithContext(context.Background())
}

func (i *eksefscsipolicyPtrType) ToEKSEFSCSIPolicyPtrOutputWithContext(ctx context.Context) EKSEFSCSIPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSEFSCSIPolicyPtrOutput)
}

// The EFS CSI IAM policy to the role.
type EKSEFSCSIPolicyOutput struct{ *pulumi.OutputState }

func (EKSEFSCSIPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EKSEFSCSIPolicy)(nil)).Elem()
}

func (o EKSEFSCSIPolicyOutput) ToEKSEFSCSIPolicyOutput() EKSEFSCSIPolicyOutput {
	return o
}

func (o EKSEFSCSIPolicyOutput) ToEKSEFSCSIPolicyOutputWithContext(ctx context.Context) EKSEFSCSIPolicyOutput {
	return o
}

func (o EKSEFSCSIPolicyOutput) ToEKSEFSCSIPolicyPtrOutput() EKSEFSCSIPolicyPtrOutput {
	return o.ToEKSEFSCSIPolicyPtrOutputWithContext(context.Background())
}

func (o EKSEFSCSIPolicyOutput) ToEKSEFSCSIPolicyPtrOutputWithContext(ctx context.Context) EKSEFSCSIPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EKSEFSCSIPolicy) *EKSEFSCSIPolicy {
		return &v
	}).(EKSEFSCSIPolicyPtrOutput)
}

// Determines whether to attach the EFS CSI IAM policy to the role.
func (o EKSEFSCSIPolicyOutput) Attach() pulumi.BoolOutput {
	return o.ApplyT(func(v EKSEFSCSIPolicy) bool { return v.Attach }).(pulumi.BoolOutput)
}

type EKSEFSCSIPolicyPtrOutput struct{ *pulumi.OutputState }

func (EKSEFSCSIPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EKSEFSCSIPolicy)(nil)).Elem()
}

func (o EKSEFSCSIPolicyPtrOutput) ToEKSEFSCSIPolicyPtrOutput() EKSEFSCSIPolicyPtrOutput {
	return o
}

func (o EKSEFSCSIPolicyPtrOutput) ToEKSEFSCSIPolicyPtrOutputWithContext(ctx context.Context) EKSEFSCSIPolicyPtrOutput {
	return o
}

func (o EKSEFSCSIPolicyPtrOutput) Elem() EKSEFSCSIPolicyOutput {
	return o.ApplyT(func(v *EKSEFSCSIPolicy) EKSEFSCSIPolicy {
		if v != nil {
			return *v
		}
		var ret EKSEFSCSIPolicy
		return ret
	}).(EKSEFSCSIPolicyOutput)
}

// Determines whether to attach the EFS CSI IAM policy to the role.
func (o EKSEFSCSIPolicyPtrOutput) Attach() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EKSEFSCSIPolicy) *bool {
		if v == nil {
			return nil
		}
		return &v.Attach
	}).(pulumi.BoolPtrOutput)
}

// The External DNS IAM policy to the role.
type EKSExternalDNSPolicy struct {
	// Determines whether to attach the External DNS IAM policy to the role.
	Attach bool `pulumi:"attach"`
	// Route53 hosted zone ARNs to allow External DNS to manage records. If not provided,
	// the default ARN "arn:aws:route53:::hostedzone/*" will be applied.
	HostedZoneArns []string `pulumi:"hostedZoneArns"`
}

// EKSExternalDNSPolicyInput is an input type that accepts EKSExternalDNSPolicyArgs and EKSExternalDNSPolicyOutput values.
// You can construct a concrete instance of `EKSExternalDNSPolicyInput` via:
//
//	EKSExternalDNSPolicyArgs{...}
type EKSExternalDNSPolicyInput interface {
	pulumi.Input

	ToEKSExternalDNSPolicyOutput() EKSExternalDNSPolicyOutput
	ToEKSExternalDNSPolicyOutputWithContext(context.Context) EKSExternalDNSPolicyOutput
}

// The External DNS IAM policy to the role.
type EKSExternalDNSPolicyArgs struct {
	// Determines whether to attach the External DNS IAM policy to the role.
	Attach pulumi.BoolInput `pulumi:"attach"`
	// Route53 hosted zone ARNs to allow External DNS to manage records. If not provided,
	// the default ARN "arn:aws:route53:::hostedzone/*" will be applied.
	HostedZoneArns pulumi.StringArrayInput `pulumi:"hostedZoneArns"`
}

func (EKSExternalDNSPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EKSExternalDNSPolicy)(nil)).Elem()
}

func (i EKSExternalDNSPolicyArgs) ToEKSExternalDNSPolicyOutput() EKSExternalDNSPolicyOutput {
	return i.ToEKSExternalDNSPolicyOutputWithContext(context.Background())
}

func (i EKSExternalDNSPolicyArgs) ToEKSExternalDNSPolicyOutputWithContext(ctx context.Context) EKSExternalDNSPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSExternalDNSPolicyOutput)
}

func (i EKSExternalDNSPolicyArgs) ToEKSExternalDNSPolicyPtrOutput() EKSExternalDNSPolicyPtrOutput {
	return i.ToEKSExternalDNSPolicyPtrOutputWithContext(context.Background())
}

func (i EKSExternalDNSPolicyArgs) ToEKSExternalDNSPolicyPtrOutputWithContext(ctx context.Context) EKSExternalDNSPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSExternalDNSPolicyOutput).ToEKSExternalDNSPolicyPtrOutputWithContext(ctx)
}

// EKSExternalDNSPolicyPtrInput is an input type that accepts EKSExternalDNSPolicyArgs, EKSExternalDNSPolicyPtr and EKSExternalDNSPolicyPtrOutput values.
// You can construct a concrete instance of `EKSExternalDNSPolicyPtrInput` via:
//
//	        EKSExternalDNSPolicyArgs{...}
//
//	or:
//
//	        nil
type EKSExternalDNSPolicyPtrInput interface {
	pulumi.Input

	ToEKSExternalDNSPolicyPtrOutput() EKSExternalDNSPolicyPtrOutput
	ToEKSExternalDNSPolicyPtrOutputWithContext(context.Context) EKSExternalDNSPolicyPtrOutput
}

type eksexternalDNSPolicyPtrType EKSExternalDNSPolicyArgs

func EKSExternalDNSPolicyPtr(v *EKSExternalDNSPolicyArgs) EKSExternalDNSPolicyPtrInput {
	return (*eksexternalDNSPolicyPtrType)(v)
}

func (*eksexternalDNSPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EKSExternalDNSPolicy)(nil)).Elem()
}

func (i *eksexternalDNSPolicyPtrType) ToEKSExternalDNSPolicyPtrOutput() EKSExternalDNSPolicyPtrOutput {
	return i.ToEKSExternalDNSPolicyPtrOutputWithContext(context.Background())
}

func (i *eksexternalDNSPolicyPtrType) ToEKSExternalDNSPolicyPtrOutputWithContext(ctx context.Context) EKSExternalDNSPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSExternalDNSPolicyPtrOutput)
}

// The External DNS IAM policy to the role.
type EKSExternalDNSPolicyOutput struct{ *pulumi.OutputState }

func (EKSExternalDNSPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EKSExternalDNSPolicy)(nil)).Elem()
}

func (o EKSExternalDNSPolicyOutput) ToEKSExternalDNSPolicyOutput() EKSExternalDNSPolicyOutput {
	return o
}

func (o EKSExternalDNSPolicyOutput) ToEKSExternalDNSPolicyOutputWithContext(ctx context.Context) EKSExternalDNSPolicyOutput {
	return o
}

func (o EKSExternalDNSPolicyOutput) ToEKSExternalDNSPolicyPtrOutput() EKSExternalDNSPolicyPtrOutput {
	return o.ToEKSExternalDNSPolicyPtrOutputWithContext(context.Background())
}

func (o EKSExternalDNSPolicyOutput) ToEKSExternalDNSPolicyPtrOutputWithContext(ctx context.Context) EKSExternalDNSPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EKSExternalDNSPolicy) *EKSExternalDNSPolicy {
		return &v
	}).(EKSExternalDNSPolicyPtrOutput)
}

// Determines whether to attach the External DNS IAM policy to the role.
func (o EKSExternalDNSPolicyOutput) Attach() pulumi.BoolOutput {
	return o.ApplyT(func(v EKSExternalDNSPolicy) bool { return v.Attach }).(pulumi.BoolOutput)
}

// Route53 hosted zone ARNs to allow External DNS to manage records. If not provided,
// the default ARN "arn:aws:route53:::hostedzone/*" will be applied.
func (o EKSExternalDNSPolicyOutput) HostedZoneArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EKSExternalDNSPolicy) []string { return v.HostedZoneArns }).(pulumi.StringArrayOutput)
}

type EKSExternalDNSPolicyPtrOutput struct{ *pulumi.OutputState }

func (EKSExternalDNSPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EKSExternalDNSPolicy)(nil)).Elem()
}

func (o EKSExternalDNSPolicyPtrOutput) ToEKSExternalDNSPolicyPtrOutput() EKSExternalDNSPolicyPtrOutput {
	return o
}

func (o EKSExternalDNSPolicyPtrOutput) ToEKSExternalDNSPolicyPtrOutputWithContext(ctx context.Context) EKSExternalDNSPolicyPtrOutput {
	return o
}

func (o EKSExternalDNSPolicyPtrOutput) Elem() EKSExternalDNSPolicyOutput {
	return o.ApplyT(func(v *EKSExternalDNSPolicy) EKSExternalDNSPolicy {
		if v != nil {
			return *v
		}
		var ret EKSExternalDNSPolicy
		return ret
	}).(EKSExternalDNSPolicyOutput)
}

// Determines whether to attach the External DNS IAM policy to the role.
func (o EKSExternalDNSPolicyPtrOutput) Attach() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EKSExternalDNSPolicy) *bool {
		if v == nil {
			return nil
		}
		return &v.Attach
	}).(pulumi.BoolPtrOutput)
}

// Route53 hosted zone ARNs to allow External DNS to manage records. If not provided,
// the default ARN "arn:aws:route53:::hostedzone/*" will be applied.
func (o EKSExternalDNSPolicyPtrOutput) HostedZoneArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EKSExternalDNSPolicy) []string {
		if v == nil {
			return nil
		}
		return v.HostedZoneArns
	}).(pulumi.StringArrayOutput)
}

// The External Secrets policy to the role.
type EKSExternalSecretsPolicy struct {
	// Determines whether to attach the External Secrets policy to the role.
	Attach bool `pulumi:"attach"`
	// List of Secrets Manager ARNs that contain secrets to mount using External Secrets. If not provided, the default ARN "arn:aws:secretsmanager:*:*:secret:*" will be applied.
	SecretsManagerArns []string `pulumi:"secretsManagerArns"`
	// List of Systems Manager Parameter ARNs that contain secrets to mount using External Secrets. If not provided,
	// the default ARN "arn:aws:ssm:*:*:parameter/*" will be applied.
	SsmParameterArns []string `pulumi:"ssmParameterArns"`
}

// EKSExternalSecretsPolicyInput is an input type that accepts EKSExternalSecretsPolicyArgs and EKSExternalSecretsPolicyOutput values.
// You can construct a concrete instance of `EKSExternalSecretsPolicyInput` via:
//
//	EKSExternalSecretsPolicyArgs{...}
type EKSExternalSecretsPolicyInput interface {
	pulumi.Input

	ToEKSExternalSecretsPolicyOutput() EKSExternalSecretsPolicyOutput
	ToEKSExternalSecretsPolicyOutputWithContext(context.Context) EKSExternalSecretsPolicyOutput
}

// The External Secrets policy to the role.
type EKSExternalSecretsPolicyArgs struct {
	// Determines whether to attach the External Secrets policy to the role.
	Attach pulumi.BoolInput `pulumi:"attach"`
	// List of Secrets Manager ARNs that contain secrets to mount using External Secrets. If not provided, the default ARN "arn:aws:secretsmanager:*:*:secret:*" will be applied.
	SecretsManagerArns pulumi.StringArrayInput `pulumi:"secretsManagerArns"`
	// List of Systems Manager Parameter ARNs that contain secrets to mount using External Secrets. If not provided,
	// the default ARN "arn:aws:ssm:*:*:parameter/*" will be applied.
	SsmParameterArns pulumi.StringArrayInput `pulumi:"ssmParameterArns"`
}

func (EKSExternalSecretsPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EKSExternalSecretsPolicy)(nil)).Elem()
}

func (i EKSExternalSecretsPolicyArgs) ToEKSExternalSecretsPolicyOutput() EKSExternalSecretsPolicyOutput {
	return i.ToEKSExternalSecretsPolicyOutputWithContext(context.Background())
}

func (i EKSExternalSecretsPolicyArgs) ToEKSExternalSecretsPolicyOutputWithContext(ctx context.Context) EKSExternalSecretsPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSExternalSecretsPolicyOutput)
}

func (i EKSExternalSecretsPolicyArgs) ToEKSExternalSecretsPolicyPtrOutput() EKSExternalSecretsPolicyPtrOutput {
	return i.ToEKSExternalSecretsPolicyPtrOutputWithContext(context.Background())
}

func (i EKSExternalSecretsPolicyArgs) ToEKSExternalSecretsPolicyPtrOutputWithContext(ctx context.Context) EKSExternalSecretsPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSExternalSecretsPolicyOutput).ToEKSExternalSecretsPolicyPtrOutputWithContext(ctx)
}

// EKSExternalSecretsPolicyPtrInput is an input type that accepts EKSExternalSecretsPolicyArgs, EKSExternalSecretsPolicyPtr and EKSExternalSecretsPolicyPtrOutput values.
// You can construct a concrete instance of `EKSExternalSecretsPolicyPtrInput` via:
//
//	        EKSExternalSecretsPolicyArgs{...}
//
//	or:
//
//	        nil
type EKSExternalSecretsPolicyPtrInput interface {
	pulumi.Input

	ToEKSExternalSecretsPolicyPtrOutput() EKSExternalSecretsPolicyPtrOutput
	ToEKSExternalSecretsPolicyPtrOutputWithContext(context.Context) EKSExternalSecretsPolicyPtrOutput
}

type eksexternalSecretsPolicyPtrType EKSExternalSecretsPolicyArgs

func EKSExternalSecretsPolicyPtr(v *EKSExternalSecretsPolicyArgs) EKSExternalSecretsPolicyPtrInput {
	return (*eksexternalSecretsPolicyPtrType)(v)
}

func (*eksexternalSecretsPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EKSExternalSecretsPolicy)(nil)).Elem()
}

func (i *eksexternalSecretsPolicyPtrType) ToEKSExternalSecretsPolicyPtrOutput() EKSExternalSecretsPolicyPtrOutput {
	return i.ToEKSExternalSecretsPolicyPtrOutputWithContext(context.Background())
}

func (i *eksexternalSecretsPolicyPtrType) ToEKSExternalSecretsPolicyPtrOutputWithContext(ctx context.Context) EKSExternalSecretsPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSExternalSecretsPolicyPtrOutput)
}

// The External Secrets policy to the role.
type EKSExternalSecretsPolicyOutput struct{ *pulumi.OutputState }

func (EKSExternalSecretsPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EKSExternalSecretsPolicy)(nil)).Elem()
}

func (o EKSExternalSecretsPolicyOutput) ToEKSExternalSecretsPolicyOutput() EKSExternalSecretsPolicyOutput {
	return o
}

func (o EKSExternalSecretsPolicyOutput) ToEKSExternalSecretsPolicyOutputWithContext(ctx context.Context) EKSExternalSecretsPolicyOutput {
	return o
}

func (o EKSExternalSecretsPolicyOutput) ToEKSExternalSecretsPolicyPtrOutput() EKSExternalSecretsPolicyPtrOutput {
	return o.ToEKSExternalSecretsPolicyPtrOutputWithContext(context.Background())
}

func (o EKSExternalSecretsPolicyOutput) ToEKSExternalSecretsPolicyPtrOutputWithContext(ctx context.Context) EKSExternalSecretsPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EKSExternalSecretsPolicy) *EKSExternalSecretsPolicy {
		return &v
	}).(EKSExternalSecretsPolicyPtrOutput)
}

// Determines whether to attach the External Secrets policy to the role.
func (o EKSExternalSecretsPolicyOutput) Attach() pulumi.BoolOutput {
	return o.ApplyT(func(v EKSExternalSecretsPolicy) bool { return v.Attach }).(pulumi.BoolOutput)
}

// List of Secrets Manager ARNs that contain secrets to mount using External Secrets. If not provided, the default ARN "arn:aws:secretsmanager:*:*:secret:*" will be applied.
func (o EKSExternalSecretsPolicyOutput) SecretsManagerArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EKSExternalSecretsPolicy) []string { return v.SecretsManagerArns }).(pulumi.StringArrayOutput)
}

// List of Systems Manager Parameter ARNs that contain secrets to mount using External Secrets. If not provided,
// the default ARN "arn:aws:ssm:*:*:parameter/*" will be applied.
func (o EKSExternalSecretsPolicyOutput) SsmParameterArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EKSExternalSecretsPolicy) []string { return v.SsmParameterArns }).(pulumi.StringArrayOutput)
}

type EKSExternalSecretsPolicyPtrOutput struct{ *pulumi.OutputState }

func (EKSExternalSecretsPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EKSExternalSecretsPolicy)(nil)).Elem()
}

func (o EKSExternalSecretsPolicyPtrOutput) ToEKSExternalSecretsPolicyPtrOutput() EKSExternalSecretsPolicyPtrOutput {
	return o
}

func (o EKSExternalSecretsPolicyPtrOutput) ToEKSExternalSecretsPolicyPtrOutputWithContext(ctx context.Context) EKSExternalSecretsPolicyPtrOutput {
	return o
}

func (o EKSExternalSecretsPolicyPtrOutput) Elem() EKSExternalSecretsPolicyOutput {
	return o.ApplyT(func(v *EKSExternalSecretsPolicy) EKSExternalSecretsPolicy {
		if v != nil {
			return *v
		}
		var ret EKSExternalSecretsPolicy
		return ret
	}).(EKSExternalSecretsPolicyOutput)
}

// Determines whether to attach the External Secrets policy to the role.
func (o EKSExternalSecretsPolicyPtrOutput) Attach() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EKSExternalSecretsPolicy) *bool {
		if v == nil {
			return nil
		}
		return &v.Attach
	}).(pulumi.BoolPtrOutput)
}

// List of Secrets Manager ARNs that contain secrets to mount using External Secrets. If not provided, the default ARN "arn:aws:secretsmanager:*:*:secret:*" will be applied.
func (o EKSExternalSecretsPolicyPtrOutput) SecretsManagerArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EKSExternalSecretsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.SecretsManagerArns
	}).(pulumi.StringArrayOutput)
}

// List of Systems Manager Parameter ARNs that contain secrets to mount using External Secrets. If not provided,
// the default ARN "arn:aws:ssm:*:*:parameter/*" will be applied.
func (o EKSExternalSecretsPolicyPtrOutput) SsmParameterArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EKSExternalSecretsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.SsmParameterArns
	}).(pulumi.StringArrayOutput)
}

// The Karpenter Controller policy to the role.
type EKSKarpenterControllerPolicy struct {
	// Determines whether to attach the Karpenter Controller policy to the role.
	Attach bool `pulumi:"attach"`
	// Cluster ID where the Karpenter controller is provisioned/managing.
	ClusterId *string `pulumi:"clusterId"`
	// List of node IAM role ARNs Karpenter can use to launch nodes. If not provided,
	// the default ARN "*" will be applied.
	NodeIamRoleArns []string `pulumi:"nodeIamRoleArns"`
	// List of SSM Parameter ARNs that contain AMI IDs launched by Karpenter. If not provided,
	// the default ARN "arn:aws:ssm:*:*:parameter/aws/service/*" will be applied.
	SsmParameterArns []string `pulumi:"ssmParameterArns"`
	// Account ID of where the subnets Karpenter will utilize resides. Used when subnets are shared from another account.
	SubnetAccountId *string `pulumi:"subnetAccountId"`
	// Tag key (`{key = value}`) applied to resources launched by Karpenter through the Karpenter provisioner.
	TagKey *string `pulumi:"tagKey"`
}

// Defaults sets the appropriate defaults for EKSKarpenterControllerPolicy
func (val *EKSKarpenterControllerPolicy) Defaults() *EKSKarpenterControllerPolicy {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ClusterId == nil {
		clusterId_ := "*"
		tmp.ClusterId = &clusterId_
	}
	if tmp.TagKey == nil {
		tagKey_ := "karpenter.sh/discovery"
		tmp.TagKey = &tagKey_
	}
	return &tmp
}

// EKSKarpenterControllerPolicyInput is an input type that accepts EKSKarpenterControllerPolicyArgs and EKSKarpenterControllerPolicyOutput values.
// You can construct a concrete instance of `EKSKarpenterControllerPolicyInput` via:
//
//	EKSKarpenterControllerPolicyArgs{...}
type EKSKarpenterControllerPolicyInput interface {
	pulumi.Input

	ToEKSKarpenterControllerPolicyOutput() EKSKarpenterControllerPolicyOutput
	ToEKSKarpenterControllerPolicyOutputWithContext(context.Context) EKSKarpenterControllerPolicyOutput
}

// The Karpenter Controller policy to the role.
type EKSKarpenterControllerPolicyArgs struct {
	// Determines whether to attach the Karpenter Controller policy to the role.
	Attach pulumi.BoolInput `pulumi:"attach"`
	// Cluster ID where the Karpenter controller is provisioned/managing.
	ClusterId pulumi.StringPtrInput `pulumi:"clusterId"`
	// List of node IAM role ARNs Karpenter can use to launch nodes. If not provided,
	// the default ARN "*" will be applied.
	NodeIamRoleArns pulumi.StringArrayInput `pulumi:"nodeIamRoleArns"`
	// List of SSM Parameter ARNs that contain AMI IDs launched by Karpenter. If not provided,
	// the default ARN "arn:aws:ssm:*:*:parameter/aws/service/*" will be applied.
	SsmParameterArns pulumi.StringArrayInput `pulumi:"ssmParameterArns"`
	// Account ID of where the subnets Karpenter will utilize resides. Used when subnets are shared from another account.
	SubnetAccountId pulumi.StringPtrInput `pulumi:"subnetAccountId"`
	// Tag key (`{key = value}`) applied to resources launched by Karpenter through the Karpenter provisioner.
	TagKey pulumi.StringPtrInput `pulumi:"tagKey"`
}

// Defaults sets the appropriate defaults for EKSKarpenterControllerPolicyArgs
func (val *EKSKarpenterControllerPolicyArgs) Defaults() *EKSKarpenterControllerPolicyArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ClusterId == nil {
		tmp.ClusterId = pulumi.StringPtr("*")
	}
	if tmp.TagKey == nil {
		tmp.TagKey = pulumi.StringPtr("karpenter.sh/discovery")
	}
	return &tmp
}
func (EKSKarpenterControllerPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EKSKarpenterControllerPolicy)(nil)).Elem()
}

func (i EKSKarpenterControllerPolicyArgs) ToEKSKarpenterControllerPolicyOutput() EKSKarpenterControllerPolicyOutput {
	return i.ToEKSKarpenterControllerPolicyOutputWithContext(context.Background())
}

func (i EKSKarpenterControllerPolicyArgs) ToEKSKarpenterControllerPolicyOutputWithContext(ctx context.Context) EKSKarpenterControllerPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSKarpenterControllerPolicyOutput)
}

func (i EKSKarpenterControllerPolicyArgs) ToEKSKarpenterControllerPolicyPtrOutput() EKSKarpenterControllerPolicyPtrOutput {
	return i.ToEKSKarpenterControllerPolicyPtrOutputWithContext(context.Background())
}

func (i EKSKarpenterControllerPolicyArgs) ToEKSKarpenterControllerPolicyPtrOutputWithContext(ctx context.Context) EKSKarpenterControllerPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSKarpenterControllerPolicyOutput).ToEKSKarpenterControllerPolicyPtrOutputWithContext(ctx)
}

// EKSKarpenterControllerPolicyPtrInput is an input type that accepts EKSKarpenterControllerPolicyArgs, EKSKarpenterControllerPolicyPtr and EKSKarpenterControllerPolicyPtrOutput values.
// You can construct a concrete instance of `EKSKarpenterControllerPolicyPtrInput` via:
//
//	        EKSKarpenterControllerPolicyArgs{...}
//
//	or:
//
//	        nil
type EKSKarpenterControllerPolicyPtrInput interface {
	pulumi.Input

	ToEKSKarpenterControllerPolicyPtrOutput() EKSKarpenterControllerPolicyPtrOutput
	ToEKSKarpenterControllerPolicyPtrOutputWithContext(context.Context) EKSKarpenterControllerPolicyPtrOutput
}

type ekskarpenterControllerPolicyPtrType EKSKarpenterControllerPolicyArgs

func EKSKarpenterControllerPolicyPtr(v *EKSKarpenterControllerPolicyArgs) EKSKarpenterControllerPolicyPtrInput {
	return (*ekskarpenterControllerPolicyPtrType)(v)
}

func (*ekskarpenterControllerPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EKSKarpenterControllerPolicy)(nil)).Elem()
}

func (i *ekskarpenterControllerPolicyPtrType) ToEKSKarpenterControllerPolicyPtrOutput() EKSKarpenterControllerPolicyPtrOutput {
	return i.ToEKSKarpenterControllerPolicyPtrOutputWithContext(context.Background())
}

func (i *ekskarpenterControllerPolicyPtrType) ToEKSKarpenterControllerPolicyPtrOutputWithContext(ctx context.Context) EKSKarpenterControllerPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSKarpenterControllerPolicyPtrOutput)
}

// The Karpenter Controller policy to the role.
type EKSKarpenterControllerPolicyOutput struct{ *pulumi.OutputState }

func (EKSKarpenterControllerPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EKSKarpenterControllerPolicy)(nil)).Elem()
}

func (o EKSKarpenterControllerPolicyOutput) ToEKSKarpenterControllerPolicyOutput() EKSKarpenterControllerPolicyOutput {
	return o
}

func (o EKSKarpenterControllerPolicyOutput) ToEKSKarpenterControllerPolicyOutputWithContext(ctx context.Context) EKSKarpenterControllerPolicyOutput {
	return o
}

func (o EKSKarpenterControllerPolicyOutput) ToEKSKarpenterControllerPolicyPtrOutput() EKSKarpenterControllerPolicyPtrOutput {
	return o.ToEKSKarpenterControllerPolicyPtrOutputWithContext(context.Background())
}

func (o EKSKarpenterControllerPolicyOutput) ToEKSKarpenterControllerPolicyPtrOutputWithContext(ctx context.Context) EKSKarpenterControllerPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EKSKarpenterControllerPolicy) *EKSKarpenterControllerPolicy {
		return &v
	}).(EKSKarpenterControllerPolicyPtrOutput)
}

// Determines whether to attach the Karpenter Controller policy to the role.
func (o EKSKarpenterControllerPolicyOutput) Attach() pulumi.BoolOutput {
	return o.ApplyT(func(v EKSKarpenterControllerPolicy) bool { return v.Attach }).(pulumi.BoolOutput)
}

// Cluster ID where the Karpenter controller is provisioned/managing.
func (o EKSKarpenterControllerPolicyOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EKSKarpenterControllerPolicy) *string { return v.ClusterId }).(pulumi.StringPtrOutput)
}

// List of node IAM role ARNs Karpenter can use to launch nodes. If not provided,
// the default ARN "*" will be applied.
func (o EKSKarpenterControllerPolicyOutput) NodeIamRoleArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EKSKarpenterControllerPolicy) []string { return v.NodeIamRoleArns }).(pulumi.StringArrayOutput)
}

// List of SSM Parameter ARNs that contain AMI IDs launched by Karpenter. If not provided,
// the default ARN "arn:aws:ssm:*:*:parameter/aws/service/*" will be applied.
func (o EKSKarpenterControllerPolicyOutput) SsmParameterArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EKSKarpenterControllerPolicy) []string { return v.SsmParameterArns }).(pulumi.StringArrayOutput)
}

// Account ID of where the subnets Karpenter will utilize resides. Used when subnets are shared from another account.
func (o EKSKarpenterControllerPolicyOutput) SubnetAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EKSKarpenterControllerPolicy) *string { return v.SubnetAccountId }).(pulumi.StringPtrOutput)
}

// Tag key (`{key = value}`) applied to resources launched by Karpenter through the Karpenter provisioner.
func (o EKSKarpenterControllerPolicyOutput) TagKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EKSKarpenterControllerPolicy) *string { return v.TagKey }).(pulumi.StringPtrOutput)
}

type EKSKarpenterControllerPolicyPtrOutput struct{ *pulumi.OutputState }

func (EKSKarpenterControllerPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EKSKarpenterControllerPolicy)(nil)).Elem()
}

func (o EKSKarpenterControllerPolicyPtrOutput) ToEKSKarpenterControllerPolicyPtrOutput() EKSKarpenterControllerPolicyPtrOutput {
	return o
}

func (o EKSKarpenterControllerPolicyPtrOutput) ToEKSKarpenterControllerPolicyPtrOutputWithContext(ctx context.Context) EKSKarpenterControllerPolicyPtrOutput {
	return o
}

func (o EKSKarpenterControllerPolicyPtrOutput) Elem() EKSKarpenterControllerPolicyOutput {
	return o.ApplyT(func(v *EKSKarpenterControllerPolicy) EKSKarpenterControllerPolicy {
		if v != nil {
			return *v
		}
		var ret EKSKarpenterControllerPolicy
		return ret
	}).(EKSKarpenterControllerPolicyOutput)
}

// Determines whether to attach the Karpenter Controller policy to the role.
func (o EKSKarpenterControllerPolicyPtrOutput) Attach() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EKSKarpenterControllerPolicy) *bool {
		if v == nil {
			return nil
		}
		return &v.Attach
	}).(pulumi.BoolPtrOutput)
}

// Cluster ID where the Karpenter controller is provisioned/managing.
func (o EKSKarpenterControllerPolicyPtrOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EKSKarpenterControllerPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ClusterId
	}).(pulumi.StringPtrOutput)
}

// List of node IAM role ARNs Karpenter can use to launch nodes. If not provided,
// the default ARN "*" will be applied.
func (o EKSKarpenterControllerPolicyPtrOutput) NodeIamRoleArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EKSKarpenterControllerPolicy) []string {
		if v == nil {
			return nil
		}
		return v.NodeIamRoleArns
	}).(pulumi.StringArrayOutput)
}

// List of SSM Parameter ARNs that contain AMI IDs launched by Karpenter. If not provided,
// the default ARN "arn:aws:ssm:*:*:parameter/aws/service/*" will be applied.
func (o EKSKarpenterControllerPolicyPtrOutput) SsmParameterArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EKSKarpenterControllerPolicy) []string {
		if v == nil {
			return nil
		}
		return v.SsmParameterArns
	}).(pulumi.StringArrayOutput)
}

// Account ID of where the subnets Karpenter will utilize resides. Used when subnets are shared from another account.
func (o EKSKarpenterControllerPolicyPtrOutput) SubnetAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EKSKarpenterControllerPolicy) *string {
		if v == nil {
			return nil
		}
		return v.SubnetAccountId
	}).(pulumi.StringPtrOutput)
}

// Tag key (`{key = value}`) applied to resources launched by Karpenter through the Karpenter provisioner.
func (o EKSKarpenterControllerPolicyPtrOutput) TagKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EKSKarpenterControllerPolicy) *string {
		if v == nil {
			return nil
		}
		return v.TagKey
	}).(pulumi.StringPtrOutput)
}

// The Load Balancer policy.
type EKSLoadBalancerPolicy struct {
	// Determines whether to attach the Load Balancer Controller policy to the role.
	Controller *bool `pulumi:"controller"`
	// Determines whether to attach the Load Balancer Controller policy for the TargetGroupBinding only.
	TargetGroupBindingOnly *bool `pulumi:"targetGroupBindingOnly"`
}

// EKSLoadBalancerPolicyInput is an input type that accepts EKSLoadBalancerPolicyArgs and EKSLoadBalancerPolicyOutput values.
// You can construct a concrete instance of `EKSLoadBalancerPolicyInput` via:
//
//	EKSLoadBalancerPolicyArgs{...}
type EKSLoadBalancerPolicyInput interface {
	pulumi.Input

	ToEKSLoadBalancerPolicyOutput() EKSLoadBalancerPolicyOutput
	ToEKSLoadBalancerPolicyOutputWithContext(context.Context) EKSLoadBalancerPolicyOutput
}

// The Load Balancer policy.
type EKSLoadBalancerPolicyArgs struct {
	// Determines whether to attach the Load Balancer Controller policy to the role.
	Controller pulumi.BoolPtrInput `pulumi:"controller"`
	// Determines whether to attach the Load Balancer Controller policy for the TargetGroupBinding only.
	TargetGroupBindingOnly pulumi.BoolPtrInput `pulumi:"targetGroupBindingOnly"`
}

func (EKSLoadBalancerPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EKSLoadBalancerPolicy)(nil)).Elem()
}

func (i EKSLoadBalancerPolicyArgs) ToEKSLoadBalancerPolicyOutput() EKSLoadBalancerPolicyOutput {
	return i.ToEKSLoadBalancerPolicyOutputWithContext(context.Background())
}

func (i EKSLoadBalancerPolicyArgs) ToEKSLoadBalancerPolicyOutputWithContext(ctx context.Context) EKSLoadBalancerPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSLoadBalancerPolicyOutput)
}

func (i EKSLoadBalancerPolicyArgs) ToEKSLoadBalancerPolicyPtrOutput() EKSLoadBalancerPolicyPtrOutput {
	return i.ToEKSLoadBalancerPolicyPtrOutputWithContext(context.Background())
}

func (i EKSLoadBalancerPolicyArgs) ToEKSLoadBalancerPolicyPtrOutputWithContext(ctx context.Context) EKSLoadBalancerPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSLoadBalancerPolicyOutput).ToEKSLoadBalancerPolicyPtrOutputWithContext(ctx)
}

// EKSLoadBalancerPolicyPtrInput is an input type that accepts EKSLoadBalancerPolicyArgs, EKSLoadBalancerPolicyPtr and EKSLoadBalancerPolicyPtrOutput values.
// You can construct a concrete instance of `EKSLoadBalancerPolicyPtrInput` via:
//
//	        EKSLoadBalancerPolicyArgs{...}
//
//	or:
//
//	        nil
type EKSLoadBalancerPolicyPtrInput interface {
	pulumi.Input

	ToEKSLoadBalancerPolicyPtrOutput() EKSLoadBalancerPolicyPtrOutput
	ToEKSLoadBalancerPolicyPtrOutputWithContext(context.Context) EKSLoadBalancerPolicyPtrOutput
}

type eksloadBalancerPolicyPtrType EKSLoadBalancerPolicyArgs

func EKSLoadBalancerPolicyPtr(v *EKSLoadBalancerPolicyArgs) EKSLoadBalancerPolicyPtrInput {
	return (*eksloadBalancerPolicyPtrType)(v)
}

func (*eksloadBalancerPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EKSLoadBalancerPolicy)(nil)).Elem()
}

func (i *eksloadBalancerPolicyPtrType) ToEKSLoadBalancerPolicyPtrOutput() EKSLoadBalancerPolicyPtrOutput {
	return i.ToEKSLoadBalancerPolicyPtrOutputWithContext(context.Background())
}

func (i *eksloadBalancerPolicyPtrType) ToEKSLoadBalancerPolicyPtrOutputWithContext(ctx context.Context) EKSLoadBalancerPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSLoadBalancerPolicyPtrOutput)
}

// The Load Balancer policy.
type EKSLoadBalancerPolicyOutput struct{ *pulumi.OutputState }

func (EKSLoadBalancerPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EKSLoadBalancerPolicy)(nil)).Elem()
}

func (o EKSLoadBalancerPolicyOutput) ToEKSLoadBalancerPolicyOutput() EKSLoadBalancerPolicyOutput {
	return o
}

func (o EKSLoadBalancerPolicyOutput) ToEKSLoadBalancerPolicyOutputWithContext(ctx context.Context) EKSLoadBalancerPolicyOutput {
	return o
}

func (o EKSLoadBalancerPolicyOutput) ToEKSLoadBalancerPolicyPtrOutput() EKSLoadBalancerPolicyPtrOutput {
	return o.ToEKSLoadBalancerPolicyPtrOutputWithContext(context.Background())
}

func (o EKSLoadBalancerPolicyOutput) ToEKSLoadBalancerPolicyPtrOutputWithContext(ctx context.Context) EKSLoadBalancerPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EKSLoadBalancerPolicy) *EKSLoadBalancerPolicy {
		return &v
	}).(EKSLoadBalancerPolicyPtrOutput)
}

// Determines whether to attach the Load Balancer Controller policy to the role.
func (o EKSLoadBalancerPolicyOutput) Controller() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EKSLoadBalancerPolicy) *bool { return v.Controller }).(pulumi.BoolPtrOutput)
}

// Determines whether to attach the Load Balancer Controller policy for the TargetGroupBinding only.
func (o EKSLoadBalancerPolicyOutput) TargetGroupBindingOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EKSLoadBalancerPolicy) *bool { return v.TargetGroupBindingOnly }).(pulumi.BoolPtrOutput)
}

type EKSLoadBalancerPolicyPtrOutput struct{ *pulumi.OutputState }

func (EKSLoadBalancerPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EKSLoadBalancerPolicy)(nil)).Elem()
}

func (o EKSLoadBalancerPolicyPtrOutput) ToEKSLoadBalancerPolicyPtrOutput() EKSLoadBalancerPolicyPtrOutput {
	return o
}

func (o EKSLoadBalancerPolicyPtrOutput) ToEKSLoadBalancerPolicyPtrOutputWithContext(ctx context.Context) EKSLoadBalancerPolicyPtrOutput {
	return o
}

func (o EKSLoadBalancerPolicyPtrOutput) Elem() EKSLoadBalancerPolicyOutput {
	return o.ApplyT(func(v *EKSLoadBalancerPolicy) EKSLoadBalancerPolicy {
		if v != nil {
			return *v
		}
		var ret EKSLoadBalancerPolicy
		return ret
	}).(EKSLoadBalancerPolicyOutput)
}

// Determines whether to attach the Load Balancer Controller policy to the role.
func (o EKSLoadBalancerPolicyPtrOutput) Controller() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EKSLoadBalancerPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.Controller
	}).(pulumi.BoolPtrOutput)
}

// Determines whether to attach the Load Balancer Controller policy for the TargetGroupBinding only.
func (o EKSLoadBalancerPolicyPtrOutput) TargetGroupBindingOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EKSLoadBalancerPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.TargetGroupBindingOnly
	}).(pulumi.BoolPtrOutput)
}

// The Node Termination Handler policy to the role.
type EKSNodeTerminationHandlerPolicy struct {
	// Determines whether to attach the Node Termination Handler policy to the role.
	Attach bool `pulumi:"attach"`
	// List of SQS ARNs that contain node termination events. If not provided, then a default
	// ARN of "*" will be provided.
	SqsQueueArns []string `pulumi:"sqsQueueArns"`
}

// EKSNodeTerminationHandlerPolicyInput is an input type that accepts EKSNodeTerminationHandlerPolicyArgs and EKSNodeTerminationHandlerPolicyOutput values.
// You can construct a concrete instance of `EKSNodeTerminationHandlerPolicyInput` via:
//
//	EKSNodeTerminationHandlerPolicyArgs{...}
type EKSNodeTerminationHandlerPolicyInput interface {
	pulumi.Input

	ToEKSNodeTerminationHandlerPolicyOutput() EKSNodeTerminationHandlerPolicyOutput
	ToEKSNodeTerminationHandlerPolicyOutputWithContext(context.Context) EKSNodeTerminationHandlerPolicyOutput
}

// The Node Termination Handler policy to the role.
type EKSNodeTerminationHandlerPolicyArgs struct {
	// Determines whether to attach the Node Termination Handler policy to the role.
	Attach pulumi.BoolInput `pulumi:"attach"`
	// List of SQS ARNs that contain node termination events. If not provided, then a default
	// ARN of "*" will be provided.
	SqsQueueArns pulumi.StringArrayInput `pulumi:"sqsQueueArns"`
}

func (EKSNodeTerminationHandlerPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EKSNodeTerminationHandlerPolicy)(nil)).Elem()
}

func (i EKSNodeTerminationHandlerPolicyArgs) ToEKSNodeTerminationHandlerPolicyOutput() EKSNodeTerminationHandlerPolicyOutput {
	return i.ToEKSNodeTerminationHandlerPolicyOutputWithContext(context.Background())
}

func (i EKSNodeTerminationHandlerPolicyArgs) ToEKSNodeTerminationHandlerPolicyOutputWithContext(ctx context.Context) EKSNodeTerminationHandlerPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSNodeTerminationHandlerPolicyOutput)
}

func (i EKSNodeTerminationHandlerPolicyArgs) ToEKSNodeTerminationHandlerPolicyPtrOutput() EKSNodeTerminationHandlerPolicyPtrOutput {
	return i.ToEKSNodeTerminationHandlerPolicyPtrOutputWithContext(context.Background())
}

func (i EKSNodeTerminationHandlerPolicyArgs) ToEKSNodeTerminationHandlerPolicyPtrOutputWithContext(ctx context.Context) EKSNodeTerminationHandlerPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSNodeTerminationHandlerPolicyOutput).ToEKSNodeTerminationHandlerPolicyPtrOutputWithContext(ctx)
}

// EKSNodeTerminationHandlerPolicyPtrInput is an input type that accepts EKSNodeTerminationHandlerPolicyArgs, EKSNodeTerminationHandlerPolicyPtr and EKSNodeTerminationHandlerPolicyPtrOutput values.
// You can construct a concrete instance of `EKSNodeTerminationHandlerPolicyPtrInput` via:
//
//	        EKSNodeTerminationHandlerPolicyArgs{...}
//
//	or:
//
//	        nil
type EKSNodeTerminationHandlerPolicyPtrInput interface {
	pulumi.Input

	ToEKSNodeTerminationHandlerPolicyPtrOutput() EKSNodeTerminationHandlerPolicyPtrOutput
	ToEKSNodeTerminationHandlerPolicyPtrOutputWithContext(context.Context) EKSNodeTerminationHandlerPolicyPtrOutput
}

type eksnodeTerminationHandlerPolicyPtrType EKSNodeTerminationHandlerPolicyArgs

func EKSNodeTerminationHandlerPolicyPtr(v *EKSNodeTerminationHandlerPolicyArgs) EKSNodeTerminationHandlerPolicyPtrInput {
	return (*eksnodeTerminationHandlerPolicyPtrType)(v)
}

func (*eksnodeTerminationHandlerPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EKSNodeTerminationHandlerPolicy)(nil)).Elem()
}

func (i *eksnodeTerminationHandlerPolicyPtrType) ToEKSNodeTerminationHandlerPolicyPtrOutput() EKSNodeTerminationHandlerPolicyPtrOutput {
	return i.ToEKSNodeTerminationHandlerPolicyPtrOutputWithContext(context.Background())
}

func (i *eksnodeTerminationHandlerPolicyPtrType) ToEKSNodeTerminationHandlerPolicyPtrOutputWithContext(ctx context.Context) EKSNodeTerminationHandlerPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSNodeTerminationHandlerPolicyPtrOutput)
}

// The Node Termination Handler policy to the role.
type EKSNodeTerminationHandlerPolicyOutput struct{ *pulumi.OutputState }

func (EKSNodeTerminationHandlerPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EKSNodeTerminationHandlerPolicy)(nil)).Elem()
}

func (o EKSNodeTerminationHandlerPolicyOutput) ToEKSNodeTerminationHandlerPolicyOutput() EKSNodeTerminationHandlerPolicyOutput {
	return o
}

func (o EKSNodeTerminationHandlerPolicyOutput) ToEKSNodeTerminationHandlerPolicyOutputWithContext(ctx context.Context) EKSNodeTerminationHandlerPolicyOutput {
	return o
}

func (o EKSNodeTerminationHandlerPolicyOutput) ToEKSNodeTerminationHandlerPolicyPtrOutput() EKSNodeTerminationHandlerPolicyPtrOutput {
	return o.ToEKSNodeTerminationHandlerPolicyPtrOutputWithContext(context.Background())
}

func (o EKSNodeTerminationHandlerPolicyOutput) ToEKSNodeTerminationHandlerPolicyPtrOutputWithContext(ctx context.Context) EKSNodeTerminationHandlerPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EKSNodeTerminationHandlerPolicy) *EKSNodeTerminationHandlerPolicy {
		return &v
	}).(EKSNodeTerminationHandlerPolicyPtrOutput)
}

// Determines whether to attach the Node Termination Handler policy to the role.
func (o EKSNodeTerminationHandlerPolicyOutput) Attach() pulumi.BoolOutput {
	return o.ApplyT(func(v EKSNodeTerminationHandlerPolicy) bool { return v.Attach }).(pulumi.BoolOutput)
}

// List of SQS ARNs that contain node termination events. If not provided, then a default
// ARN of "*" will be provided.
func (o EKSNodeTerminationHandlerPolicyOutput) SqsQueueArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EKSNodeTerminationHandlerPolicy) []string { return v.SqsQueueArns }).(pulumi.StringArrayOutput)
}

type EKSNodeTerminationHandlerPolicyPtrOutput struct{ *pulumi.OutputState }

func (EKSNodeTerminationHandlerPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EKSNodeTerminationHandlerPolicy)(nil)).Elem()
}

func (o EKSNodeTerminationHandlerPolicyPtrOutput) ToEKSNodeTerminationHandlerPolicyPtrOutput() EKSNodeTerminationHandlerPolicyPtrOutput {
	return o
}

func (o EKSNodeTerminationHandlerPolicyPtrOutput) ToEKSNodeTerminationHandlerPolicyPtrOutputWithContext(ctx context.Context) EKSNodeTerminationHandlerPolicyPtrOutput {
	return o
}

func (o EKSNodeTerminationHandlerPolicyPtrOutput) Elem() EKSNodeTerminationHandlerPolicyOutput {
	return o.ApplyT(func(v *EKSNodeTerminationHandlerPolicy) EKSNodeTerminationHandlerPolicy {
		if v != nil {
			return *v
		}
		var ret EKSNodeTerminationHandlerPolicy
		return ret
	}).(EKSNodeTerminationHandlerPolicyOutput)
}

// Determines whether to attach the Node Termination Handler policy to the role.
func (o EKSNodeTerminationHandlerPolicyPtrOutput) Attach() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EKSNodeTerminationHandlerPolicy) *bool {
		if v == nil {
			return nil
		}
		return &v.Attach
	}).(pulumi.BoolPtrOutput)
}

// List of SQS ARNs that contain node termination events. If not provided, then a default
// ARN of "*" will be provided.
func (o EKSNodeTerminationHandlerPolicyPtrOutput) SqsQueueArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EKSNodeTerminationHandlerPolicy) []string {
		if v == nil {
			return nil
		}
		return v.SqsQueueArns
	}).(pulumi.StringArrayOutput)
}

// The different policies to attach to the role.
type EKSRolePolicies struct {
	// The Amazon Managed Service for Prometheus IAM policy.
	AmazonManagedServicePrometheus *EKSAmazonManagedServicePrometheusPolicy `pulumi:"amazonManagedServicePrometheus"`
	// The Appmesh policies.
	Appmesh *EKSAppmeshPolicy `pulumi:"appmesh"`
	// The Cert Manager IAM policy.
	CertManager *EKSCertManagerPolicy `pulumi:"certManager"`
	// The Cluster Autoscaler IAM policy.
	ClusterAutoScaling *EKSClusterAutoscalerPolicy `pulumi:"clusterAutoScaling"`
	// The EBS CSI IAM policy.
	EbsCsi *EKSEBSCSIPolicy `pulumi:"ebsCsi"`
	// The EFS CSI IAM policy.
	EfsCsi *EKSEFSCSIPolicy `pulumi:"efsCsi"`
	// The External DNS IAM policy.
	ExternalDns *EKSExternalDNSPolicy `pulumi:"externalDns"`
	// The External Secrets policy.
	ExternalSecrets *EKSExternalSecretsPolicy `pulumi:"externalSecrets"`
	// The FSx for Lustre CSI Driver IAM policy.
	FsxLustreCsi *FSxLustreCSIPolicy `pulumi:"fsxLustreCsi"`
	// The Karpenter Controller policy.
	KarpenterController *EKSKarpenterControllerPolicy `pulumi:"karpenterController"`
	// The Load Balancer policy.
	LoadBalancer *EKSLoadBalancerPolicy `pulumi:"loadBalancer"`
	// The Node Termination Handler policy to the role.
	NodeTerminationHandler *EKSNodeTerminationHandlerPolicy `pulumi:"nodeTerminationHandler"`
	// The Velero IAM policy.
	Velero *EKSVeleroPolicy `pulumi:"velero"`
	// The VPC CNI IAM policy to the role.
	VpnCni *EKSVPNCNIPolicy `pulumi:"vpnCni"`
}

// Defaults sets the appropriate defaults for EKSRolePolicies
func (val *EKSRolePolicies) Defaults() *EKSRolePolicies {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.KarpenterController = tmp.KarpenterController.Defaults()

	return &tmp
}

// EKSRolePoliciesInput is an input type that accepts EKSRolePoliciesArgs and EKSRolePoliciesOutput values.
// You can construct a concrete instance of `EKSRolePoliciesInput` via:
//
//	EKSRolePoliciesArgs{...}
type EKSRolePoliciesInput interface {
	pulumi.Input

	ToEKSRolePoliciesOutput() EKSRolePoliciesOutput
	ToEKSRolePoliciesOutputWithContext(context.Context) EKSRolePoliciesOutput
}

// The different policies to attach to the role.
type EKSRolePoliciesArgs struct {
	// The Amazon Managed Service for Prometheus IAM policy.
	AmazonManagedServicePrometheus EKSAmazonManagedServicePrometheusPolicyPtrInput `pulumi:"amazonManagedServicePrometheus"`
	// The Appmesh policies.
	Appmesh EKSAppmeshPolicyPtrInput `pulumi:"appmesh"`
	// The Cert Manager IAM policy.
	CertManager EKSCertManagerPolicyPtrInput `pulumi:"certManager"`
	// The Cluster Autoscaler IAM policy.
	ClusterAutoScaling EKSClusterAutoscalerPolicyPtrInput `pulumi:"clusterAutoScaling"`
	// The EBS CSI IAM policy.
	EbsCsi EKSEBSCSIPolicyPtrInput `pulumi:"ebsCsi"`
	// The EFS CSI IAM policy.
	EfsCsi EKSEFSCSIPolicyPtrInput `pulumi:"efsCsi"`
	// The External DNS IAM policy.
	ExternalDns EKSExternalDNSPolicyPtrInput `pulumi:"externalDns"`
	// The External Secrets policy.
	ExternalSecrets EKSExternalSecretsPolicyPtrInput `pulumi:"externalSecrets"`
	// The FSx for Lustre CSI Driver IAM policy.
	FsxLustreCsi FSxLustreCSIPolicyPtrInput `pulumi:"fsxLustreCsi"`
	// The Karpenter Controller policy.
	KarpenterController EKSKarpenterControllerPolicyPtrInput `pulumi:"karpenterController"`
	// The Load Balancer policy.
	LoadBalancer EKSLoadBalancerPolicyPtrInput `pulumi:"loadBalancer"`
	// The Node Termination Handler policy to the role.
	NodeTerminationHandler EKSNodeTerminationHandlerPolicyPtrInput `pulumi:"nodeTerminationHandler"`
	// The Velero IAM policy.
	Velero EKSVeleroPolicyPtrInput `pulumi:"velero"`
	// The VPC CNI IAM policy to the role.
	VpnCni EKSVPNCNIPolicyPtrInput `pulumi:"vpnCni"`
}

// Defaults sets the appropriate defaults for EKSRolePoliciesArgs
func (val *EKSRolePoliciesArgs) Defaults() *EKSRolePoliciesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (EKSRolePoliciesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EKSRolePolicies)(nil)).Elem()
}

func (i EKSRolePoliciesArgs) ToEKSRolePoliciesOutput() EKSRolePoliciesOutput {
	return i.ToEKSRolePoliciesOutputWithContext(context.Background())
}

func (i EKSRolePoliciesArgs) ToEKSRolePoliciesOutputWithContext(ctx context.Context) EKSRolePoliciesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSRolePoliciesOutput)
}

func (i EKSRolePoliciesArgs) ToEKSRolePoliciesPtrOutput() EKSRolePoliciesPtrOutput {
	return i.ToEKSRolePoliciesPtrOutputWithContext(context.Background())
}

func (i EKSRolePoliciesArgs) ToEKSRolePoliciesPtrOutputWithContext(ctx context.Context) EKSRolePoliciesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSRolePoliciesOutput).ToEKSRolePoliciesPtrOutputWithContext(ctx)
}

// EKSRolePoliciesPtrInput is an input type that accepts EKSRolePoliciesArgs, EKSRolePoliciesPtr and EKSRolePoliciesPtrOutput values.
// You can construct a concrete instance of `EKSRolePoliciesPtrInput` via:
//
//	        EKSRolePoliciesArgs{...}
//
//	or:
//
//	        nil
type EKSRolePoliciesPtrInput interface {
	pulumi.Input

	ToEKSRolePoliciesPtrOutput() EKSRolePoliciesPtrOutput
	ToEKSRolePoliciesPtrOutputWithContext(context.Context) EKSRolePoliciesPtrOutput
}

type eksrolePoliciesPtrType EKSRolePoliciesArgs

func EKSRolePoliciesPtr(v *EKSRolePoliciesArgs) EKSRolePoliciesPtrInput {
	return (*eksrolePoliciesPtrType)(v)
}

func (*eksrolePoliciesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EKSRolePolicies)(nil)).Elem()
}

func (i *eksrolePoliciesPtrType) ToEKSRolePoliciesPtrOutput() EKSRolePoliciesPtrOutput {
	return i.ToEKSRolePoliciesPtrOutputWithContext(context.Background())
}

func (i *eksrolePoliciesPtrType) ToEKSRolePoliciesPtrOutputWithContext(ctx context.Context) EKSRolePoliciesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSRolePoliciesPtrOutput)
}

// The different policies to attach to the role.
type EKSRolePoliciesOutput struct{ *pulumi.OutputState }

func (EKSRolePoliciesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EKSRolePolicies)(nil)).Elem()
}

func (o EKSRolePoliciesOutput) ToEKSRolePoliciesOutput() EKSRolePoliciesOutput {
	return o
}

func (o EKSRolePoliciesOutput) ToEKSRolePoliciesOutputWithContext(ctx context.Context) EKSRolePoliciesOutput {
	return o
}

func (o EKSRolePoliciesOutput) ToEKSRolePoliciesPtrOutput() EKSRolePoliciesPtrOutput {
	return o.ToEKSRolePoliciesPtrOutputWithContext(context.Background())
}

func (o EKSRolePoliciesOutput) ToEKSRolePoliciesPtrOutputWithContext(ctx context.Context) EKSRolePoliciesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EKSRolePolicies) *EKSRolePolicies {
		return &v
	}).(EKSRolePoliciesPtrOutput)
}

// The Amazon Managed Service for Prometheus IAM policy.
func (o EKSRolePoliciesOutput) AmazonManagedServicePrometheus() EKSAmazonManagedServicePrometheusPolicyPtrOutput {
	return o.ApplyT(func(v EKSRolePolicies) *EKSAmazonManagedServicePrometheusPolicy {
		return v.AmazonManagedServicePrometheus
	}).(EKSAmazonManagedServicePrometheusPolicyPtrOutput)
}

// The Appmesh policies.
func (o EKSRolePoliciesOutput) Appmesh() EKSAppmeshPolicyPtrOutput {
	return o.ApplyT(func(v EKSRolePolicies) *EKSAppmeshPolicy { return v.Appmesh }).(EKSAppmeshPolicyPtrOutput)
}

// The Cert Manager IAM policy.
func (o EKSRolePoliciesOutput) CertManager() EKSCertManagerPolicyPtrOutput {
	return o.ApplyT(func(v EKSRolePolicies) *EKSCertManagerPolicy { return v.CertManager }).(EKSCertManagerPolicyPtrOutput)
}

// The Cluster Autoscaler IAM policy.
func (o EKSRolePoliciesOutput) ClusterAutoScaling() EKSClusterAutoscalerPolicyPtrOutput {
	return o.ApplyT(func(v EKSRolePolicies) *EKSClusterAutoscalerPolicy { return v.ClusterAutoScaling }).(EKSClusterAutoscalerPolicyPtrOutput)
}

// The EBS CSI IAM policy.
func (o EKSRolePoliciesOutput) EbsCsi() EKSEBSCSIPolicyPtrOutput {
	return o.ApplyT(func(v EKSRolePolicies) *EKSEBSCSIPolicy { return v.EbsCsi }).(EKSEBSCSIPolicyPtrOutput)
}

// The EFS CSI IAM policy.
func (o EKSRolePoliciesOutput) EfsCsi() EKSEFSCSIPolicyPtrOutput {
	return o.ApplyT(func(v EKSRolePolicies) *EKSEFSCSIPolicy { return v.EfsCsi }).(EKSEFSCSIPolicyPtrOutput)
}

// The External DNS IAM policy.
func (o EKSRolePoliciesOutput) ExternalDns() EKSExternalDNSPolicyPtrOutput {
	return o.ApplyT(func(v EKSRolePolicies) *EKSExternalDNSPolicy { return v.ExternalDns }).(EKSExternalDNSPolicyPtrOutput)
}

// The External Secrets policy.
func (o EKSRolePoliciesOutput) ExternalSecrets() EKSExternalSecretsPolicyPtrOutput {
	return o.ApplyT(func(v EKSRolePolicies) *EKSExternalSecretsPolicy { return v.ExternalSecrets }).(EKSExternalSecretsPolicyPtrOutput)
}

// The FSx for Lustre CSI Driver IAM policy.
func (o EKSRolePoliciesOutput) FsxLustreCsi() FSxLustreCSIPolicyPtrOutput {
	return o.ApplyT(func(v EKSRolePolicies) *FSxLustreCSIPolicy { return v.FsxLustreCsi }).(FSxLustreCSIPolicyPtrOutput)
}

// The Karpenter Controller policy.
func (o EKSRolePoliciesOutput) KarpenterController() EKSKarpenterControllerPolicyPtrOutput {
	return o.ApplyT(func(v EKSRolePolicies) *EKSKarpenterControllerPolicy { return v.KarpenterController }).(EKSKarpenterControllerPolicyPtrOutput)
}

// The Load Balancer policy.
func (o EKSRolePoliciesOutput) LoadBalancer() EKSLoadBalancerPolicyPtrOutput {
	return o.ApplyT(func(v EKSRolePolicies) *EKSLoadBalancerPolicy { return v.LoadBalancer }).(EKSLoadBalancerPolicyPtrOutput)
}

// The Node Termination Handler policy to the role.
func (o EKSRolePoliciesOutput) NodeTerminationHandler() EKSNodeTerminationHandlerPolicyPtrOutput {
	return o.ApplyT(func(v EKSRolePolicies) *EKSNodeTerminationHandlerPolicy { return v.NodeTerminationHandler }).(EKSNodeTerminationHandlerPolicyPtrOutput)
}

// The Velero IAM policy.
func (o EKSRolePoliciesOutput) Velero() EKSVeleroPolicyPtrOutput {
	return o.ApplyT(func(v EKSRolePolicies) *EKSVeleroPolicy { return v.Velero }).(EKSVeleroPolicyPtrOutput)
}

// The VPC CNI IAM policy to the role.
func (o EKSRolePoliciesOutput) VpnCni() EKSVPNCNIPolicyPtrOutput {
	return o.ApplyT(func(v EKSRolePolicies) *EKSVPNCNIPolicy { return v.VpnCni }).(EKSVPNCNIPolicyPtrOutput)
}

type EKSRolePoliciesPtrOutput struct{ *pulumi.OutputState }

func (EKSRolePoliciesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EKSRolePolicies)(nil)).Elem()
}

func (o EKSRolePoliciesPtrOutput) ToEKSRolePoliciesPtrOutput() EKSRolePoliciesPtrOutput {
	return o
}

func (o EKSRolePoliciesPtrOutput) ToEKSRolePoliciesPtrOutputWithContext(ctx context.Context) EKSRolePoliciesPtrOutput {
	return o
}

func (o EKSRolePoliciesPtrOutput) Elem() EKSRolePoliciesOutput {
	return o.ApplyT(func(v *EKSRolePolicies) EKSRolePolicies {
		if v != nil {
			return *v
		}
		var ret EKSRolePolicies
		return ret
	}).(EKSRolePoliciesOutput)
}

// The Amazon Managed Service for Prometheus IAM policy.
func (o EKSRolePoliciesPtrOutput) AmazonManagedServicePrometheus() EKSAmazonManagedServicePrometheusPolicyPtrOutput {
	return o.ApplyT(func(v *EKSRolePolicies) *EKSAmazonManagedServicePrometheusPolicy {
		if v == nil {
			return nil
		}
		return v.AmazonManagedServicePrometheus
	}).(EKSAmazonManagedServicePrometheusPolicyPtrOutput)
}

// The Appmesh policies.
func (o EKSRolePoliciesPtrOutput) Appmesh() EKSAppmeshPolicyPtrOutput {
	return o.ApplyT(func(v *EKSRolePolicies) *EKSAppmeshPolicy {
		if v == nil {
			return nil
		}
		return v.Appmesh
	}).(EKSAppmeshPolicyPtrOutput)
}

// The Cert Manager IAM policy.
func (o EKSRolePoliciesPtrOutput) CertManager() EKSCertManagerPolicyPtrOutput {
	return o.ApplyT(func(v *EKSRolePolicies) *EKSCertManagerPolicy {
		if v == nil {
			return nil
		}
		return v.CertManager
	}).(EKSCertManagerPolicyPtrOutput)
}

// The Cluster Autoscaler IAM policy.
func (o EKSRolePoliciesPtrOutput) ClusterAutoScaling() EKSClusterAutoscalerPolicyPtrOutput {
	return o.ApplyT(func(v *EKSRolePolicies) *EKSClusterAutoscalerPolicy {
		if v == nil {
			return nil
		}
		return v.ClusterAutoScaling
	}).(EKSClusterAutoscalerPolicyPtrOutput)
}

// The EBS CSI IAM policy.
func (o EKSRolePoliciesPtrOutput) EbsCsi() EKSEBSCSIPolicyPtrOutput {
	return o.ApplyT(func(v *EKSRolePolicies) *EKSEBSCSIPolicy {
		if v == nil {
			return nil
		}
		return v.EbsCsi
	}).(EKSEBSCSIPolicyPtrOutput)
}

// The EFS CSI IAM policy.
func (o EKSRolePoliciesPtrOutput) EfsCsi() EKSEFSCSIPolicyPtrOutput {
	return o.ApplyT(func(v *EKSRolePolicies) *EKSEFSCSIPolicy {
		if v == nil {
			return nil
		}
		return v.EfsCsi
	}).(EKSEFSCSIPolicyPtrOutput)
}

// The External DNS IAM policy.
func (o EKSRolePoliciesPtrOutput) ExternalDns() EKSExternalDNSPolicyPtrOutput {
	return o.ApplyT(func(v *EKSRolePolicies) *EKSExternalDNSPolicy {
		if v == nil {
			return nil
		}
		return v.ExternalDns
	}).(EKSExternalDNSPolicyPtrOutput)
}

// The External Secrets policy.
func (o EKSRolePoliciesPtrOutput) ExternalSecrets() EKSExternalSecretsPolicyPtrOutput {
	return o.ApplyT(func(v *EKSRolePolicies) *EKSExternalSecretsPolicy {
		if v == nil {
			return nil
		}
		return v.ExternalSecrets
	}).(EKSExternalSecretsPolicyPtrOutput)
}

// The FSx for Lustre CSI Driver IAM policy.
func (o EKSRolePoliciesPtrOutput) FsxLustreCsi() FSxLustreCSIPolicyPtrOutput {
	return o.ApplyT(func(v *EKSRolePolicies) *FSxLustreCSIPolicy {
		if v == nil {
			return nil
		}
		return v.FsxLustreCsi
	}).(FSxLustreCSIPolicyPtrOutput)
}

// The Karpenter Controller policy.
func (o EKSRolePoliciesPtrOutput) KarpenterController() EKSKarpenterControllerPolicyPtrOutput {
	return o.ApplyT(func(v *EKSRolePolicies) *EKSKarpenterControllerPolicy {
		if v == nil {
			return nil
		}
		return v.KarpenterController
	}).(EKSKarpenterControllerPolicyPtrOutput)
}

// The Load Balancer policy.
func (o EKSRolePoliciesPtrOutput) LoadBalancer() EKSLoadBalancerPolicyPtrOutput {
	return o.ApplyT(func(v *EKSRolePolicies) *EKSLoadBalancerPolicy {
		if v == nil {
			return nil
		}
		return v.LoadBalancer
	}).(EKSLoadBalancerPolicyPtrOutput)
}

// The Node Termination Handler policy to the role.
func (o EKSRolePoliciesPtrOutput) NodeTerminationHandler() EKSNodeTerminationHandlerPolicyPtrOutput {
	return o.ApplyT(func(v *EKSRolePolicies) *EKSNodeTerminationHandlerPolicy {
		if v == nil {
			return nil
		}
		return v.NodeTerminationHandler
	}).(EKSNodeTerminationHandlerPolicyPtrOutput)
}

// The Velero IAM policy.
func (o EKSRolePoliciesPtrOutput) Velero() EKSVeleroPolicyPtrOutput {
	return o.ApplyT(func(v *EKSRolePolicies) *EKSVeleroPolicy {
		if v == nil {
			return nil
		}
		return v.Velero
	}).(EKSVeleroPolicyPtrOutput)
}

// The VPC CNI IAM policy to the role.
func (o EKSRolePoliciesPtrOutput) VpnCni() EKSVPNCNIPolicyPtrOutput {
	return o.ApplyT(func(v *EKSRolePolicies) *EKSVPNCNIPolicy {
		if v == nil {
			return nil
		}
		return v.VpnCni
	}).(EKSVPNCNIPolicyPtrOutput)
}

// EKS cluster and k8s ServiceAccount pairs. Each EKS cluster can have multiple k8s ServiceAccount.
type EKSServiceAccount struct {
	// Name of the EKS cluster.
	Name *string `pulumi:"name"`
	// Service accounts to pair with the cluster.
	ServiceAccounts []string `pulumi:"serviceAccounts"`
}

// EKSServiceAccountInput is an input type that accepts EKSServiceAccountArgs and EKSServiceAccountOutput values.
// You can construct a concrete instance of `EKSServiceAccountInput` via:
//
//	EKSServiceAccountArgs{...}
type EKSServiceAccountInput interface {
	pulumi.Input

	ToEKSServiceAccountOutput() EKSServiceAccountOutput
	ToEKSServiceAccountOutputWithContext(context.Context) EKSServiceAccountOutput
}

// EKS cluster and k8s ServiceAccount pairs. Each EKS cluster can have multiple k8s ServiceAccount.
type EKSServiceAccountArgs struct {
	// Name of the EKS cluster.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Service accounts to pair with the cluster.
	ServiceAccounts pulumi.StringArrayInput `pulumi:"serviceAccounts"`
}

func (EKSServiceAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EKSServiceAccount)(nil)).Elem()
}

func (i EKSServiceAccountArgs) ToEKSServiceAccountOutput() EKSServiceAccountOutput {
	return i.ToEKSServiceAccountOutputWithContext(context.Background())
}

func (i EKSServiceAccountArgs) ToEKSServiceAccountOutputWithContext(ctx context.Context) EKSServiceAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSServiceAccountOutput)
}

// EKSServiceAccountArrayInput is an input type that accepts EKSServiceAccountArray and EKSServiceAccountArrayOutput values.
// You can construct a concrete instance of `EKSServiceAccountArrayInput` via:
//
//	EKSServiceAccountArray{ EKSServiceAccountArgs{...} }
type EKSServiceAccountArrayInput interface {
	pulumi.Input

	ToEKSServiceAccountArrayOutput() EKSServiceAccountArrayOutput
	ToEKSServiceAccountArrayOutputWithContext(context.Context) EKSServiceAccountArrayOutput
}

type EKSServiceAccountArray []EKSServiceAccountInput

func (EKSServiceAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EKSServiceAccount)(nil)).Elem()
}

func (i EKSServiceAccountArray) ToEKSServiceAccountArrayOutput() EKSServiceAccountArrayOutput {
	return i.ToEKSServiceAccountArrayOutputWithContext(context.Background())
}

func (i EKSServiceAccountArray) ToEKSServiceAccountArrayOutputWithContext(ctx context.Context) EKSServiceAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSServiceAccountArrayOutput)
}

// EKS cluster and k8s ServiceAccount pairs. Each EKS cluster can have multiple k8s ServiceAccount.
type EKSServiceAccountOutput struct{ *pulumi.OutputState }

func (EKSServiceAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EKSServiceAccount)(nil)).Elem()
}

func (o EKSServiceAccountOutput) ToEKSServiceAccountOutput() EKSServiceAccountOutput {
	return o
}

func (o EKSServiceAccountOutput) ToEKSServiceAccountOutputWithContext(ctx context.Context) EKSServiceAccountOutput {
	return o
}

// Name of the EKS cluster.
func (o EKSServiceAccountOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EKSServiceAccount) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Service accounts to pair with the cluster.
func (o EKSServiceAccountOutput) ServiceAccounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EKSServiceAccount) []string { return v.ServiceAccounts }).(pulumi.StringArrayOutput)
}

type EKSServiceAccountArrayOutput struct{ *pulumi.OutputState }

func (EKSServiceAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EKSServiceAccount)(nil)).Elem()
}

func (o EKSServiceAccountArrayOutput) ToEKSServiceAccountArrayOutput() EKSServiceAccountArrayOutput {
	return o
}

func (o EKSServiceAccountArrayOutput) ToEKSServiceAccountArrayOutputWithContext(ctx context.Context) EKSServiceAccountArrayOutput {
	return o
}

func (o EKSServiceAccountArrayOutput) Index(i pulumi.IntInput) EKSServiceAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EKSServiceAccount {
		return vs[0].([]EKSServiceAccount)[vs[1].(int)]
	}).(EKSServiceAccountOutput)
}

type EKSServiceAccountRole struct {
	// IAM Role description.
	Description *string `pulumi:"description"`
	// IAM role name.
	Name *string `pulumi:"name"`
	// IAM role name prefix.
	NamePrefix *string `pulumi:"namePrefix"`
	// Path of admin IAM role.
	Path *string `pulumi:"path"`
	// Permissions boundary ARN to use for the role.
	PermissionsBoundaryArn *string `pulumi:"permissionsBoundaryArn"`
	// List of policy ARNs to use for the role.
	PolicyArns []string `pulumi:"policyArns"`
}

// EKSServiceAccountRoleInput is an input type that accepts EKSServiceAccountRoleArgs and EKSServiceAccountRoleOutput values.
// You can construct a concrete instance of `EKSServiceAccountRoleInput` via:
//
//	EKSServiceAccountRoleArgs{...}
type EKSServiceAccountRoleInput interface {
	pulumi.Input

	ToEKSServiceAccountRoleOutput() EKSServiceAccountRoleOutput
	ToEKSServiceAccountRoleOutputWithContext(context.Context) EKSServiceAccountRoleOutput
}

type EKSServiceAccountRoleArgs struct {
	// IAM Role description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// IAM role name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// IAM role name prefix.
	NamePrefix pulumi.StringPtrInput `pulumi:"namePrefix"`
	// Path of admin IAM role.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Permissions boundary ARN to use for the role.
	PermissionsBoundaryArn pulumi.StringPtrInput `pulumi:"permissionsBoundaryArn"`
	// List of policy ARNs to use for the role.
	PolicyArns pulumi.StringArrayInput `pulumi:"policyArns"`
}

func (EKSServiceAccountRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EKSServiceAccountRole)(nil)).Elem()
}

func (i EKSServiceAccountRoleArgs) ToEKSServiceAccountRoleOutput() EKSServiceAccountRoleOutput {
	return i.ToEKSServiceAccountRoleOutputWithContext(context.Background())
}

func (i EKSServiceAccountRoleArgs) ToEKSServiceAccountRoleOutputWithContext(ctx context.Context) EKSServiceAccountRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSServiceAccountRoleOutput)
}

func (i EKSServiceAccountRoleArgs) ToEKSServiceAccountRolePtrOutput() EKSServiceAccountRolePtrOutput {
	return i.ToEKSServiceAccountRolePtrOutputWithContext(context.Background())
}

func (i EKSServiceAccountRoleArgs) ToEKSServiceAccountRolePtrOutputWithContext(ctx context.Context) EKSServiceAccountRolePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSServiceAccountRoleOutput).ToEKSServiceAccountRolePtrOutputWithContext(ctx)
}

// EKSServiceAccountRolePtrInput is an input type that accepts EKSServiceAccountRoleArgs, EKSServiceAccountRolePtr and EKSServiceAccountRolePtrOutput values.
// You can construct a concrete instance of `EKSServiceAccountRolePtrInput` via:
//
//	        EKSServiceAccountRoleArgs{...}
//
//	or:
//
//	        nil
type EKSServiceAccountRolePtrInput interface {
	pulumi.Input

	ToEKSServiceAccountRolePtrOutput() EKSServiceAccountRolePtrOutput
	ToEKSServiceAccountRolePtrOutputWithContext(context.Context) EKSServiceAccountRolePtrOutput
}

type eksserviceAccountRolePtrType EKSServiceAccountRoleArgs

func EKSServiceAccountRolePtr(v *EKSServiceAccountRoleArgs) EKSServiceAccountRolePtrInput {
	return (*eksserviceAccountRolePtrType)(v)
}

func (*eksserviceAccountRolePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EKSServiceAccountRole)(nil)).Elem()
}

func (i *eksserviceAccountRolePtrType) ToEKSServiceAccountRolePtrOutput() EKSServiceAccountRolePtrOutput {
	return i.ToEKSServiceAccountRolePtrOutputWithContext(context.Background())
}

func (i *eksserviceAccountRolePtrType) ToEKSServiceAccountRolePtrOutputWithContext(ctx context.Context) EKSServiceAccountRolePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSServiceAccountRolePtrOutput)
}

type EKSServiceAccountRoleOutput struct{ *pulumi.OutputState }

func (EKSServiceAccountRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EKSServiceAccountRole)(nil)).Elem()
}

func (o EKSServiceAccountRoleOutput) ToEKSServiceAccountRoleOutput() EKSServiceAccountRoleOutput {
	return o
}

func (o EKSServiceAccountRoleOutput) ToEKSServiceAccountRoleOutputWithContext(ctx context.Context) EKSServiceAccountRoleOutput {
	return o
}

func (o EKSServiceAccountRoleOutput) ToEKSServiceAccountRolePtrOutput() EKSServiceAccountRolePtrOutput {
	return o.ToEKSServiceAccountRolePtrOutputWithContext(context.Background())
}

func (o EKSServiceAccountRoleOutput) ToEKSServiceAccountRolePtrOutputWithContext(ctx context.Context) EKSServiceAccountRolePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EKSServiceAccountRole) *EKSServiceAccountRole {
		return &v
	}).(EKSServiceAccountRolePtrOutput)
}

// IAM Role description.
func (o EKSServiceAccountRoleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EKSServiceAccountRole) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// IAM role name.
func (o EKSServiceAccountRoleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EKSServiceAccountRole) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// IAM role name prefix.
func (o EKSServiceAccountRoleOutput) NamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EKSServiceAccountRole) *string { return v.NamePrefix }).(pulumi.StringPtrOutput)
}

// Path of admin IAM role.
func (o EKSServiceAccountRoleOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EKSServiceAccountRole) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Permissions boundary ARN to use for the role.
func (o EKSServiceAccountRoleOutput) PermissionsBoundaryArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EKSServiceAccountRole) *string { return v.PermissionsBoundaryArn }).(pulumi.StringPtrOutput)
}

// List of policy ARNs to use for the role.
func (o EKSServiceAccountRoleOutput) PolicyArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EKSServiceAccountRole) []string { return v.PolicyArns }).(pulumi.StringArrayOutput)
}

type EKSServiceAccountRolePtrOutput struct{ *pulumi.OutputState }

func (EKSServiceAccountRolePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EKSServiceAccountRole)(nil)).Elem()
}

func (o EKSServiceAccountRolePtrOutput) ToEKSServiceAccountRolePtrOutput() EKSServiceAccountRolePtrOutput {
	return o
}

func (o EKSServiceAccountRolePtrOutput) ToEKSServiceAccountRolePtrOutputWithContext(ctx context.Context) EKSServiceAccountRolePtrOutput {
	return o
}

func (o EKSServiceAccountRolePtrOutput) Elem() EKSServiceAccountRoleOutput {
	return o.ApplyT(func(v *EKSServiceAccountRole) EKSServiceAccountRole {
		if v != nil {
			return *v
		}
		var ret EKSServiceAccountRole
		return ret
	}).(EKSServiceAccountRoleOutput)
}

// IAM Role description.
func (o EKSServiceAccountRolePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EKSServiceAccountRole) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// IAM role name.
func (o EKSServiceAccountRolePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EKSServiceAccountRole) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// IAM role name prefix.
func (o EKSServiceAccountRolePtrOutput) NamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EKSServiceAccountRole) *string {
		if v == nil {
			return nil
		}
		return v.NamePrefix
	}).(pulumi.StringPtrOutput)
}

// Path of admin IAM role.
func (o EKSServiceAccountRolePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EKSServiceAccountRole) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Permissions boundary ARN to use for the role.
func (o EKSServiceAccountRolePtrOutput) PermissionsBoundaryArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EKSServiceAccountRole) *string {
		if v == nil {
			return nil
		}
		return v.PermissionsBoundaryArn
	}).(pulumi.StringPtrOutput)
}

// List of policy ARNs to use for the role.
func (o EKSServiceAccountRolePtrOutput) PolicyArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EKSServiceAccountRole) []string {
		if v == nil {
			return nil
		}
		return v.PolicyArns
	}).(pulumi.StringArrayOutput)
}

// The VPC CNI IAM policy to the role.
type EKSVPNCNIPolicy struct {
	// Determines whether to attach the VPC CNI IAM policy to the role.
	Attach bool `pulumi:"attach"`
	// Determines whether to enable IPv4 permissions for VPC CNI policy.
	EnableIpv4 *bool `pulumi:"enableIpv4"`
	// Determines whether to enable IPv6 permissions for VPC CNI policy.
	EnableIpv6 *bool `pulumi:"enableIpv6"`
}

// EKSVPNCNIPolicyInput is an input type that accepts EKSVPNCNIPolicyArgs and EKSVPNCNIPolicyOutput values.
// You can construct a concrete instance of `EKSVPNCNIPolicyInput` via:
//
//	EKSVPNCNIPolicyArgs{...}
type EKSVPNCNIPolicyInput interface {
	pulumi.Input

	ToEKSVPNCNIPolicyOutput() EKSVPNCNIPolicyOutput
	ToEKSVPNCNIPolicyOutputWithContext(context.Context) EKSVPNCNIPolicyOutput
}

// The VPC CNI IAM policy to the role.
type EKSVPNCNIPolicyArgs struct {
	// Determines whether to attach the VPC CNI IAM policy to the role.
	Attach pulumi.BoolInput `pulumi:"attach"`
	// Determines whether to enable IPv4 permissions for VPC CNI policy.
	EnableIpv4 pulumi.BoolPtrInput `pulumi:"enableIpv4"`
	// Determines whether to enable IPv6 permissions for VPC CNI policy.
	EnableIpv6 pulumi.BoolPtrInput `pulumi:"enableIpv6"`
}

func (EKSVPNCNIPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EKSVPNCNIPolicy)(nil)).Elem()
}

func (i EKSVPNCNIPolicyArgs) ToEKSVPNCNIPolicyOutput() EKSVPNCNIPolicyOutput {
	return i.ToEKSVPNCNIPolicyOutputWithContext(context.Background())
}

func (i EKSVPNCNIPolicyArgs) ToEKSVPNCNIPolicyOutputWithContext(ctx context.Context) EKSVPNCNIPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSVPNCNIPolicyOutput)
}

func (i EKSVPNCNIPolicyArgs) ToEKSVPNCNIPolicyPtrOutput() EKSVPNCNIPolicyPtrOutput {
	return i.ToEKSVPNCNIPolicyPtrOutputWithContext(context.Background())
}

func (i EKSVPNCNIPolicyArgs) ToEKSVPNCNIPolicyPtrOutputWithContext(ctx context.Context) EKSVPNCNIPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSVPNCNIPolicyOutput).ToEKSVPNCNIPolicyPtrOutputWithContext(ctx)
}

// EKSVPNCNIPolicyPtrInput is an input type that accepts EKSVPNCNIPolicyArgs, EKSVPNCNIPolicyPtr and EKSVPNCNIPolicyPtrOutput values.
// You can construct a concrete instance of `EKSVPNCNIPolicyPtrInput` via:
//
//	        EKSVPNCNIPolicyArgs{...}
//
//	or:
//
//	        nil
type EKSVPNCNIPolicyPtrInput interface {
	pulumi.Input

	ToEKSVPNCNIPolicyPtrOutput() EKSVPNCNIPolicyPtrOutput
	ToEKSVPNCNIPolicyPtrOutputWithContext(context.Context) EKSVPNCNIPolicyPtrOutput
}

type eksvpncnipolicyPtrType EKSVPNCNIPolicyArgs

func EKSVPNCNIPolicyPtr(v *EKSVPNCNIPolicyArgs) EKSVPNCNIPolicyPtrInput {
	return (*eksvpncnipolicyPtrType)(v)
}

func (*eksvpncnipolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EKSVPNCNIPolicy)(nil)).Elem()
}

func (i *eksvpncnipolicyPtrType) ToEKSVPNCNIPolicyPtrOutput() EKSVPNCNIPolicyPtrOutput {
	return i.ToEKSVPNCNIPolicyPtrOutputWithContext(context.Background())
}

func (i *eksvpncnipolicyPtrType) ToEKSVPNCNIPolicyPtrOutputWithContext(ctx context.Context) EKSVPNCNIPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSVPNCNIPolicyPtrOutput)
}

// The VPC CNI IAM policy to the role.
type EKSVPNCNIPolicyOutput struct{ *pulumi.OutputState }

func (EKSVPNCNIPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EKSVPNCNIPolicy)(nil)).Elem()
}

func (o EKSVPNCNIPolicyOutput) ToEKSVPNCNIPolicyOutput() EKSVPNCNIPolicyOutput {
	return o
}

func (o EKSVPNCNIPolicyOutput) ToEKSVPNCNIPolicyOutputWithContext(ctx context.Context) EKSVPNCNIPolicyOutput {
	return o
}

func (o EKSVPNCNIPolicyOutput) ToEKSVPNCNIPolicyPtrOutput() EKSVPNCNIPolicyPtrOutput {
	return o.ToEKSVPNCNIPolicyPtrOutputWithContext(context.Background())
}

func (o EKSVPNCNIPolicyOutput) ToEKSVPNCNIPolicyPtrOutputWithContext(ctx context.Context) EKSVPNCNIPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EKSVPNCNIPolicy) *EKSVPNCNIPolicy {
		return &v
	}).(EKSVPNCNIPolicyPtrOutput)
}

// Determines whether to attach the VPC CNI IAM policy to the role.
func (o EKSVPNCNIPolicyOutput) Attach() pulumi.BoolOutput {
	return o.ApplyT(func(v EKSVPNCNIPolicy) bool { return v.Attach }).(pulumi.BoolOutput)
}

// Determines whether to enable IPv4 permissions for VPC CNI policy.
func (o EKSVPNCNIPolicyOutput) EnableIpv4() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EKSVPNCNIPolicy) *bool { return v.EnableIpv4 }).(pulumi.BoolPtrOutput)
}

// Determines whether to enable IPv6 permissions for VPC CNI policy.
func (o EKSVPNCNIPolicyOutput) EnableIpv6() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EKSVPNCNIPolicy) *bool { return v.EnableIpv6 }).(pulumi.BoolPtrOutput)
}

type EKSVPNCNIPolicyPtrOutput struct{ *pulumi.OutputState }

func (EKSVPNCNIPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EKSVPNCNIPolicy)(nil)).Elem()
}

func (o EKSVPNCNIPolicyPtrOutput) ToEKSVPNCNIPolicyPtrOutput() EKSVPNCNIPolicyPtrOutput {
	return o
}

func (o EKSVPNCNIPolicyPtrOutput) ToEKSVPNCNIPolicyPtrOutputWithContext(ctx context.Context) EKSVPNCNIPolicyPtrOutput {
	return o
}

func (o EKSVPNCNIPolicyPtrOutput) Elem() EKSVPNCNIPolicyOutput {
	return o.ApplyT(func(v *EKSVPNCNIPolicy) EKSVPNCNIPolicy {
		if v != nil {
			return *v
		}
		var ret EKSVPNCNIPolicy
		return ret
	}).(EKSVPNCNIPolicyOutput)
}

// Determines whether to attach the VPC CNI IAM policy to the role.
func (o EKSVPNCNIPolicyPtrOutput) Attach() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EKSVPNCNIPolicy) *bool {
		if v == nil {
			return nil
		}
		return &v.Attach
	}).(pulumi.BoolPtrOutput)
}

// Determines whether to enable IPv4 permissions for VPC CNI policy.
func (o EKSVPNCNIPolicyPtrOutput) EnableIpv4() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EKSVPNCNIPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.EnableIpv4
	}).(pulumi.BoolPtrOutput)
}

// Determines whether to enable IPv6 permissions for VPC CNI policy.
func (o EKSVPNCNIPolicyPtrOutput) EnableIpv6() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EKSVPNCNIPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.EnableIpv6
	}).(pulumi.BoolPtrOutput)
}

// The Velero IAM policy to the role.
type EKSVeleroPolicy struct {
	// Determines whether to attach the Velero IAM policy to the role.
	Attach bool `pulumi:"attach"`
	// List of S3 Bucket ARNs that Velero needs access to in order to backup and restore cluster resources.
	// If not provided, a default ARN of "*" will be provided.
	S3BucketArns []string `pulumi:"s3BucketArns"`
}

// EKSVeleroPolicyInput is an input type that accepts EKSVeleroPolicyArgs and EKSVeleroPolicyOutput values.
// You can construct a concrete instance of `EKSVeleroPolicyInput` via:
//
//	EKSVeleroPolicyArgs{...}
type EKSVeleroPolicyInput interface {
	pulumi.Input

	ToEKSVeleroPolicyOutput() EKSVeleroPolicyOutput
	ToEKSVeleroPolicyOutputWithContext(context.Context) EKSVeleroPolicyOutput
}

// The Velero IAM policy to the role.
type EKSVeleroPolicyArgs struct {
	// Determines whether to attach the Velero IAM policy to the role.
	Attach pulumi.BoolInput `pulumi:"attach"`
	// List of S3 Bucket ARNs that Velero needs access to in order to backup and restore cluster resources.
	// If not provided, a default ARN of "*" will be provided.
	S3BucketArns pulumi.StringArrayInput `pulumi:"s3BucketArns"`
}

func (EKSVeleroPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EKSVeleroPolicy)(nil)).Elem()
}

func (i EKSVeleroPolicyArgs) ToEKSVeleroPolicyOutput() EKSVeleroPolicyOutput {
	return i.ToEKSVeleroPolicyOutputWithContext(context.Background())
}

func (i EKSVeleroPolicyArgs) ToEKSVeleroPolicyOutputWithContext(ctx context.Context) EKSVeleroPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSVeleroPolicyOutput)
}

func (i EKSVeleroPolicyArgs) ToEKSVeleroPolicyPtrOutput() EKSVeleroPolicyPtrOutput {
	return i.ToEKSVeleroPolicyPtrOutputWithContext(context.Background())
}

func (i EKSVeleroPolicyArgs) ToEKSVeleroPolicyPtrOutputWithContext(ctx context.Context) EKSVeleroPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSVeleroPolicyOutput).ToEKSVeleroPolicyPtrOutputWithContext(ctx)
}

// EKSVeleroPolicyPtrInput is an input type that accepts EKSVeleroPolicyArgs, EKSVeleroPolicyPtr and EKSVeleroPolicyPtrOutput values.
// You can construct a concrete instance of `EKSVeleroPolicyPtrInput` via:
//
//	        EKSVeleroPolicyArgs{...}
//
//	or:
//
//	        nil
type EKSVeleroPolicyPtrInput interface {
	pulumi.Input

	ToEKSVeleroPolicyPtrOutput() EKSVeleroPolicyPtrOutput
	ToEKSVeleroPolicyPtrOutputWithContext(context.Context) EKSVeleroPolicyPtrOutput
}

type eksveleroPolicyPtrType EKSVeleroPolicyArgs

func EKSVeleroPolicyPtr(v *EKSVeleroPolicyArgs) EKSVeleroPolicyPtrInput {
	return (*eksveleroPolicyPtrType)(v)
}

func (*eksveleroPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EKSVeleroPolicy)(nil)).Elem()
}

func (i *eksveleroPolicyPtrType) ToEKSVeleroPolicyPtrOutput() EKSVeleroPolicyPtrOutput {
	return i.ToEKSVeleroPolicyPtrOutputWithContext(context.Background())
}

func (i *eksveleroPolicyPtrType) ToEKSVeleroPolicyPtrOutputWithContext(ctx context.Context) EKSVeleroPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EKSVeleroPolicyPtrOutput)
}

// The Velero IAM policy to the role.
type EKSVeleroPolicyOutput struct{ *pulumi.OutputState }

func (EKSVeleroPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EKSVeleroPolicy)(nil)).Elem()
}

func (o EKSVeleroPolicyOutput) ToEKSVeleroPolicyOutput() EKSVeleroPolicyOutput {
	return o
}

func (o EKSVeleroPolicyOutput) ToEKSVeleroPolicyOutputWithContext(ctx context.Context) EKSVeleroPolicyOutput {
	return o
}

func (o EKSVeleroPolicyOutput) ToEKSVeleroPolicyPtrOutput() EKSVeleroPolicyPtrOutput {
	return o.ToEKSVeleroPolicyPtrOutputWithContext(context.Background())
}

func (o EKSVeleroPolicyOutput) ToEKSVeleroPolicyPtrOutputWithContext(ctx context.Context) EKSVeleroPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EKSVeleroPolicy) *EKSVeleroPolicy {
		return &v
	}).(EKSVeleroPolicyPtrOutput)
}

// Determines whether to attach the Velero IAM policy to the role.
func (o EKSVeleroPolicyOutput) Attach() pulumi.BoolOutput {
	return o.ApplyT(func(v EKSVeleroPolicy) bool { return v.Attach }).(pulumi.BoolOutput)
}

// List of S3 Bucket ARNs that Velero needs access to in order to backup and restore cluster resources.
// If not provided, a default ARN of "*" will be provided.
func (o EKSVeleroPolicyOutput) S3BucketArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EKSVeleroPolicy) []string { return v.S3BucketArns }).(pulumi.StringArrayOutput)
}

type EKSVeleroPolicyPtrOutput struct{ *pulumi.OutputState }

func (EKSVeleroPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EKSVeleroPolicy)(nil)).Elem()
}

func (o EKSVeleroPolicyPtrOutput) ToEKSVeleroPolicyPtrOutput() EKSVeleroPolicyPtrOutput {
	return o
}

func (o EKSVeleroPolicyPtrOutput) ToEKSVeleroPolicyPtrOutputWithContext(ctx context.Context) EKSVeleroPolicyPtrOutput {
	return o
}

func (o EKSVeleroPolicyPtrOutput) Elem() EKSVeleroPolicyOutput {
	return o.ApplyT(func(v *EKSVeleroPolicy) EKSVeleroPolicy {
		if v != nil {
			return *v
		}
		var ret EKSVeleroPolicy
		return ret
	}).(EKSVeleroPolicyOutput)
}

// Determines whether to attach the Velero IAM policy to the role.
func (o EKSVeleroPolicyPtrOutput) Attach() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EKSVeleroPolicy) *bool {
		if v == nil {
			return nil
		}
		return &v.Attach
	}).(pulumi.BoolPtrOutput)
}

// List of S3 Bucket ARNs that Velero needs access to in order to backup and restore cluster resources.
// If not provided, a default ARN of "*" will be provided.
func (o EKSVeleroPolicyPtrOutput) S3BucketArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EKSVeleroPolicy) []string {
		if v == nil {
			return nil
		}
		return v.S3BucketArns
	}).(pulumi.StringArrayOutput)
}

// The FSx for Lustre CSI Driver IAM policy to the role.
type FSxLustreCSIPolicy struct {
	// Determines whether to attach the FSx for Lustre CSI Driver IAM policy to the role.
	Attach bool `pulumi:"attach"`
	// Service role ARNs to allow FSx for Lustre CSI create and manage FSX for Lustre service linked roles. If not provided,
	// the default ARN "arn:aws:iam::*:role/aws-service-role/s3.data-source.lustre.fsx.amazonaws.com/*" will be applied.
	ServiceRoleArns []string `pulumi:"serviceRoleArns"`
}

// FSxLustreCSIPolicyInput is an input type that accepts FSxLustreCSIPolicyArgs and FSxLustreCSIPolicyOutput values.
// You can construct a concrete instance of `FSxLustreCSIPolicyInput` via:
//
//	FSxLustreCSIPolicyArgs{...}
type FSxLustreCSIPolicyInput interface {
	pulumi.Input

	ToFSxLustreCSIPolicyOutput() FSxLustreCSIPolicyOutput
	ToFSxLustreCSIPolicyOutputWithContext(context.Context) FSxLustreCSIPolicyOutput
}

// The FSx for Lustre CSI Driver IAM policy to the role.
type FSxLustreCSIPolicyArgs struct {
	// Determines whether to attach the FSx for Lustre CSI Driver IAM policy to the role.
	Attach pulumi.BoolInput `pulumi:"attach"`
	// Service role ARNs to allow FSx for Lustre CSI create and manage FSX for Lustre service linked roles. If not provided,
	// the default ARN "arn:aws:iam::*:role/aws-service-role/s3.data-source.lustre.fsx.amazonaws.com/*" will be applied.
	ServiceRoleArns pulumi.StringArrayInput `pulumi:"serviceRoleArns"`
}

func (FSxLustreCSIPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FSxLustreCSIPolicy)(nil)).Elem()
}

func (i FSxLustreCSIPolicyArgs) ToFSxLustreCSIPolicyOutput() FSxLustreCSIPolicyOutput {
	return i.ToFSxLustreCSIPolicyOutputWithContext(context.Background())
}

func (i FSxLustreCSIPolicyArgs) ToFSxLustreCSIPolicyOutputWithContext(ctx context.Context) FSxLustreCSIPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FSxLustreCSIPolicyOutput)
}

func (i FSxLustreCSIPolicyArgs) ToFSxLustreCSIPolicyPtrOutput() FSxLustreCSIPolicyPtrOutput {
	return i.ToFSxLustreCSIPolicyPtrOutputWithContext(context.Background())
}

func (i FSxLustreCSIPolicyArgs) ToFSxLustreCSIPolicyPtrOutputWithContext(ctx context.Context) FSxLustreCSIPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FSxLustreCSIPolicyOutput).ToFSxLustreCSIPolicyPtrOutputWithContext(ctx)
}

// FSxLustreCSIPolicyPtrInput is an input type that accepts FSxLustreCSIPolicyArgs, FSxLustreCSIPolicyPtr and FSxLustreCSIPolicyPtrOutput values.
// You can construct a concrete instance of `FSxLustreCSIPolicyPtrInput` via:
//
//	        FSxLustreCSIPolicyArgs{...}
//
//	or:
//
//	        nil
type FSxLustreCSIPolicyPtrInput interface {
	pulumi.Input

	ToFSxLustreCSIPolicyPtrOutput() FSxLustreCSIPolicyPtrOutput
	ToFSxLustreCSIPolicyPtrOutputWithContext(context.Context) FSxLustreCSIPolicyPtrOutput
}

type fsxLustreCSIPolicyPtrType FSxLustreCSIPolicyArgs

func FSxLustreCSIPolicyPtr(v *FSxLustreCSIPolicyArgs) FSxLustreCSIPolicyPtrInput {
	return (*fsxLustreCSIPolicyPtrType)(v)
}

func (*fsxLustreCSIPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FSxLustreCSIPolicy)(nil)).Elem()
}

func (i *fsxLustreCSIPolicyPtrType) ToFSxLustreCSIPolicyPtrOutput() FSxLustreCSIPolicyPtrOutput {
	return i.ToFSxLustreCSIPolicyPtrOutputWithContext(context.Background())
}

func (i *fsxLustreCSIPolicyPtrType) ToFSxLustreCSIPolicyPtrOutputWithContext(ctx context.Context) FSxLustreCSIPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FSxLustreCSIPolicyPtrOutput)
}

// The FSx for Lustre CSI Driver IAM policy to the role.
type FSxLustreCSIPolicyOutput struct{ *pulumi.OutputState }

func (FSxLustreCSIPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FSxLustreCSIPolicy)(nil)).Elem()
}

func (o FSxLustreCSIPolicyOutput) ToFSxLustreCSIPolicyOutput() FSxLustreCSIPolicyOutput {
	return o
}

func (o FSxLustreCSIPolicyOutput) ToFSxLustreCSIPolicyOutputWithContext(ctx context.Context) FSxLustreCSIPolicyOutput {
	return o
}

func (o FSxLustreCSIPolicyOutput) ToFSxLustreCSIPolicyPtrOutput() FSxLustreCSIPolicyPtrOutput {
	return o.ToFSxLustreCSIPolicyPtrOutputWithContext(context.Background())
}

func (o FSxLustreCSIPolicyOutput) ToFSxLustreCSIPolicyPtrOutputWithContext(ctx context.Context) FSxLustreCSIPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FSxLustreCSIPolicy) *FSxLustreCSIPolicy {
		return &v
	}).(FSxLustreCSIPolicyPtrOutput)
}

// Determines whether to attach the FSx for Lustre CSI Driver IAM policy to the role.
func (o FSxLustreCSIPolicyOutput) Attach() pulumi.BoolOutput {
	return o.ApplyT(func(v FSxLustreCSIPolicy) bool { return v.Attach }).(pulumi.BoolOutput)
}

// Service role ARNs to allow FSx for Lustre CSI create and manage FSX for Lustre service linked roles. If not provided,
// the default ARN "arn:aws:iam::*:role/aws-service-role/s3.data-source.lustre.fsx.amazonaws.com/*" will be applied.
func (o FSxLustreCSIPolicyOutput) ServiceRoleArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FSxLustreCSIPolicy) []string { return v.ServiceRoleArns }).(pulumi.StringArrayOutput)
}

type FSxLustreCSIPolicyPtrOutput struct{ *pulumi.OutputState }

func (FSxLustreCSIPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FSxLustreCSIPolicy)(nil)).Elem()
}

func (o FSxLustreCSIPolicyPtrOutput) ToFSxLustreCSIPolicyPtrOutput() FSxLustreCSIPolicyPtrOutput {
	return o
}

func (o FSxLustreCSIPolicyPtrOutput) ToFSxLustreCSIPolicyPtrOutputWithContext(ctx context.Context) FSxLustreCSIPolicyPtrOutput {
	return o
}

func (o FSxLustreCSIPolicyPtrOutput) Elem() FSxLustreCSIPolicyOutput {
	return o.ApplyT(func(v *FSxLustreCSIPolicy) FSxLustreCSIPolicy {
		if v != nil {
			return *v
		}
		var ret FSxLustreCSIPolicy
		return ret
	}).(FSxLustreCSIPolicyOutput)
}

// Determines whether to attach the FSx for Lustre CSI Driver IAM policy to the role.
func (o FSxLustreCSIPolicyPtrOutput) Attach() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FSxLustreCSIPolicy) *bool {
		if v == nil {
			return nil
		}
		return &v.Attach
	}).(pulumi.BoolPtrOutput)
}

// Service role ARNs to allow FSx for Lustre CSI create and manage FSX for Lustre service linked roles. If not provided,
// the default ARN "arn:aws:iam::*:role/aws-service-role/s3.data-source.lustre.fsx.amazonaws.com/*" will be applied.
func (o FSxLustreCSIPolicyPtrOutput) ServiceRoleArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FSxLustreCSIPolicy) []string {
		if v == nil {
			return nil
		}
		return v.ServiceRoleArns
	}).(pulumi.StringArrayOutput)
}

type KeybaseOutput struct {
	// Decrypt user password command.
	PasswordDecryptCommand *string `pulumi:"passwordDecryptCommand"`
	// Encrypted password
	PasswordPgpMessage *string `pulumi:"passwordPgpMessage"`
	// Decrypt access secret key command.
	SecretKeyDecryptCommand *string `pulumi:"secretKeyDecryptCommand"`
	// Encrypted access secret key.
	SecretKeyPgpMessage *string `pulumi:"secretKeyPgpMessage"`
}

type KeybaseOutputOutput struct{ *pulumi.OutputState }

func (KeybaseOutputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeybaseOutput)(nil)).Elem()
}

func (o KeybaseOutputOutput) ToKeybaseOutputOutput() KeybaseOutputOutput {
	return o
}

func (o KeybaseOutputOutput) ToKeybaseOutputOutputWithContext(ctx context.Context) KeybaseOutputOutput {
	return o
}

// Decrypt user password command.
func (o KeybaseOutputOutput) PasswordDecryptCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeybaseOutput) *string { return v.PasswordDecryptCommand }).(pulumi.StringPtrOutput)
}

// Encrypted password
func (o KeybaseOutputOutput) PasswordPgpMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeybaseOutput) *string { return v.PasswordPgpMessage }).(pulumi.StringPtrOutput)
}

// Decrypt access secret key command.
func (o KeybaseOutputOutput) SecretKeyDecryptCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeybaseOutput) *string { return v.SecretKeyDecryptCommand }).(pulumi.StringPtrOutput)
}

// Encrypted access secret key.
func (o KeybaseOutputOutput) SecretKeyPgpMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeybaseOutput) *string { return v.SecretKeyPgpMessage }).(pulumi.StringPtrOutput)
}

type OIDCProvider struct {
	NamespaceServiceAccounts []string `pulumi:"namespaceServiceAccounts"`
	ProviderArn              *string  `pulumi:"providerArn"`
}

// OIDCProviderInput is an input type that accepts OIDCProviderArgs and OIDCProviderOutput values.
// You can construct a concrete instance of `OIDCProviderInput` via:
//
//	OIDCProviderArgs{...}
type OIDCProviderInput interface {
	pulumi.Input

	ToOIDCProviderOutput() OIDCProviderOutput
	ToOIDCProviderOutputWithContext(context.Context) OIDCProviderOutput
}

type OIDCProviderArgs struct {
	NamespaceServiceAccounts pulumi.StringArrayInput `pulumi:"namespaceServiceAccounts"`
	ProviderArn              pulumi.StringPtrInput   `pulumi:"providerArn"`
}

func (OIDCProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OIDCProvider)(nil)).Elem()
}

func (i OIDCProviderArgs) ToOIDCProviderOutput() OIDCProviderOutput {
	return i.ToOIDCProviderOutputWithContext(context.Background())
}

func (i OIDCProviderArgs) ToOIDCProviderOutputWithContext(ctx context.Context) OIDCProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OIDCProviderOutput)
}

// OIDCProviderMapInput is an input type that accepts OIDCProviderMap and OIDCProviderMapOutput values.
// You can construct a concrete instance of `OIDCProviderMapInput` via:
//
//	OIDCProviderMap{ "key": OIDCProviderArgs{...} }
type OIDCProviderMapInput interface {
	pulumi.Input

	ToOIDCProviderMapOutput() OIDCProviderMapOutput
	ToOIDCProviderMapOutputWithContext(context.Context) OIDCProviderMapOutput
}

type OIDCProviderMap map[string]OIDCProviderInput

func (OIDCProviderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]OIDCProvider)(nil)).Elem()
}

func (i OIDCProviderMap) ToOIDCProviderMapOutput() OIDCProviderMapOutput {
	return i.ToOIDCProviderMapOutputWithContext(context.Background())
}

func (i OIDCProviderMap) ToOIDCProviderMapOutputWithContext(ctx context.Context) OIDCProviderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OIDCProviderMapOutput)
}

type OIDCProviderOutput struct{ *pulumi.OutputState }

func (OIDCProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OIDCProvider)(nil)).Elem()
}

func (o OIDCProviderOutput) ToOIDCProviderOutput() OIDCProviderOutput {
	return o
}

func (o OIDCProviderOutput) ToOIDCProviderOutputWithContext(ctx context.Context) OIDCProviderOutput {
	return o
}

func (o OIDCProviderOutput) NamespaceServiceAccounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OIDCProvider) []string { return v.NamespaceServiceAccounts }).(pulumi.StringArrayOutput)
}

func (o OIDCProviderOutput) ProviderArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OIDCProvider) *string { return v.ProviderArn }).(pulumi.StringPtrOutput)
}

type OIDCProviderMapOutput struct{ *pulumi.OutputState }

func (OIDCProviderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]OIDCProvider)(nil)).Elem()
}

func (o OIDCProviderMapOutput) ToOIDCProviderMapOutput() OIDCProviderMapOutput {
	return o
}

func (o OIDCProviderMapOutput) ToOIDCProviderMapOutputWithContext(ctx context.Context) OIDCProviderMapOutput {
	return o
}

func (o OIDCProviderMapOutput) MapIndex(k pulumi.StringInput) OIDCProviderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) OIDCProvider {
		return vs[0].(map[string]OIDCProvider)[vs[1].(string)]
	}).(OIDCProviderOutput)
}

// The poweruser role.
type PoweruserRole struct {
	// IAM role with poweruser access.
	Name *string `pulumi:"name"`
	// Path of poweruser IAM role.
	Path *string `pulumi:"path"`
	// Permissions boundary ARN to use for poweruser role.
	PermissionsBoundaryArn *string `pulumi:"permissionsBoundaryArn"`
	// List of policy ARNs to use for poweruser role.
	PolicyArns []string `pulumi:"policyArns"`
	// A map of tags to add.
	Tags map[string]string `pulumi:"tags"`
}

// PoweruserRoleInput is an input type that accepts PoweruserRoleArgs and PoweruserRoleOutput values.
// You can construct a concrete instance of `PoweruserRoleInput` via:
//
//	PoweruserRoleArgs{...}
type PoweruserRoleInput interface {
	pulumi.Input

	ToPoweruserRoleOutput() PoweruserRoleOutput
	ToPoweruserRoleOutputWithContext(context.Context) PoweruserRoleOutput
}

// The poweruser role.
type PoweruserRoleArgs struct {
	// IAM role with poweruser access.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Path of poweruser IAM role.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Permissions boundary ARN to use for poweruser role.
	PermissionsBoundaryArn pulumi.StringPtrInput `pulumi:"permissionsBoundaryArn"`
	// List of policy ARNs to use for poweruser role.
	PolicyArns pulumi.StringArrayInput `pulumi:"policyArns"`
	// A map of tags to add.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (PoweruserRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PoweruserRole)(nil)).Elem()
}

func (i PoweruserRoleArgs) ToPoweruserRoleOutput() PoweruserRoleOutput {
	return i.ToPoweruserRoleOutputWithContext(context.Background())
}

func (i PoweruserRoleArgs) ToPoweruserRoleOutputWithContext(ctx context.Context) PoweruserRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoweruserRoleOutput)
}

func (i PoweruserRoleArgs) ToPoweruserRolePtrOutput() PoweruserRolePtrOutput {
	return i.ToPoweruserRolePtrOutputWithContext(context.Background())
}

func (i PoweruserRoleArgs) ToPoweruserRolePtrOutputWithContext(ctx context.Context) PoweruserRolePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoweruserRoleOutput).ToPoweruserRolePtrOutputWithContext(ctx)
}

// PoweruserRolePtrInput is an input type that accepts PoweruserRoleArgs, PoweruserRolePtr and PoweruserRolePtrOutput values.
// You can construct a concrete instance of `PoweruserRolePtrInput` via:
//
//	        PoweruserRoleArgs{...}
//
//	or:
//
//	        nil
type PoweruserRolePtrInput interface {
	pulumi.Input

	ToPoweruserRolePtrOutput() PoweruserRolePtrOutput
	ToPoweruserRolePtrOutputWithContext(context.Context) PoweruserRolePtrOutput
}

type poweruserRolePtrType PoweruserRoleArgs

func PoweruserRolePtr(v *PoweruserRoleArgs) PoweruserRolePtrInput {
	return (*poweruserRolePtrType)(v)
}

func (*poweruserRolePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PoweruserRole)(nil)).Elem()
}

func (i *poweruserRolePtrType) ToPoweruserRolePtrOutput() PoweruserRolePtrOutput {
	return i.ToPoweruserRolePtrOutputWithContext(context.Background())
}

func (i *poweruserRolePtrType) ToPoweruserRolePtrOutputWithContext(ctx context.Context) PoweruserRolePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoweruserRolePtrOutput)
}

// The poweruser role.
type PoweruserRoleOutput struct{ *pulumi.OutputState }

func (PoweruserRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PoweruserRole)(nil)).Elem()
}

func (o PoweruserRoleOutput) ToPoweruserRoleOutput() PoweruserRoleOutput {
	return o
}

func (o PoweruserRoleOutput) ToPoweruserRoleOutputWithContext(ctx context.Context) PoweruserRoleOutput {
	return o
}

func (o PoweruserRoleOutput) ToPoweruserRolePtrOutput() PoweruserRolePtrOutput {
	return o.ToPoweruserRolePtrOutputWithContext(context.Background())
}

func (o PoweruserRoleOutput) ToPoweruserRolePtrOutputWithContext(ctx context.Context) PoweruserRolePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PoweruserRole) *PoweruserRole {
		return &v
	}).(PoweruserRolePtrOutput)
}

// IAM role with poweruser access.
func (o PoweruserRoleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PoweruserRole) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Path of poweruser IAM role.
func (o PoweruserRoleOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PoweruserRole) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Permissions boundary ARN to use for poweruser role.
func (o PoweruserRoleOutput) PermissionsBoundaryArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PoweruserRole) *string { return v.PermissionsBoundaryArn }).(pulumi.StringPtrOutput)
}

// List of policy ARNs to use for poweruser role.
func (o PoweruserRoleOutput) PolicyArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PoweruserRole) []string { return v.PolicyArns }).(pulumi.StringArrayOutput)
}

// A map of tags to add.
func (o PoweruserRoleOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v PoweruserRole) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type PoweruserRolePtrOutput struct{ *pulumi.OutputState }

func (PoweruserRolePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PoweruserRole)(nil)).Elem()
}

func (o PoweruserRolePtrOutput) ToPoweruserRolePtrOutput() PoweruserRolePtrOutput {
	return o
}

func (o PoweruserRolePtrOutput) ToPoweruserRolePtrOutputWithContext(ctx context.Context) PoweruserRolePtrOutput {
	return o
}

func (o PoweruserRolePtrOutput) Elem() PoweruserRoleOutput {
	return o.ApplyT(func(v *PoweruserRole) PoweruserRole {
		if v != nil {
			return *v
		}
		var ret PoweruserRole
		return ret
	}).(PoweruserRoleOutput)
}

// IAM role with poweruser access.
func (o PoweruserRolePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PoweruserRole) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Path of poweruser IAM role.
func (o PoweruserRolePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PoweruserRole) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Permissions boundary ARN to use for poweruser role.
func (o PoweruserRolePtrOutput) PermissionsBoundaryArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PoweruserRole) *string {
		if v == nil {
			return nil
		}
		return v.PermissionsBoundaryArn
	}).(pulumi.StringPtrOutput)
}

// List of policy ARNs to use for poweruser role.
func (o PoweruserRolePtrOutput) PolicyArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PoweruserRole) []string {
		if v == nil {
			return nil
		}
		return v.PolicyArns
	}).(pulumi.StringArrayOutput)
}

// A map of tags to add.
func (o PoweruserRolePtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PoweruserRole) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The poweruser role.
type PoweruserRoleWithMFA struct {
	// IAM role with poweruser access.
	Name *string `pulumi:"name"`
	// Path of poweruser IAM role.
	Path *string `pulumi:"path"`
	// Permissions boundary ARN to use for poweruser role.
	PermissionsBoundaryArn *string `pulumi:"permissionsBoundaryArn"`
	// List of policy ARNs to use for poweruser role.
	PolicyArns []string `pulumi:"policyArns"`
	// Whether admin role requires MFA.
	RequiresMfa *bool `pulumi:"requiresMfa"`
	// A map of tags to add.
	Tags map[string]string `pulumi:"tags"`
}

// PoweruserRoleWithMFAInput is an input type that accepts PoweruserRoleWithMFAArgs and PoweruserRoleWithMFAOutput values.
// You can construct a concrete instance of `PoweruserRoleWithMFAInput` via:
//
//	PoweruserRoleWithMFAArgs{...}
type PoweruserRoleWithMFAInput interface {
	pulumi.Input

	ToPoweruserRoleWithMFAOutput() PoweruserRoleWithMFAOutput
	ToPoweruserRoleWithMFAOutputWithContext(context.Context) PoweruserRoleWithMFAOutput
}

// The poweruser role.
type PoweruserRoleWithMFAArgs struct {
	// IAM role with poweruser access.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Path of poweruser IAM role.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Permissions boundary ARN to use for poweruser role.
	PermissionsBoundaryArn pulumi.StringPtrInput `pulumi:"permissionsBoundaryArn"`
	// List of policy ARNs to use for poweruser role.
	PolicyArns pulumi.StringArrayInput `pulumi:"policyArns"`
	// Whether admin role requires MFA.
	RequiresMfa pulumi.BoolPtrInput `pulumi:"requiresMfa"`
	// A map of tags to add.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (PoweruserRoleWithMFAArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PoweruserRoleWithMFA)(nil)).Elem()
}

func (i PoweruserRoleWithMFAArgs) ToPoweruserRoleWithMFAOutput() PoweruserRoleWithMFAOutput {
	return i.ToPoweruserRoleWithMFAOutputWithContext(context.Background())
}

func (i PoweruserRoleWithMFAArgs) ToPoweruserRoleWithMFAOutputWithContext(ctx context.Context) PoweruserRoleWithMFAOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoweruserRoleWithMFAOutput)
}

func (i PoweruserRoleWithMFAArgs) ToPoweruserRoleWithMFAPtrOutput() PoweruserRoleWithMFAPtrOutput {
	return i.ToPoweruserRoleWithMFAPtrOutputWithContext(context.Background())
}

func (i PoweruserRoleWithMFAArgs) ToPoweruserRoleWithMFAPtrOutputWithContext(ctx context.Context) PoweruserRoleWithMFAPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoweruserRoleWithMFAOutput).ToPoweruserRoleWithMFAPtrOutputWithContext(ctx)
}

// PoweruserRoleWithMFAPtrInput is an input type that accepts PoweruserRoleWithMFAArgs, PoweruserRoleWithMFAPtr and PoweruserRoleWithMFAPtrOutput values.
// You can construct a concrete instance of `PoweruserRoleWithMFAPtrInput` via:
//
//	        PoweruserRoleWithMFAArgs{...}
//
//	or:
//
//	        nil
type PoweruserRoleWithMFAPtrInput interface {
	pulumi.Input

	ToPoweruserRoleWithMFAPtrOutput() PoweruserRoleWithMFAPtrOutput
	ToPoweruserRoleWithMFAPtrOutputWithContext(context.Context) PoweruserRoleWithMFAPtrOutput
}

type poweruserRoleWithMFAPtrType PoweruserRoleWithMFAArgs

func PoweruserRoleWithMFAPtr(v *PoweruserRoleWithMFAArgs) PoweruserRoleWithMFAPtrInput {
	return (*poweruserRoleWithMFAPtrType)(v)
}

func (*poweruserRoleWithMFAPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PoweruserRoleWithMFA)(nil)).Elem()
}

func (i *poweruserRoleWithMFAPtrType) ToPoweruserRoleWithMFAPtrOutput() PoweruserRoleWithMFAPtrOutput {
	return i.ToPoweruserRoleWithMFAPtrOutputWithContext(context.Background())
}

func (i *poweruserRoleWithMFAPtrType) ToPoweruserRoleWithMFAPtrOutputWithContext(ctx context.Context) PoweruserRoleWithMFAPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoweruserRoleWithMFAPtrOutput)
}

// The poweruser role.
type PoweruserRoleWithMFAOutput struct{ *pulumi.OutputState }

func (PoweruserRoleWithMFAOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PoweruserRoleWithMFA)(nil)).Elem()
}

func (o PoweruserRoleWithMFAOutput) ToPoweruserRoleWithMFAOutput() PoweruserRoleWithMFAOutput {
	return o
}

func (o PoweruserRoleWithMFAOutput) ToPoweruserRoleWithMFAOutputWithContext(ctx context.Context) PoweruserRoleWithMFAOutput {
	return o
}

func (o PoweruserRoleWithMFAOutput) ToPoweruserRoleWithMFAPtrOutput() PoweruserRoleWithMFAPtrOutput {
	return o.ToPoweruserRoleWithMFAPtrOutputWithContext(context.Background())
}

func (o PoweruserRoleWithMFAOutput) ToPoweruserRoleWithMFAPtrOutputWithContext(ctx context.Context) PoweruserRoleWithMFAPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PoweruserRoleWithMFA) *PoweruserRoleWithMFA {
		return &v
	}).(PoweruserRoleWithMFAPtrOutput)
}

// IAM role with poweruser access.
func (o PoweruserRoleWithMFAOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PoweruserRoleWithMFA) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Path of poweruser IAM role.
func (o PoweruserRoleWithMFAOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PoweruserRoleWithMFA) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Permissions boundary ARN to use for poweruser role.
func (o PoweruserRoleWithMFAOutput) PermissionsBoundaryArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PoweruserRoleWithMFA) *string { return v.PermissionsBoundaryArn }).(pulumi.StringPtrOutput)
}

// List of policy ARNs to use for poweruser role.
func (o PoweruserRoleWithMFAOutput) PolicyArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PoweruserRoleWithMFA) []string { return v.PolicyArns }).(pulumi.StringArrayOutput)
}

// Whether admin role requires MFA.
func (o PoweruserRoleWithMFAOutput) RequiresMfa() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PoweruserRoleWithMFA) *bool { return v.RequiresMfa }).(pulumi.BoolPtrOutput)
}

// A map of tags to add.
func (o PoweruserRoleWithMFAOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v PoweruserRoleWithMFA) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type PoweruserRoleWithMFAPtrOutput struct{ *pulumi.OutputState }

func (PoweruserRoleWithMFAPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PoweruserRoleWithMFA)(nil)).Elem()
}

func (o PoweruserRoleWithMFAPtrOutput) ToPoweruserRoleWithMFAPtrOutput() PoweruserRoleWithMFAPtrOutput {
	return o
}

func (o PoweruserRoleWithMFAPtrOutput) ToPoweruserRoleWithMFAPtrOutputWithContext(ctx context.Context) PoweruserRoleWithMFAPtrOutput {
	return o
}

func (o PoweruserRoleWithMFAPtrOutput) Elem() PoweruserRoleWithMFAOutput {
	return o.ApplyT(func(v *PoweruserRoleWithMFA) PoweruserRoleWithMFA {
		if v != nil {
			return *v
		}
		var ret PoweruserRoleWithMFA
		return ret
	}).(PoweruserRoleWithMFAOutput)
}

// IAM role with poweruser access.
func (o PoweruserRoleWithMFAPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PoweruserRoleWithMFA) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Path of poweruser IAM role.
func (o PoweruserRoleWithMFAPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PoweruserRoleWithMFA) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Permissions boundary ARN to use for poweruser role.
func (o PoweruserRoleWithMFAPtrOutput) PermissionsBoundaryArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PoweruserRoleWithMFA) *string {
		if v == nil {
			return nil
		}
		return v.PermissionsBoundaryArn
	}).(pulumi.StringPtrOutput)
}

// List of policy ARNs to use for poweruser role.
func (o PoweruserRoleWithMFAPtrOutput) PolicyArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PoweruserRoleWithMFA) []string {
		if v == nil {
			return nil
		}
		return v.PolicyArns
	}).(pulumi.StringArrayOutput)
}

// Whether admin role requires MFA.
func (o PoweruserRoleWithMFAPtrOutput) RequiresMfa() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PoweruserRoleWithMFA) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresMfa
	}).(pulumi.BoolPtrOutput)
}

// A map of tags to add.
func (o PoweruserRoleWithMFAPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PoweruserRoleWithMFA) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The readonly role.
type ReadonlyRole struct {
	// IAM role with readonly access.
	Name *string `pulumi:"name"`
	// Path of readonly IAM role. Defaults to '/'.
	Path *string `pulumi:"path"`
	// Permissions boundary ARN to use for readonly role.
	PermissionsBoundaryArn *string `pulumi:"permissionsBoundaryArn"`
	// List of policy ARNs to use for readonly role.
	PolicyArns []string `pulumi:"policyArns"`
	// A map of tags to add.
	Tags map[string]string `pulumi:"tags"`
}

// ReadonlyRoleInput is an input type that accepts ReadonlyRoleArgs and ReadonlyRoleOutput values.
// You can construct a concrete instance of `ReadonlyRoleInput` via:
//
//	ReadonlyRoleArgs{...}
type ReadonlyRoleInput interface {
	pulumi.Input

	ToReadonlyRoleOutput() ReadonlyRoleOutput
	ToReadonlyRoleOutputWithContext(context.Context) ReadonlyRoleOutput
}

// The readonly role.
type ReadonlyRoleArgs struct {
	// IAM role with readonly access.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Path of readonly IAM role. Defaults to '/'.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Permissions boundary ARN to use for readonly role.
	PermissionsBoundaryArn pulumi.StringPtrInput `pulumi:"permissionsBoundaryArn"`
	// List of policy ARNs to use for readonly role.
	PolicyArns pulumi.StringArrayInput `pulumi:"policyArns"`
	// A map of tags to add.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (ReadonlyRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReadonlyRole)(nil)).Elem()
}

func (i ReadonlyRoleArgs) ToReadonlyRoleOutput() ReadonlyRoleOutput {
	return i.ToReadonlyRoleOutputWithContext(context.Background())
}

func (i ReadonlyRoleArgs) ToReadonlyRoleOutputWithContext(ctx context.Context) ReadonlyRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReadonlyRoleOutput)
}

func (i ReadonlyRoleArgs) ToReadonlyRolePtrOutput() ReadonlyRolePtrOutput {
	return i.ToReadonlyRolePtrOutputWithContext(context.Background())
}

func (i ReadonlyRoleArgs) ToReadonlyRolePtrOutputWithContext(ctx context.Context) ReadonlyRolePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReadonlyRoleOutput).ToReadonlyRolePtrOutputWithContext(ctx)
}

// ReadonlyRolePtrInput is an input type that accepts ReadonlyRoleArgs, ReadonlyRolePtr and ReadonlyRolePtrOutput values.
// You can construct a concrete instance of `ReadonlyRolePtrInput` via:
//
//	        ReadonlyRoleArgs{...}
//
//	or:
//
//	        nil
type ReadonlyRolePtrInput interface {
	pulumi.Input

	ToReadonlyRolePtrOutput() ReadonlyRolePtrOutput
	ToReadonlyRolePtrOutputWithContext(context.Context) ReadonlyRolePtrOutput
}

type readonlyRolePtrType ReadonlyRoleArgs

func ReadonlyRolePtr(v *ReadonlyRoleArgs) ReadonlyRolePtrInput {
	return (*readonlyRolePtrType)(v)
}

func (*readonlyRolePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReadonlyRole)(nil)).Elem()
}

func (i *readonlyRolePtrType) ToReadonlyRolePtrOutput() ReadonlyRolePtrOutput {
	return i.ToReadonlyRolePtrOutputWithContext(context.Background())
}

func (i *readonlyRolePtrType) ToReadonlyRolePtrOutputWithContext(ctx context.Context) ReadonlyRolePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReadonlyRolePtrOutput)
}

// The readonly role.
type ReadonlyRoleOutput struct{ *pulumi.OutputState }

func (ReadonlyRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReadonlyRole)(nil)).Elem()
}

func (o ReadonlyRoleOutput) ToReadonlyRoleOutput() ReadonlyRoleOutput {
	return o
}

func (o ReadonlyRoleOutput) ToReadonlyRoleOutputWithContext(ctx context.Context) ReadonlyRoleOutput {
	return o
}

func (o ReadonlyRoleOutput) ToReadonlyRolePtrOutput() ReadonlyRolePtrOutput {
	return o.ToReadonlyRolePtrOutputWithContext(context.Background())
}

func (o ReadonlyRoleOutput) ToReadonlyRolePtrOutputWithContext(ctx context.Context) ReadonlyRolePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReadonlyRole) *ReadonlyRole {
		return &v
	}).(ReadonlyRolePtrOutput)
}

// IAM role with readonly access.
func (o ReadonlyRoleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReadonlyRole) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Path of readonly IAM role. Defaults to '/'.
func (o ReadonlyRoleOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReadonlyRole) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Permissions boundary ARN to use for readonly role.
func (o ReadonlyRoleOutput) PermissionsBoundaryArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReadonlyRole) *string { return v.PermissionsBoundaryArn }).(pulumi.StringPtrOutput)
}

// List of policy ARNs to use for readonly role.
func (o ReadonlyRoleOutput) PolicyArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReadonlyRole) []string { return v.PolicyArns }).(pulumi.StringArrayOutput)
}

// A map of tags to add.
func (o ReadonlyRoleOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ReadonlyRole) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type ReadonlyRolePtrOutput struct{ *pulumi.OutputState }

func (ReadonlyRolePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReadonlyRole)(nil)).Elem()
}

func (o ReadonlyRolePtrOutput) ToReadonlyRolePtrOutput() ReadonlyRolePtrOutput {
	return o
}

func (o ReadonlyRolePtrOutput) ToReadonlyRolePtrOutputWithContext(ctx context.Context) ReadonlyRolePtrOutput {
	return o
}

func (o ReadonlyRolePtrOutput) Elem() ReadonlyRoleOutput {
	return o.ApplyT(func(v *ReadonlyRole) ReadonlyRole {
		if v != nil {
			return *v
		}
		var ret ReadonlyRole
		return ret
	}).(ReadonlyRoleOutput)
}

// IAM role with readonly access.
func (o ReadonlyRolePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReadonlyRole) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Path of readonly IAM role. Defaults to '/'.
func (o ReadonlyRolePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReadonlyRole) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Permissions boundary ARN to use for readonly role.
func (o ReadonlyRolePtrOutput) PermissionsBoundaryArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReadonlyRole) *string {
		if v == nil {
			return nil
		}
		return v.PermissionsBoundaryArn
	}).(pulumi.StringPtrOutput)
}

// List of policy ARNs to use for readonly role.
func (o ReadonlyRolePtrOutput) PolicyArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReadonlyRole) []string {
		if v == nil {
			return nil
		}
		return v.PolicyArns
	}).(pulumi.StringArrayOutput)
}

// A map of tags to add.
func (o ReadonlyRolePtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ReadonlyRole) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The readonly role.
type ReadonlyRoleWithMFA struct {
	// IAM role with readonly access.
	Name *string `pulumi:"name"`
	// Path of readonly IAM role. Defaults to '/'.
	Path *string `pulumi:"path"`
	// Permissions boundary ARN to use for readonly role.
	PermissionsBoundaryArn *string `pulumi:"permissionsBoundaryArn"`
	// List of policy ARNs to use for readonly role.
	PolicyArns []string `pulumi:"policyArns"`
	// Whether admin role requires MFA.
	RequiresMfa *bool `pulumi:"requiresMfa"`
	// A map of tags to add.
	Tags map[string]string `pulumi:"tags"`
}

// ReadonlyRoleWithMFAInput is an input type that accepts ReadonlyRoleWithMFAArgs and ReadonlyRoleWithMFAOutput values.
// You can construct a concrete instance of `ReadonlyRoleWithMFAInput` via:
//
//	ReadonlyRoleWithMFAArgs{...}
type ReadonlyRoleWithMFAInput interface {
	pulumi.Input

	ToReadonlyRoleWithMFAOutput() ReadonlyRoleWithMFAOutput
	ToReadonlyRoleWithMFAOutputWithContext(context.Context) ReadonlyRoleWithMFAOutput
}

// The readonly role.
type ReadonlyRoleWithMFAArgs struct {
	// IAM role with readonly access.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Path of readonly IAM role. Defaults to '/'.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Permissions boundary ARN to use for readonly role.
	PermissionsBoundaryArn pulumi.StringPtrInput `pulumi:"permissionsBoundaryArn"`
	// List of policy ARNs to use for readonly role.
	PolicyArns pulumi.StringArrayInput `pulumi:"policyArns"`
	// Whether admin role requires MFA.
	RequiresMfa pulumi.BoolPtrInput `pulumi:"requiresMfa"`
	// A map of tags to add.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (ReadonlyRoleWithMFAArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReadonlyRoleWithMFA)(nil)).Elem()
}

func (i ReadonlyRoleWithMFAArgs) ToReadonlyRoleWithMFAOutput() ReadonlyRoleWithMFAOutput {
	return i.ToReadonlyRoleWithMFAOutputWithContext(context.Background())
}

func (i ReadonlyRoleWithMFAArgs) ToReadonlyRoleWithMFAOutputWithContext(ctx context.Context) ReadonlyRoleWithMFAOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReadonlyRoleWithMFAOutput)
}

func (i ReadonlyRoleWithMFAArgs) ToReadonlyRoleWithMFAPtrOutput() ReadonlyRoleWithMFAPtrOutput {
	return i.ToReadonlyRoleWithMFAPtrOutputWithContext(context.Background())
}

func (i ReadonlyRoleWithMFAArgs) ToReadonlyRoleWithMFAPtrOutputWithContext(ctx context.Context) ReadonlyRoleWithMFAPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReadonlyRoleWithMFAOutput).ToReadonlyRoleWithMFAPtrOutputWithContext(ctx)
}

// ReadonlyRoleWithMFAPtrInput is an input type that accepts ReadonlyRoleWithMFAArgs, ReadonlyRoleWithMFAPtr and ReadonlyRoleWithMFAPtrOutput values.
// You can construct a concrete instance of `ReadonlyRoleWithMFAPtrInput` via:
//
//	        ReadonlyRoleWithMFAArgs{...}
//
//	or:
//
//	        nil
type ReadonlyRoleWithMFAPtrInput interface {
	pulumi.Input

	ToReadonlyRoleWithMFAPtrOutput() ReadonlyRoleWithMFAPtrOutput
	ToReadonlyRoleWithMFAPtrOutputWithContext(context.Context) ReadonlyRoleWithMFAPtrOutput
}

type readonlyRoleWithMFAPtrType ReadonlyRoleWithMFAArgs

func ReadonlyRoleWithMFAPtr(v *ReadonlyRoleWithMFAArgs) ReadonlyRoleWithMFAPtrInput {
	return (*readonlyRoleWithMFAPtrType)(v)
}

func (*readonlyRoleWithMFAPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReadonlyRoleWithMFA)(nil)).Elem()
}

func (i *readonlyRoleWithMFAPtrType) ToReadonlyRoleWithMFAPtrOutput() ReadonlyRoleWithMFAPtrOutput {
	return i.ToReadonlyRoleWithMFAPtrOutputWithContext(context.Background())
}

func (i *readonlyRoleWithMFAPtrType) ToReadonlyRoleWithMFAPtrOutputWithContext(ctx context.Context) ReadonlyRoleWithMFAPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReadonlyRoleWithMFAPtrOutput)
}

// The readonly role.
type ReadonlyRoleWithMFAOutput struct{ *pulumi.OutputState }

func (ReadonlyRoleWithMFAOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReadonlyRoleWithMFA)(nil)).Elem()
}

func (o ReadonlyRoleWithMFAOutput) ToReadonlyRoleWithMFAOutput() ReadonlyRoleWithMFAOutput {
	return o
}

func (o ReadonlyRoleWithMFAOutput) ToReadonlyRoleWithMFAOutputWithContext(ctx context.Context) ReadonlyRoleWithMFAOutput {
	return o
}

func (o ReadonlyRoleWithMFAOutput) ToReadonlyRoleWithMFAPtrOutput() ReadonlyRoleWithMFAPtrOutput {
	return o.ToReadonlyRoleWithMFAPtrOutputWithContext(context.Background())
}

func (o ReadonlyRoleWithMFAOutput) ToReadonlyRoleWithMFAPtrOutputWithContext(ctx context.Context) ReadonlyRoleWithMFAPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReadonlyRoleWithMFA) *ReadonlyRoleWithMFA {
		return &v
	}).(ReadonlyRoleWithMFAPtrOutput)
}

// IAM role with readonly access.
func (o ReadonlyRoleWithMFAOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReadonlyRoleWithMFA) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Path of readonly IAM role. Defaults to '/'.
func (o ReadonlyRoleWithMFAOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReadonlyRoleWithMFA) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Permissions boundary ARN to use for readonly role.
func (o ReadonlyRoleWithMFAOutput) PermissionsBoundaryArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReadonlyRoleWithMFA) *string { return v.PermissionsBoundaryArn }).(pulumi.StringPtrOutput)
}

// List of policy ARNs to use for readonly role.
func (o ReadonlyRoleWithMFAOutput) PolicyArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReadonlyRoleWithMFA) []string { return v.PolicyArns }).(pulumi.StringArrayOutput)
}

// Whether admin role requires MFA.
func (o ReadonlyRoleWithMFAOutput) RequiresMfa() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReadonlyRoleWithMFA) *bool { return v.RequiresMfa }).(pulumi.BoolPtrOutput)
}

// A map of tags to add.
func (o ReadonlyRoleWithMFAOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ReadonlyRoleWithMFA) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type ReadonlyRoleWithMFAPtrOutput struct{ *pulumi.OutputState }

func (ReadonlyRoleWithMFAPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReadonlyRoleWithMFA)(nil)).Elem()
}

func (o ReadonlyRoleWithMFAPtrOutput) ToReadonlyRoleWithMFAPtrOutput() ReadonlyRoleWithMFAPtrOutput {
	return o
}

func (o ReadonlyRoleWithMFAPtrOutput) ToReadonlyRoleWithMFAPtrOutputWithContext(ctx context.Context) ReadonlyRoleWithMFAPtrOutput {
	return o
}

func (o ReadonlyRoleWithMFAPtrOutput) Elem() ReadonlyRoleWithMFAOutput {
	return o.ApplyT(func(v *ReadonlyRoleWithMFA) ReadonlyRoleWithMFA {
		if v != nil {
			return *v
		}
		var ret ReadonlyRoleWithMFA
		return ret
	}).(ReadonlyRoleWithMFAOutput)
}

// IAM role with readonly access.
func (o ReadonlyRoleWithMFAPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReadonlyRoleWithMFA) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Path of readonly IAM role. Defaults to '/'.
func (o ReadonlyRoleWithMFAPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReadonlyRoleWithMFA) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Permissions boundary ARN to use for readonly role.
func (o ReadonlyRoleWithMFAPtrOutput) PermissionsBoundaryArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReadonlyRoleWithMFA) *string {
		if v == nil {
			return nil
		}
		return v.PermissionsBoundaryArn
	}).(pulumi.StringPtrOutput)
}

// List of policy ARNs to use for readonly role.
func (o ReadonlyRoleWithMFAPtrOutput) PolicyArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReadonlyRoleWithMFA) []string {
		if v == nil {
			return nil
		}
		return v.PolicyArns
	}).(pulumi.StringArrayOutput)
}

// Whether admin role requires MFA.
func (o ReadonlyRoleWithMFAPtrOutput) RequiresMfa() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReadonlyRoleWithMFA) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresMfa
	}).(pulumi.BoolPtrOutput)
}

// A map of tags to add.
func (o ReadonlyRoleWithMFAPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ReadonlyRoleWithMFA) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// An IAM role.
type Role struct {
	// IAM role name.
	Name *string `pulumi:"name"`
	// IAM role name prefix.
	NamePrefix *string `pulumi:"namePrefix"`
	// Path of admin IAM role. Defaults to '/'.
	Path *string `pulumi:"path"`
	// Permissions boundary ARN to use for the role.
	PermissionsBoundaryArn *string `pulumi:"permissionsBoundaryArn"`
	// List of policy ARNs to use for the role.
	PolicyArns []string `pulumi:"policyArns"`
}

// RoleInput is an input type that accepts RoleArgs and RoleOutput values.
// You can construct a concrete instance of `RoleInput` via:
//
//	RoleArgs{...}
type RoleInput interface {
	pulumi.Input

	ToRoleOutput() RoleOutput
	ToRoleOutputWithContext(context.Context) RoleOutput
}

// An IAM role.
type RoleArgs struct {
	// IAM role name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// IAM role name prefix.
	NamePrefix pulumi.StringPtrInput `pulumi:"namePrefix"`
	// Path of admin IAM role. Defaults to '/'.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Permissions boundary ARN to use for the role.
	PermissionsBoundaryArn pulumi.StringPtrInput `pulumi:"permissionsBoundaryArn"`
	// List of policy ARNs to use for the role.
	PolicyArns pulumi.StringArrayInput `pulumi:"policyArns"`
}

func (RoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Role)(nil)).Elem()
}

func (i RoleArgs) ToRoleOutput() RoleOutput {
	return i.ToRoleOutputWithContext(context.Background())
}

func (i RoleArgs) ToRoleOutputWithContext(ctx context.Context) RoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleOutput)
}

func (i RoleArgs) ToRolePtrOutput() RolePtrOutput {
	return i.ToRolePtrOutputWithContext(context.Background())
}

func (i RoleArgs) ToRolePtrOutputWithContext(ctx context.Context) RolePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleOutput).ToRolePtrOutputWithContext(ctx)
}

// RolePtrInput is an input type that accepts RoleArgs, RolePtr and RolePtrOutput values.
// You can construct a concrete instance of `RolePtrInput` via:
//
//	        RoleArgs{...}
//
//	or:
//
//	        nil
type RolePtrInput interface {
	pulumi.Input

	ToRolePtrOutput() RolePtrOutput
	ToRolePtrOutputWithContext(context.Context) RolePtrOutput
}

type rolePtrType RoleArgs

func RolePtr(v *RoleArgs) RolePtrInput {
	return (*rolePtrType)(v)
}

func (*rolePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Role)(nil)).Elem()
}

func (i *rolePtrType) ToRolePtrOutput() RolePtrOutput {
	return i.ToRolePtrOutputWithContext(context.Background())
}

func (i *rolePtrType) ToRolePtrOutputWithContext(ctx context.Context) RolePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolePtrOutput)
}

// An IAM role.
type RoleOutput struct{ *pulumi.OutputState }

func (RoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Role)(nil)).Elem()
}

func (o RoleOutput) ToRoleOutput() RoleOutput {
	return o
}

func (o RoleOutput) ToRoleOutputWithContext(ctx context.Context) RoleOutput {
	return o
}

func (o RoleOutput) ToRolePtrOutput() RolePtrOutput {
	return o.ToRolePtrOutputWithContext(context.Background())
}

func (o RoleOutput) ToRolePtrOutputWithContext(ctx context.Context) RolePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Role) *Role {
		return &v
	}).(RolePtrOutput)
}

// IAM role name.
func (o RoleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Role) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// IAM role name prefix.
func (o RoleOutput) NamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Role) *string { return v.NamePrefix }).(pulumi.StringPtrOutput)
}

// Path of admin IAM role. Defaults to '/'.
func (o RoleOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Role) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Permissions boundary ARN to use for the role.
func (o RoleOutput) PermissionsBoundaryArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Role) *string { return v.PermissionsBoundaryArn }).(pulumi.StringPtrOutput)
}

// List of policy ARNs to use for the role.
func (o RoleOutput) PolicyArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Role) []string { return v.PolicyArns }).(pulumi.StringArrayOutput)
}

type RolePtrOutput struct{ *pulumi.OutputState }

func (RolePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Role)(nil)).Elem()
}

func (o RolePtrOutput) ToRolePtrOutput() RolePtrOutput {
	return o
}

func (o RolePtrOutput) ToRolePtrOutputWithContext(ctx context.Context) RolePtrOutput {
	return o
}

func (o RolePtrOutput) Elem() RoleOutput {
	return o.ApplyT(func(v *Role) Role {
		if v != nil {
			return *v
		}
		var ret Role
		return ret
	}).(RoleOutput)
}

// IAM role name.
func (o RolePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Role) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// IAM role name prefix.
func (o RolePtrOutput) NamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Role) *string {
		if v == nil {
			return nil
		}
		return v.NamePrefix
	}).(pulumi.StringPtrOutput)
}

// Path of admin IAM role. Defaults to '/'.
func (o RolePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Role) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Permissions boundary ARN to use for the role.
func (o RolePtrOutput) PermissionsBoundaryArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Role) *string {
		if v == nil {
			return nil
		}
		return v.PermissionsBoundaryArn
	}).(pulumi.StringPtrOutput)
}

// List of policy ARNs to use for the role.
func (o RolePtrOutput) PolicyArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Role) []string {
		if v == nil {
			return nil
		}
		return v.PolicyArns
	}).(pulumi.StringArrayOutput)
}

// An IAM role that requires MFA.
type RoleWithMFA struct {
	// IAM role with the access. Defaults to 'admin'.
	Name *string `pulumi:"name"`
	// Path of the IAM role. Defaults to '/'.
	Path *string `pulumi:"path"`
	// Permissions boundary ARN to use for the role.
	PermissionsBoundaryArn *string `pulumi:"permissionsBoundaryArn"`
	// List of policy ARNs to use for the role.
	PolicyArns []string `pulumi:"policyArns"`
	// Whether the role requires MFA.
	RequiresMfa *bool `pulumi:"requiresMfa"`
	// A map of tags to add.
	Tags map[string]string `pulumi:"tags"`
}

// RoleWithMFAInput is an input type that accepts RoleWithMFAArgs and RoleWithMFAOutput values.
// You can construct a concrete instance of `RoleWithMFAInput` via:
//
//	RoleWithMFAArgs{...}
type RoleWithMFAInput interface {
	pulumi.Input

	ToRoleWithMFAOutput() RoleWithMFAOutput
	ToRoleWithMFAOutputWithContext(context.Context) RoleWithMFAOutput
}

// An IAM role that requires MFA.
type RoleWithMFAArgs struct {
	// IAM role with the access. Defaults to 'admin'.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Path of the IAM role. Defaults to '/'.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Permissions boundary ARN to use for the role.
	PermissionsBoundaryArn pulumi.StringPtrInput `pulumi:"permissionsBoundaryArn"`
	// List of policy ARNs to use for the role.
	PolicyArns pulumi.StringArrayInput `pulumi:"policyArns"`
	// Whether the role requires MFA.
	RequiresMfa pulumi.BoolPtrInput `pulumi:"requiresMfa"`
	// A map of tags to add.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (RoleWithMFAArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleWithMFA)(nil)).Elem()
}

func (i RoleWithMFAArgs) ToRoleWithMFAOutput() RoleWithMFAOutput {
	return i.ToRoleWithMFAOutputWithContext(context.Background())
}

func (i RoleWithMFAArgs) ToRoleWithMFAOutputWithContext(ctx context.Context) RoleWithMFAOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleWithMFAOutput)
}

func (i RoleWithMFAArgs) ToRoleWithMFAPtrOutput() RoleWithMFAPtrOutput {
	return i.ToRoleWithMFAPtrOutputWithContext(context.Background())
}

func (i RoleWithMFAArgs) ToRoleWithMFAPtrOutputWithContext(ctx context.Context) RoleWithMFAPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleWithMFAOutput).ToRoleWithMFAPtrOutputWithContext(ctx)
}

// RoleWithMFAPtrInput is an input type that accepts RoleWithMFAArgs, RoleWithMFAPtr and RoleWithMFAPtrOutput values.
// You can construct a concrete instance of `RoleWithMFAPtrInput` via:
//
//	        RoleWithMFAArgs{...}
//
//	or:
//
//	        nil
type RoleWithMFAPtrInput interface {
	pulumi.Input

	ToRoleWithMFAPtrOutput() RoleWithMFAPtrOutput
	ToRoleWithMFAPtrOutputWithContext(context.Context) RoleWithMFAPtrOutput
}

type roleWithMFAPtrType RoleWithMFAArgs

func RoleWithMFAPtr(v *RoleWithMFAArgs) RoleWithMFAPtrInput {
	return (*roleWithMFAPtrType)(v)
}

func (*roleWithMFAPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleWithMFA)(nil)).Elem()
}

func (i *roleWithMFAPtrType) ToRoleWithMFAPtrOutput() RoleWithMFAPtrOutput {
	return i.ToRoleWithMFAPtrOutputWithContext(context.Background())
}

func (i *roleWithMFAPtrType) ToRoleWithMFAPtrOutputWithContext(ctx context.Context) RoleWithMFAPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleWithMFAPtrOutput)
}

// An IAM role that requires MFA.
type RoleWithMFAOutput struct{ *pulumi.OutputState }

func (RoleWithMFAOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleWithMFA)(nil)).Elem()
}

func (o RoleWithMFAOutput) ToRoleWithMFAOutput() RoleWithMFAOutput {
	return o
}

func (o RoleWithMFAOutput) ToRoleWithMFAOutputWithContext(ctx context.Context) RoleWithMFAOutput {
	return o
}

func (o RoleWithMFAOutput) ToRoleWithMFAPtrOutput() RoleWithMFAPtrOutput {
	return o.ToRoleWithMFAPtrOutputWithContext(context.Background())
}

func (o RoleWithMFAOutput) ToRoleWithMFAPtrOutputWithContext(ctx context.Context) RoleWithMFAPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RoleWithMFA) *RoleWithMFA {
		return &v
	}).(RoleWithMFAPtrOutput)
}

// IAM role with the access. Defaults to 'admin'.
func (o RoleWithMFAOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleWithMFA) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Path of the IAM role. Defaults to '/'.
func (o RoleWithMFAOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleWithMFA) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Permissions boundary ARN to use for the role.
func (o RoleWithMFAOutput) PermissionsBoundaryArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleWithMFA) *string { return v.PermissionsBoundaryArn }).(pulumi.StringPtrOutput)
}

// List of policy ARNs to use for the role.
func (o RoleWithMFAOutput) PolicyArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleWithMFA) []string { return v.PolicyArns }).(pulumi.StringArrayOutput)
}

// Whether the role requires MFA.
func (o RoleWithMFAOutput) RequiresMfa() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RoleWithMFA) *bool { return v.RequiresMfa }).(pulumi.BoolPtrOutput)
}

// A map of tags to add.
func (o RoleWithMFAOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v RoleWithMFA) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type RoleWithMFAPtrOutput struct{ *pulumi.OutputState }

func (RoleWithMFAPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleWithMFA)(nil)).Elem()
}

func (o RoleWithMFAPtrOutput) ToRoleWithMFAPtrOutput() RoleWithMFAPtrOutput {
	return o
}

func (o RoleWithMFAPtrOutput) ToRoleWithMFAPtrOutputWithContext(ctx context.Context) RoleWithMFAPtrOutput {
	return o
}

func (o RoleWithMFAPtrOutput) Elem() RoleWithMFAOutput {
	return o.ApplyT(func(v *RoleWithMFA) RoleWithMFA {
		if v != nil {
			return *v
		}
		var ret RoleWithMFA
		return ret
	}).(RoleWithMFAOutput)
}

// IAM role with the access. Defaults to 'admin'.
func (o RoleWithMFAPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleWithMFA) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Path of the IAM role. Defaults to '/'.
func (o RoleWithMFAPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleWithMFA) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Permissions boundary ARN to use for the role.
func (o RoleWithMFAPtrOutput) PermissionsBoundaryArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleWithMFA) *string {
		if v == nil {
			return nil
		}
		return v.PermissionsBoundaryArn
	}).(pulumi.StringPtrOutput)
}

// List of policy ARNs to use for the role.
func (o RoleWithMFAPtrOutput) PolicyArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoleWithMFA) []string {
		if v == nil {
			return nil
		}
		return v.PolicyArns
	}).(pulumi.StringArrayOutput)
}

// Whether the role requires MFA.
func (o RoleWithMFAPtrOutput) RequiresMfa() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RoleWithMFA) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresMfa
	}).(pulumi.BoolPtrOutput)
}

// A map of tags to add.
func (o RoleWithMFAPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RoleWithMFA) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The IAM user.
type UserOutputType struct {
	// The ARN assigned by AWS for this user.
	Arn string `pulumi:"arn"`
	// The encrypted password, base64 encoded.
	LoginProfileEncryptedPassword *string `pulumi:"loginProfileEncryptedPassword"`
	// The fingerprint of the PGP key used to encrypt the password.
	LoginProfileKeyFingerprint *string `pulumi:"loginProfileKeyFingerprint"`
	// The user password.
	LoginProfilePassword *string `pulumi:"loginProfilePassword"`
	// The user's name.
	Name string `pulumi:"name"`
	// The unique identifier for the SSH public key.
	SshKeyFingerprint *string `pulumi:"sshKeyFingerprint"`
	// The unique identifier for the SSH public key
	SshKeySshPublicKeyId *string `pulumi:"sshKeySshPublicKeyId"`
	// The unique ID assigned by AWS.
	UniqueId string `pulumi:"uniqueId"`
}

// The IAM user.
type UserOutputTypeOutput struct{ *pulumi.OutputState }

func (UserOutputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserOutputType)(nil)).Elem()
}

func (o UserOutputTypeOutput) ToUserOutputTypeOutput() UserOutputTypeOutput {
	return o
}

func (o UserOutputTypeOutput) ToUserOutputTypeOutputWithContext(ctx context.Context) UserOutputTypeOutput {
	return o
}

// The ARN assigned by AWS for this user.
func (o UserOutputTypeOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v UserOutputType) string { return v.Arn }).(pulumi.StringOutput)
}

// The encrypted password, base64 encoded.
func (o UserOutputTypeOutput) LoginProfileEncryptedPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserOutputType) *string { return v.LoginProfileEncryptedPassword }).(pulumi.StringPtrOutput)
}

// The fingerprint of the PGP key used to encrypt the password.
func (o UserOutputTypeOutput) LoginProfileKeyFingerprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserOutputType) *string { return v.LoginProfileKeyFingerprint }).(pulumi.StringPtrOutput)
}

// The user password.
func (o UserOutputTypeOutput) LoginProfilePassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserOutputType) *string { return v.LoginProfilePassword }).(pulumi.StringPtrOutput)
}

// The user's name.
func (o UserOutputTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v UserOutputType) string { return v.Name }).(pulumi.StringOutput)
}

// The unique identifier for the SSH public key.
func (o UserOutputTypeOutput) SshKeyFingerprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserOutputType) *string { return v.SshKeyFingerprint }).(pulumi.StringPtrOutput)
}

// The unique identifier for the SSH public key
func (o UserOutputTypeOutput) SshKeySshPublicKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserOutputType) *string { return v.SshKeySshPublicKeyId }).(pulumi.StringPtrOutput)
}

// The unique ID assigned by AWS.
func (o UserOutputTypeOutput) UniqueId() pulumi.StringOutput {
	return o.ApplyT(func(v UserOutputType) string { return v.UniqueId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountPasswordPolicyInput)(nil)).Elem(), AccountPasswordPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdminRoleInput)(nil)).Elem(), AdminRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdminRolePtrInput)(nil)).Elem(), AdminRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdminRoleWithMFAInput)(nil)).Elem(), AdminRoleWithMFAArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EKSAmazonManagedServicePrometheusPolicyInput)(nil)).Elem(), EKSAmazonManagedServicePrometheusPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EKSAmazonManagedServicePrometheusPolicyPtrInput)(nil)).Elem(), EKSAmazonManagedServicePrometheusPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EKSAppmeshPolicyInput)(nil)).Elem(), EKSAppmeshPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EKSAppmeshPolicyPtrInput)(nil)).Elem(), EKSAppmeshPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EKSCertManagerPolicyInput)(nil)).Elem(), EKSCertManagerPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EKSCertManagerPolicyPtrInput)(nil)).Elem(), EKSCertManagerPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EKSClusterAutoscalerPolicyInput)(nil)).Elem(), EKSClusterAutoscalerPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EKSClusterAutoscalerPolicyPtrInput)(nil)).Elem(), EKSClusterAutoscalerPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EKSEBSCSIPolicyInput)(nil)).Elem(), EKSEBSCSIPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EKSEBSCSIPolicyPtrInput)(nil)).Elem(), EKSEBSCSIPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EKSEFSCSIPolicyInput)(nil)).Elem(), EKSEFSCSIPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EKSEFSCSIPolicyPtrInput)(nil)).Elem(), EKSEFSCSIPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EKSExternalDNSPolicyInput)(nil)).Elem(), EKSExternalDNSPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EKSExternalDNSPolicyPtrInput)(nil)).Elem(), EKSExternalDNSPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EKSExternalSecretsPolicyInput)(nil)).Elem(), EKSExternalSecretsPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EKSExternalSecretsPolicyPtrInput)(nil)).Elem(), EKSExternalSecretsPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EKSKarpenterControllerPolicyInput)(nil)).Elem(), EKSKarpenterControllerPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EKSKarpenterControllerPolicyPtrInput)(nil)).Elem(), EKSKarpenterControllerPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EKSLoadBalancerPolicyInput)(nil)).Elem(), EKSLoadBalancerPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EKSLoadBalancerPolicyPtrInput)(nil)).Elem(), EKSLoadBalancerPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EKSNodeTerminationHandlerPolicyInput)(nil)).Elem(), EKSNodeTerminationHandlerPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EKSNodeTerminationHandlerPolicyPtrInput)(nil)).Elem(), EKSNodeTerminationHandlerPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EKSRolePoliciesInput)(nil)).Elem(), EKSRolePoliciesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EKSRolePoliciesPtrInput)(nil)).Elem(), EKSRolePoliciesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EKSServiceAccountInput)(nil)).Elem(), EKSServiceAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EKSServiceAccountArrayInput)(nil)).Elem(), EKSServiceAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EKSServiceAccountRoleInput)(nil)).Elem(), EKSServiceAccountRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EKSServiceAccountRolePtrInput)(nil)).Elem(), EKSServiceAccountRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EKSVPNCNIPolicyInput)(nil)).Elem(), EKSVPNCNIPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EKSVPNCNIPolicyPtrInput)(nil)).Elem(), EKSVPNCNIPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EKSVeleroPolicyInput)(nil)).Elem(), EKSVeleroPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EKSVeleroPolicyPtrInput)(nil)).Elem(), EKSVeleroPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FSxLustreCSIPolicyInput)(nil)).Elem(), FSxLustreCSIPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FSxLustreCSIPolicyPtrInput)(nil)).Elem(), FSxLustreCSIPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OIDCProviderInput)(nil)).Elem(), OIDCProviderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OIDCProviderMapInput)(nil)).Elem(), OIDCProviderMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*PoweruserRoleInput)(nil)).Elem(), PoweruserRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PoweruserRolePtrInput)(nil)).Elem(), PoweruserRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PoweruserRoleWithMFAInput)(nil)).Elem(), PoweruserRoleWithMFAArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PoweruserRoleWithMFAPtrInput)(nil)).Elem(), PoweruserRoleWithMFAArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReadonlyRoleInput)(nil)).Elem(), ReadonlyRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReadonlyRolePtrInput)(nil)).Elem(), ReadonlyRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReadonlyRoleWithMFAInput)(nil)).Elem(), ReadonlyRoleWithMFAArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReadonlyRoleWithMFAPtrInput)(nil)).Elem(), ReadonlyRoleWithMFAArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleInput)(nil)).Elem(), RoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RolePtrInput)(nil)).Elem(), RoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleWithMFAInput)(nil)).Elem(), RoleWithMFAArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleWithMFAPtrInput)(nil)).Elem(), RoleWithMFAArgs{})
	pulumi.RegisterOutputType(AccessKeyOutputOutput{})
	pulumi.RegisterOutputType(AccountPasswordPolicyOutput{})
	pulumi.RegisterOutputType(AdminRoleOutput{})
	pulumi.RegisterOutputType(AdminRolePtrOutput{})
	pulumi.RegisterOutputType(AdminRoleWithMFAOutput{})
	pulumi.RegisterOutputType(EKSAmazonManagedServicePrometheusPolicyOutput{})
	pulumi.RegisterOutputType(EKSAmazonManagedServicePrometheusPolicyPtrOutput{})
	pulumi.RegisterOutputType(EKSAppmeshPolicyOutput{})
	pulumi.RegisterOutputType(EKSAppmeshPolicyPtrOutput{})
	pulumi.RegisterOutputType(EKSCertManagerPolicyOutput{})
	pulumi.RegisterOutputType(EKSCertManagerPolicyPtrOutput{})
	pulumi.RegisterOutputType(EKSClusterAutoscalerPolicyOutput{})
	pulumi.RegisterOutputType(EKSClusterAutoscalerPolicyPtrOutput{})
	pulumi.RegisterOutputType(EKSEBSCSIPolicyOutput{})
	pulumi.RegisterOutputType(EKSEBSCSIPolicyPtrOutput{})
	pulumi.RegisterOutputType(EKSEFSCSIPolicyOutput{})
	pulumi.RegisterOutputType(EKSEFSCSIPolicyPtrOutput{})
	pulumi.RegisterOutputType(EKSExternalDNSPolicyOutput{})
	pulumi.RegisterOutputType(EKSExternalDNSPolicyPtrOutput{})
	pulumi.RegisterOutputType(EKSExternalSecretsPolicyOutput{})
	pulumi.RegisterOutputType(EKSExternalSecretsPolicyPtrOutput{})
	pulumi.RegisterOutputType(EKSKarpenterControllerPolicyOutput{})
	pulumi.RegisterOutputType(EKSKarpenterControllerPolicyPtrOutput{})
	pulumi.RegisterOutputType(EKSLoadBalancerPolicyOutput{})
	pulumi.RegisterOutputType(EKSLoadBalancerPolicyPtrOutput{})
	pulumi.RegisterOutputType(EKSNodeTerminationHandlerPolicyOutput{})
	pulumi.RegisterOutputType(EKSNodeTerminationHandlerPolicyPtrOutput{})
	pulumi.RegisterOutputType(EKSRolePoliciesOutput{})
	pulumi.RegisterOutputType(EKSRolePoliciesPtrOutput{})
	pulumi.RegisterOutputType(EKSServiceAccountOutput{})
	pulumi.RegisterOutputType(EKSServiceAccountArrayOutput{})
	pulumi.RegisterOutputType(EKSServiceAccountRoleOutput{})
	pulumi.RegisterOutputType(EKSServiceAccountRolePtrOutput{})
	pulumi.RegisterOutputType(EKSVPNCNIPolicyOutput{})
	pulumi.RegisterOutputType(EKSVPNCNIPolicyPtrOutput{})
	pulumi.RegisterOutputType(EKSVeleroPolicyOutput{})
	pulumi.RegisterOutputType(EKSVeleroPolicyPtrOutput{})
	pulumi.RegisterOutputType(FSxLustreCSIPolicyOutput{})
	pulumi.RegisterOutputType(FSxLustreCSIPolicyPtrOutput{})
	pulumi.RegisterOutputType(KeybaseOutputOutput{})
	pulumi.RegisterOutputType(OIDCProviderOutput{})
	pulumi.RegisterOutputType(OIDCProviderMapOutput{})
	pulumi.RegisterOutputType(PoweruserRoleOutput{})
	pulumi.RegisterOutputType(PoweruserRolePtrOutput{})
	pulumi.RegisterOutputType(PoweruserRoleWithMFAOutput{})
	pulumi.RegisterOutputType(PoweruserRoleWithMFAPtrOutput{})
	pulumi.RegisterOutputType(ReadonlyRoleOutput{})
	pulumi.RegisterOutputType(ReadonlyRolePtrOutput{})
	pulumi.RegisterOutputType(ReadonlyRoleWithMFAOutput{})
	pulumi.RegisterOutputType(ReadonlyRoleWithMFAPtrOutput{})
	pulumi.RegisterOutputType(RoleOutput{})
	pulumi.RegisterOutputType(RolePtrOutput{})
	pulumi.RegisterOutputType(RoleWithMFAOutput{})
	pulumi.RegisterOutputType(RoleWithMFAPtrOutput{})
	pulumi.RegisterOutputType(UserOutputTypeOutput{})
}
