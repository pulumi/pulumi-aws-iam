// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package awsiam

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resources allows you to create an IAM group with specified IAM policies,
// and then add specified users into your created group.
//
// ## Example Usage
// ## Group With Policies
//
// ```go
// package main
//
// import (
//
//	iam "github.com/pulumi/pulumi-aws-iam/sdk/go/aws-iam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//	    pulumi.Run(func(ctx *pulumi.Context) error {
//	        groupWithPolicies, err := iam.NewGroupWithPolicies(ctx, "group-with-policies", &iam.GroupWithPoliciesArgs{
//	            Name:                          pulumi.String("superadmins"),
//	            GroupUsers:                    pulumi.ToStringArray([]string{"user1", "user2"}),
//	            AttachIamSelfManagementPolicy: pulumi.BoolPtr(true),
//	            CustomGroupPolicyArns:         pulumi.ToStringArray([]string{"arn:aws:iam::aws:policy/AdministratorAccess"}),
//	            CustomGroupPolicies: pulumi.ToStringMapArray([]map[string]string{
//	                {
//	                    "name":   "AllowS3Listing",
//	                    "policy": "{}",
//	                },
//	            }),
//	        })
//	        if err != nil {
//	            return err
//	        }
//
//	        ctx.Export("groupWithPolicies", groupWithPolicies)
//
//	        return nil
//	    })
//	}
//
// ```
// {{ /example }}
type GroupWithPolicies struct {
	pulumi.ResourceState

	// IAM AWS account id.
	AwsAccountId pulumi.StringOutput `pulumi:"awsAccountId"`
	// IAM group arn.
	GroupArn pulumi.StringOutput `pulumi:"groupArn"`
	// IAM group name.
	GroupName pulumi.StringOutput `pulumi:"groupName"`
	// List of IAM users in IAM group
	GroupUsers pulumi.StringArrayOutput `pulumi:"groupUsers"`
}

// NewGroupWithPolicies registers a new resource with the given unique name, arguments, and options.
func NewGroupWithPolicies(ctx *pulumi.Context,
	name string, args *GroupWithPoliciesArgs, opts ...pulumi.ResourceOption) (*GroupWithPolicies, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupUsers == nil {
		return nil, errors.New("invalid value for required argument 'GroupUsers'")
	}
	if isZero(args.AttachIamSelfManagementPolicy) {
		args.AttachIamSelfManagementPolicy = pulumi.BoolPtr(true)
	}
	if isZero(args.AwsAccountId) {
		args.AwsAccountId = pulumi.StringPtr("")
	}
	if isZero(args.IamSelfManagementPolicyNamePrefix) {
		args.IamSelfManagementPolicyNamePrefix = pulumi.StringPtr("IAMSelfManagement-")
	}
	if isZero(args.Name) {
		args.Name = pulumi.String("")
	}
	var resource GroupWithPolicies
	err := ctx.RegisterRemoteComponentResource("aws-iam:index:GroupWithPolicies", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type groupWithPoliciesArgs struct {
	// Whether to attach IAM policy which allows IAM users to manage their credentials and MFA.
	AttachIamSelfManagementPolicy *bool `pulumi:"attachIamSelfManagementPolicy"`
	// AWS account id to use inside IAM policies. If empty, current AWS account ID will be used.
	AwsAccountId *string `pulumi:"awsAccountId"`
	// List of maps of inline IAM policies to attach to IAM group. Should have `name` and `policy` keys in each element.
	CustomGroupPolicies []map[string]string `pulumi:"customGroupPolicies"`
	// List of IAM policies ARNs to attach to IAM group.
	CustomGroupPolicyArns []string `pulumi:"customGroupPolicyArns"`
	// List of IAM users to have in an IAM group which can assume the role.
	GroupUsers []string `pulumi:"groupUsers"`
	// Name prefix for IAM policy to create with IAM self-management permissions.
	IamSelfManagementPolicyNamePrefix *string `pulumi:"iamSelfManagementPolicyNamePrefix"`
	// Name of IAM group.
	Name string `pulumi:"name"`
	// A map of tags to add.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a GroupWithPolicies resource.
type GroupWithPoliciesArgs struct {
	// Whether to attach IAM policy which allows IAM users to manage their credentials and MFA.
	AttachIamSelfManagementPolicy pulumi.BoolPtrInput
	// AWS account id to use inside IAM policies. If empty, current AWS account ID will be used.
	AwsAccountId pulumi.StringPtrInput
	// List of maps of inline IAM policies to attach to IAM group. Should have `name` and `policy` keys in each element.
	CustomGroupPolicies pulumi.StringMapArrayInput
	// List of IAM policies ARNs to attach to IAM group.
	CustomGroupPolicyArns pulumi.StringArrayInput
	// List of IAM users to have in an IAM group which can assume the role.
	GroupUsers pulumi.StringArrayInput
	// Name prefix for IAM policy to create with IAM self-management permissions.
	IamSelfManagementPolicyNamePrefix pulumi.StringPtrInput
	// Name of IAM group.
	Name pulumi.StringInput
	// A map of tags to add.
	Tags pulumi.StringMapInput
}

func (GroupWithPoliciesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupWithPoliciesArgs)(nil)).Elem()
}

type GroupWithPoliciesInput interface {
	pulumi.Input

	ToGroupWithPoliciesOutput() GroupWithPoliciesOutput
	ToGroupWithPoliciesOutputWithContext(ctx context.Context) GroupWithPoliciesOutput
}

func (*GroupWithPolicies) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupWithPolicies)(nil)).Elem()
}

func (i *GroupWithPolicies) ToGroupWithPoliciesOutput() GroupWithPoliciesOutput {
	return i.ToGroupWithPoliciesOutputWithContext(context.Background())
}

func (i *GroupWithPolicies) ToGroupWithPoliciesOutputWithContext(ctx context.Context) GroupWithPoliciesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupWithPoliciesOutput)
}

// GroupWithPoliciesArrayInput is an input type that accepts GroupWithPoliciesArray and GroupWithPoliciesArrayOutput values.
// You can construct a concrete instance of `GroupWithPoliciesArrayInput` via:
//
//	GroupWithPoliciesArray{ GroupWithPoliciesArgs{...} }
type GroupWithPoliciesArrayInput interface {
	pulumi.Input

	ToGroupWithPoliciesArrayOutput() GroupWithPoliciesArrayOutput
	ToGroupWithPoliciesArrayOutputWithContext(context.Context) GroupWithPoliciesArrayOutput
}

type GroupWithPoliciesArray []GroupWithPoliciesInput

func (GroupWithPoliciesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupWithPolicies)(nil)).Elem()
}

func (i GroupWithPoliciesArray) ToGroupWithPoliciesArrayOutput() GroupWithPoliciesArrayOutput {
	return i.ToGroupWithPoliciesArrayOutputWithContext(context.Background())
}

func (i GroupWithPoliciesArray) ToGroupWithPoliciesArrayOutputWithContext(ctx context.Context) GroupWithPoliciesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupWithPoliciesArrayOutput)
}

// GroupWithPoliciesMapInput is an input type that accepts GroupWithPoliciesMap and GroupWithPoliciesMapOutput values.
// You can construct a concrete instance of `GroupWithPoliciesMapInput` via:
//
//	GroupWithPoliciesMap{ "key": GroupWithPoliciesArgs{...} }
type GroupWithPoliciesMapInput interface {
	pulumi.Input

	ToGroupWithPoliciesMapOutput() GroupWithPoliciesMapOutput
	ToGroupWithPoliciesMapOutputWithContext(context.Context) GroupWithPoliciesMapOutput
}

type GroupWithPoliciesMap map[string]GroupWithPoliciesInput

func (GroupWithPoliciesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupWithPolicies)(nil)).Elem()
}

func (i GroupWithPoliciesMap) ToGroupWithPoliciesMapOutput() GroupWithPoliciesMapOutput {
	return i.ToGroupWithPoliciesMapOutputWithContext(context.Background())
}

func (i GroupWithPoliciesMap) ToGroupWithPoliciesMapOutputWithContext(ctx context.Context) GroupWithPoliciesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupWithPoliciesMapOutput)
}

type GroupWithPoliciesOutput struct{ *pulumi.OutputState }

func (GroupWithPoliciesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupWithPolicies)(nil)).Elem()
}

func (o GroupWithPoliciesOutput) ToGroupWithPoliciesOutput() GroupWithPoliciesOutput {
	return o
}

func (o GroupWithPoliciesOutput) ToGroupWithPoliciesOutputWithContext(ctx context.Context) GroupWithPoliciesOutput {
	return o
}

// IAM AWS account id.
func (o GroupWithPoliciesOutput) AwsAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupWithPolicies) pulumi.StringOutput { return v.AwsAccountId }).(pulumi.StringOutput)
}

// IAM group arn.
func (o GroupWithPoliciesOutput) GroupArn() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupWithPolicies) pulumi.StringOutput { return v.GroupArn }).(pulumi.StringOutput)
}

// IAM group name.
func (o GroupWithPoliciesOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupWithPolicies) pulumi.StringOutput { return v.GroupName }).(pulumi.StringOutput)
}

// List of IAM users in IAM group
func (o GroupWithPoliciesOutput) GroupUsers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GroupWithPolicies) pulumi.StringArrayOutput { return v.GroupUsers }).(pulumi.StringArrayOutput)
}

type GroupWithPoliciesArrayOutput struct{ *pulumi.OutputState }

func (GroupWithPoliciesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupWithPolicies)(nil)).Elem()
}

func (o GroupWithPoliciesArrayOutput) ToGroupWithPoliciesArrayOutput() GroupWithPoliciesArrayOutput {
	return o
}

func (o GroupWithPoliciesArrayOutput) ToGroupWithPoliciesArrayOutputWithContext(ctx context.Context) GroupWithPoliciesArrayOutput {
	return o
}

func (o GroupWithPoliciesArrayOutput) Index(i pulumi.IntInput) GroupWithPoliciesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GroupWithPolicies {
		return vs[0].([]*GroupWithPolicies)[vs[1].(int)]
	}).(GroupWithPoliciesOutput)
}

type GroupWithPoliciesMapOutput struct{ *pulumi.OutputState }

func (GroupWithPoliciesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupWithPolicies)(nil)).Elem()
}

func (o GroupWithPoliciesMapOutput) ToGroupWithPoliciesMapOutput() GroupWithPoliciesMapOutput {
	return o
}

func (o GroupWithPoliciesMapOutput) ToGroupWithPoliciesMapOutputWithContext(ctx context.Context) GroupWithPoliciesMapOutput {
	return o
}

func (o GroupWithPoliciesMapOutput) MapIndex(k pulumi.StringInput) GroupWithPoliciesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GroupWithPolicies {
		return vs[0].(map[string]*GroupWithPolicies)[vs[1].(string)]
	}).(GroupWithPoliciesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupWithPoliciesInput)(nil)).Elem(), &GroupWithPolicies{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupWithPoliciesArrayInput)(nil)).Elem(), GroupWithPoliciesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupWithPoliciesMapInput)(nil)).Elem(), GroupWithPoliciesMap{})
	pulumi.RegisterOutputType(GroupWithPoliciesOutput{})
	pulumi.RegisterOutputType(GroupWithPoliciesArrayOutput{})
	pulumi.RegisterOutputType(GroupWithPoliciesMapOutput{})
}
