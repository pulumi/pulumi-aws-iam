// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package awsiam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-iam/sdk/go/aws-iam/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource helps you create a single IAM Role which can be assumed by trusted
// resources using SAML Federated Users.
//
// ## Example Usage
// ## Assumable Role With SAML
//
// ```go
// package main
//
// import (
//
//	iam "github.com/pulumi/pulumi-aws-iam/sdk/go/aws-iam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//	    pulumi.Run(func(ctx *pulumi.Context) error {
//	        assumableRoleWithSAML, err := iam.NewAssumableRoleWithSAML(ctx, "assumable-role-with-saml", &iam.AssumableRoleWithSAMLArgs{
//	            Role: iam.RoleArgs{
//	                Name:       pulumi.String("saml-role"),
//	                PolicyArns: pulumi.ToStringArray([]string{"arn:aws:iam::aws:policy/ReadOnlyAccess"}),
//	            },
//	            Tags: pulumi.ToStringMap(map[string]string{
//	                "Role": "saml-role",
//	            }),
//	            ProviderIds: pulumi.ToStringArray([]string{"arn:aws:iam::235367859851:saml-provider/idp_saml"}),
//	        })
//	        if err != nil {
//	            return err
//	        }
//
//	        ctx.Export("assumableRoleWithSAML", assumableRoleWithSAML)
//
//	        return nil
//	    })
//	}
//
// ```
// {{ /example }}
type AssumableRoleWithSAML struct {
	pulumi.ResourceState

	// ARN of IAM role.
	RoleArn pulumi.StringOutput `pulumi:"roleArn"`
	// Name of IAM role.
	RoleName pulumi.StringOutput `pulumi:"roleName"`
	// Path of IAM role.
	RolePath pulumi.StringOutput `pulumi:"rolePath"`
	// Unique ID of IAM role.
	RoleUniqueId pulumi.StringOutput `pulumi:"roleUniqueId"`
}

// NewAssumableRoleWithSAML registers a new resource with the given unique name, arguments, and options.
func NewAssumableRoleWithSAML(ctx *pulumi.Context,
	name string, args *AssumableRoleWithSAMLArgs, opts ...pulumi.ResourceOption) (*AssumableRoleWithSAML, error) {
	if args == nil {
		args = &AssumableRoleWithSAMLArgs{}
	}

	if args.AwsSamlEndpoint == nil {
		args.AwsSamlEndpoint = pulumi.StringPtr("https://signin.aws.amazon.com/saml")
	}
	if args.ForceDetachPolicies == nil {
		args.ForceDetachPolicies = pulumi.BoolPtr(false)
	}
	if args.MaxSessionDuration == nil {
		args.MaxSessionDuration = pulumi.IntPtr(3600)
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AssumableRoleWithSAML
	err := ctx.RegisterRemoteComponentResource("aws-iam:index:AssumableRoleWithSAML", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type assumableRoleWithSAMLArgs struct {
	// AWS SAML Endpoint.
	AwsSamlEndpoint *string `pulumi:"awsSamlEndpoint"`
	// Whether policies should be detached from this role when destroying.
	ForceDetachPolicies *bool `pulumi:"forceDetachPolicies"`
	// Maximum CLI/API session duration in seconds between 3600 and 43200.
	MaxSessionDuration *int `pulumi:"maxSessionDuration"`
	// List of SAML Provider IDs.
	ProviderIds []string `pulumi:"providerIds"`
	Role        *Role    `pulumi:"role"`
	// A map of tags to add.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a AssumableRoleWithSAML resource.
type AssumableRoleWithSAMLArgs struct {
	// AWS SAML Endpoint.
	AwsSamlEndpoint pulumi.StringPtrInput
	// Whether policies should be detached from this role when destroying.
	ForceDetachPolicies pulumi.BoolPtrInput
	// Maximum CLI/API session duration in seconds between 3600 and 43200.
	MaxSessionDuration pulumi.IntPtrInput
	// List of SAML Provider IDs.
	ProviderIds pulumi.StringArrayInput
	Role        RolePtrInput
	// A map of tags to add.
	Tags pulumi.StringMapInput
}

func (AssumableRoleWithSAMLArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*assumableRoleWithSAMLArgs)(nil)).Elem()
}

type AssumableRoleWithSAMLInput interface {
	pulumi.Input

	ToAssumableRoleWithSAMLOutput() AssumableRoleWithSAMLOutput
	ToAssumableRoleWithSAMLOutputWithContext(ctx context.Context) AssumableRoleWithSAMLOutput
}

func (*AssumableRoleWithSAML) ElementType() reflect.Type {
	return reflect.TypeOf((**AssumableRoleWithSAML)(nil)).Elem()
}

func (i *AssumableRoleWithSAML) ToAssumableRoleWithSAMLOutput() AssumableRoleWithSAMLOutput {
	return i.ToAssumableRoleWithSAMLOutputWithContext(context.Background())
}

func (i *AssumableRoleWithSAML) ToAssumableRoleWithSAMLOutputWithContext(ctx context.Context) AssumableRoleWithSAMLOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssumableRoleWithSAMLOutput)
}

// AssumableRoleWithSAMLArrayInput is an input type that accepts AssumableRoleWithSAMLArray and AssumableRoleWithSAMLArrayOutput values.
// You can construct a concrete instance of `AssumableRoleWithSAMLArrayInput` via:
//
//	AssumableRoleWithSAMLArray{ AssumableRoleWithSAMLArgs{...} }
type AssumableRoleWithSAMLArrayInput interface {
	pulumi.Input

	ToAssumableRoleWithSAMLArrayOutput() AssumableRoleWithSAMLArrayOutput
	ToAssumableRoleWithSAMLArrayOutputWithContext(context.Context) AssumableRoleWithSAMLArrayOutput
}

type AssumableRoleWithSAMLArray []AssumableRoleWithSAMLInput

func (AssumableRoleWithSAMLArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AssumableRoleWithSAML)(nil)).Elem()
}

func (i AssumableRoleWithSAMLArray) ToAssumableRoleWithSAMLArrayOutput() AssumableRoleWithSAMLArrayOutput {
	return i.ToAssumableRoleWithSAMLArrayOutputWithContext(context.Background())
}

func (i AssumableRoleWithSAMLArray) ToAssumableRoleWithSAMLArrayOutputWithContext(ctx context.Context) AssumableRoleWithSAMLArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssumableRoleWithSAMLArrayOutput)
}

// AssumableRoleWithSAMLMapInput is an input type that accepts AssumableRoleWithSAMLMap and AssumableRoleWithSAMLMapOutput values.
// You can construct a concrete instance of `AssumableRoleWithSAMLMapInput` via:
//
//	AssumableRoleWithSAMLMap{ "key": AssumableRoleWithSAMLArgs{...} }
type AssumableRoleWithSAMLMapInput interface {
	pulumi.Input

	ToAssumableRoleWithSAMLMapOutput() AssumableRoleWithSAMLMapOutput
	ToAssumableRoleWithSAMLMapOutputWithContext(context.Context) AssumableRoleWithSAMLMapOutput
}

type AssumableRoleWithSAMLMap map[string]AssumableRoleWithSAMLInput

func (AssumableRoleWithSAMLMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AssumableRoleWithSAML)(nil)).Elem()
}

func (i AssumableRoleWithSAMLMap) ToAssumableRoleWithSAMLMapOutput() AssumableRoleWithSAMLMapOutput {
	return i.ToAssumableRoleWithSAMLMapOutputWithContext(context.Background())
}

func (i AssumableRoleWithSAMLMap) ToAssumableRoleWithSAMLMapOutputWithContext(ctx context.Context) AssumableRoleWithSAMLMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssumableRoleWithSAMLMapOutput)
}

type AssumableRoleWithSAMLOutput struct{ *pulumi.OutputState }

func (AssumableRoleWithSAMLOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssumableRoleWithSAML)(nil)).Elem()
}

func (o AssumableRoleWithSAMLOutput) ToAssumableRoleWithSAMLOutput() AssumableRoleWithSAMLOutput {
	return o
}

func (o AssumableRoleWithSAMLOutput) ToAssumableRoleWithSAMLOutputWithContext(ctx context.Context) AssumableRoleWithSAMLOutput {
	return o
}

// ARN of IAM role.
func (o AssumableRoleWithSAMLOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *AssumableRoleWithSAML) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

// Name of IAM role.
func (o AssumableRoleWithSAMLOutput) RoleName() pulumi.StringOutput {
	return o.ApplyT(func(v *AssumableRoleWithSAML) pulumi.StringOutput { return v.RoleName }).(pulumi.StringOutput)
}

// Path of IAM role.
func (o AssumableRoleWithSAMLOutput) RolePath() pulumi.StringOutput {
	return o.ApplyT(func(v *AssumableRoleWithSAML) pulumi.StringOutput { return v.RolePath }).(pulumi.StringOutput)
}

// Unique ID of IAM role.
func (o AssumableRoleWithSAMLOutput) RoleUniqueId() pulumi.StringOutput {
	return o.ApplyT(func(v *AssumableRoleWithSAML) pulumi.StringOutput { return v.RoleUniqueId }).(pulumi.StringOutput)
}

type AssumableRoleWithSAMLArrayOutput struct{ *pulumi.OutputState }

func (AssumableRoleWithSAMLArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AssumableRoleWithSAML)(nil)).Elem()
}

func (o AssumableRoleWithSAMLArrayOutput) ToAssumableRoleWithSAMLArrayOutput() AssumableRoleWithSAMLArrayOutput {
	return o
}

func (o AssumableRoleWithSAMLArrayOutput) ToAssumableRoleWithSAMLArrayOutputWithContext(ctx context.Context) AssumableRoleWithSAMLArrayOutput {
	return o
}

func (o AssumableRoleWithSAMLArrayOutput) Index(i pulumi.IntInput) AssumableRoleWithSAMLOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AssumableRoleWithSAML {
		return vs[0].([]*AssumableRoleWithSAML)[vs[1].(int)]
	}).(AssumableRoleWithSAMLOutput)
}

type AssumableRoleWithSAMLMapOutput struct{ *pulumi.OutputState }

func (AssumableRoleWithSAMLMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AssumableRoleWithSAML)(nil)).Elem()
}

func (o AssumableRoleWithSAMLMapOutput) ToAssumableRoleWithSAMLMapOutput() AssumableRoleWithSAMLMapOutput {
	return o
}

func (o AssumableRoleWithSAMLMapOutput) ToAssumableRoleWithSAMLMapOutputWithContext(ctx context.Context) AssumableRoleWithSAMLMapOutput {
	return o
}

func (o AssumableRoleWithSAMLMapOutput) MapIndex(k pulumi.StringInput) AssumableRoleWithSAMLOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AssumableRoleWithSAML {
		return vs[0].(map[string]*AssumableRoleWithSAML)[vs[1].(string)]
	}).(AssumableRoleWithSAMLOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AssumableRoleWithSAMLInput)(nil)).Elem(), &AssumableRoleWithSAML{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssumableRoleWithSAMLArrayInput)(nil)).Elem(), AssumableRoleWithSAMLArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssumableRoleWithSAMLMapInput)(nil)).Elem(), AssumableRoleWithSAMLMap{})
	pulumi.RegisterOutputType(AssumableRoleWithSAMLOutput{})
	pulumi.RegisterOutputType(AssumableRoleWithSAMLArrayOutput{})
	pulumi.RegisterOutputType(AssumableRoleWithSAMLMapOutput{})
}
