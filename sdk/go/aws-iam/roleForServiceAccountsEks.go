// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package awsiam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-iam/sdk/go/aws-iam/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resources helps you create an IAM role which can be assumed by AWS EKS ServiceAccounts with optional policies for
// commonly used controllers/custom resources within EKS. The optional policies you can specify are:
//
// - Cert-Manager
// - Cluster Autoscaler
// - EBS CSI Driver
// - EFS CSI Driver
// - External DNS
// - External Secrets
// - FSx for Lustre CSI Driver
// - Karpenter
// - Load Balancer Controller
// - Load Balancer Controller Target Group Binding Only
// - App Mesh Controller
// - App Mesh Envoy Proxy
// - Managed Service for Prometheus
// - Node Termination Handler
// - Velero
// - VPC CNI
//
// ## Example Usage
// ## VPC CNI
//
// ```go
// package main
//
// import (
//
//	iam "github.com/pulumi/pulumi-aws-iam/sdk/go/aws-iam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//	    pulumi.Run(func(ctx *pulumi.Context) error {
//	        roleForServiceAccountsEKS, err := iam.NewRoleForServiceAccountsEks(ctx, "role-for-service-accounts-eks", &iam.RoleForServiceAccountsEksArgs{
//	            Role: iam.EKSServiceAccountRolePtr(&iam.EKSServiceAccountRoleArgs{
//	                Name: pulumi.String("vpc-cni"),
//	            }),
//	            Tags: pulumi.ToStringMap(map[string]string{
//	                "Name": "vpc-cni-irsa",
//	            }),
//	            OidcProviders: iam.OIDCProviderMap{
//	                "main": iam.OIDCProviderArgs{
//	                    ProviderArn:              pulumi.String("arn:aws:iam::012345678901:oidc-provider/oidc.eks.us-east-1.amazonaws.com/id/5C54DDF35ER19312844C7333374CC09D"),
//	                    NamespaceServiceAccounts: pulumi.ToStringArray([]string{"default:my-app", "canary:my-app"}),
//	                },
//	            },
//	            Policies: iam.EKSRolePoliciesPtr(&iam.EKSRolePoliciesArgs{
//	                VpnCni: iam.EKSVPNCNIPolicyPtr(&iam.EKSVPNCNIPolicyArgs{
//	                    Attach:     pulumi.Bool(true),
//	                    EnableIpv4: pulumi.BoolPtr(true),
//	                }),
//	            }),
//	        })
//	        if err != nil {
//	            return err
//	        }
//
//	        ctx.Export("roleForServiceAccountsEKS", roleForServiceAccountsEKS)
//
//	        return nil
//	    })
//	}
//
// ```
// {{ /example }}
type RoleForServiceAccountsEks struct {
	pulumi.ResourceState

	Role pulumi.StringMapOutput `pulumi:"role"`
}

// NewRoleForServiceAccountsEks registers a new resource with the given unique name, arguments, and options.
func NewRoleForServiceAccountsEks(ctx *pulumi.Context,
	name string, args *RoleForServiceAccountsEksArgs, opts ...pulumi.ResourceOption) (*RoleForServiceAccountsEks, error) {
	if args == nil {
		args = &RoleForServiceAccountsEksArgs{}
	}

	if args.AssumeRoleConditionTest == nil {
		args.AssumeRoleConditionTest = pulumi.StringPtr("StringEquals")
	}
	if args.ForceDetachPolicies == nil {
		args.ForceDetachPolicies = pulumi.BoolPtr(false)
	}
	if args.MaxSessionDuration == nil {
		args.MaxSessionDuration = pulumi.IntPtr(3600)
	}
	if args.Policies != nil {
		args.Policies = args.Policies.ToEKSRolePoliciesPtrOutput().ApplyT(func(v *EKSRolePolicies) *EKSRolePolicies { return v.Defaults() }).(EKSRolePoliciesPtrOutput)
	}
	if args.PolicyNamePrefix == nil {
		args.PolicyNamePrefix = pulumi.StringPtr("AmazonEKS_")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RoleForServiceAccountsEks
	err := ctx.RegisterRemoteComponentResource("aws-iam:index:RoleForServiceAccountsEks", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type roleForServiceAccountsEksArgs struct {
	// Name of the IAM condition operator to evaluate when assuming the role.
	AssumeRoleConditionTest *string `pulumi:"assumeRoleConditionTest"`
	// Whether policies should be detached from this role when destroying.
	ForceDetachPolicies *bool `pulumi:"forceDetachPolicies"`
	// Maximum CLI/API session duration in seconds between 3600 and 43200.
	MaxSessionDuration *int `pulumi:"maxSessionDuration"`
	// Map of OIDC providers.
	OidcProviders map[string]OIDCProvider `pulumi:"oidcProviders"`
	Policies      *EKSRolePolicies        `pulumi:"policies"`
	// IAM policy name prefix.
	PolicyNamePrefix *string                `pulumi:"policyNamePrefix"`
	Role             *EKSServiceAccountRole `pulumi:"role"`
	// A map of tags to add.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a RoleForServiceAccountsEks resource.
type RoleForServiceAccountsEksArgs struct {
	// Name of the IAM condition operator to evaluate when assuming the role.
	AssumeRoleConditionTest pulumi.StringPtrInput
	// Whether policies should be detached from this role when destroying.
	ForceDetachPolicies pulumi.BoolPtrInput
	// Maximum CLI/API session duration in seconds between 3600 and 43200.
	MaxSessionDuration pulumi.IntPtrInput
	// Map of OIDC providers.
	OidcProviders OIDCProviderMapInput
	Policies      EKSRolePoliciesPtrInput
	// IAM policy name prefix.
	PolicyNamePrefix pulumi.StringPtrInput
	Role             EKSServiceAccountRolePtrInput
	// A map of tags to add.
	Tags pulumi.StringMapInput
}

func (RoleForServiceAccountsEksArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*roleForServiceAccountsEksArgs)(nil)).Elem()
}

type RoleForServiceAccountsEksInput interface {
	pulumi.Input

	ToRoleForServiceAccountsEksOutput() RoleForServiceAccountsEksOutput
	ToRoleForServiceAccountsEksOutputWithContext(ctx context.Context) RoleForServiceAccountsEksOutput
}

func (*RoleForServiceAccountsEks) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleForServiceAccountsEks)(nil)).Elem()
}

func (i *RoleForServiceAccountsEks) ToRoleForServiceAccountsEksOutput() RoleForServiceAccountsEksOutput {
	return i.ToRoleForServiceAccountsEksOutputWithContext(context.Background())
}

func (i *RoleForServiceAccountsEks) ToRoleForServiceAccountsEksOutputWithContext(ctx context.Context) RoleForServiceAccountsEksOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleForServiceAccountsEksOutput)
}

// RoleForServiceAccountsEksArrayInput is an input type that accepts RoleForServiceAccountsEksArray and RoleForServiceAccountsEksArrayOutput values.
// You can construct a concrete instance of `RoleForServiceAccountsEksArrayInput` via:
//
//	RoleForServiceAccountsEksArray{ RoleForServiceAccountsEksArgs{...} }
type RoleForServiceAccountsEksArrayInput interface {
	pulumi.Input

	ToRoleForServiceAccountsEksArrayOutput() RoleForServiceAccountsEksArrayOutput
	ToRoleForServiceAccountsEksArrayOutputWithContext(context.Context) RoleForServiceAccountsEksArrayOutput
}

type RoleForServiceAccountsEksArray []RoleForServiceAccountsEksInput

func (RoleForServiceAccountsEksArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoleForServiceAccountsEks)(nil)).Elem()
}

func (i RoleForServiceAccountsEksArray) ToRoleForServiceAccountsEksArrayOutput() RoleForServiceAccountsEksArrayOutput {
	return i.ToRoleForServiceAccountsEksArrayOutputWithContext(context.Background())
}

func (i RoleForServiceAccountsEksArray) ToRoleForServiceAccountsEksArrayOutputWithContext(ctx context.Context) RoleForServiceAccountsEksArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleForServiceAccountsEksArrayOutput)
}

// RoleForServiceAccountsEksMapInput is an input type that accepts RoleForServiceAccountsEksMap and RoleForServiceAccountsEksMapOutput values.
// You can construct a concrete instance of `RoleForServiceAccountsEksMapInput` via:
//
//	RoleForServiceAccountsEksMap{ "key": RoleForServiceAccountsEksArgs{...} }
type RoleForServiceAccountsEksMapInput interface {
	pulumi.Input

	ToRoleForServiceAccountsEksMapOutput() RoleForServiceAccountsEksMapOutput
	ToRoleForServiceAccountsEksMapOutputWithContext(context.Context) RoleForServiceAccountsEksMapOutput
}

type RoleForServiceAccountsEksMap map[string]RoleForServiceAccountsEksInput

func (RoleForServiceAccountsEksMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoleForServiceAccountsEks)(nil)).Elem()
}

func (i RoleForServiceAccountsEksMap) ToRoleForServiceAccountsEksMapOutput() RoleForServiceAccountsEksMapOutput {
	return i.ToRoleForServiceAccountsEksMapOutputWithContext(context.Background())
}

func (i RoleForServiceAccountsEksMap) ToRoleForServiceAccountsEksMapOutputWithContext(ctx context.Context) RoleForServiceAccountsEksMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleForServiceAccountsEksMapOutput)
}

type RoleForServiceAccountsEksOutput struct{ *pulumi.OutputState }

func (RoleForServiceAccountsEksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleForServiceAccountsEks)(nil)).Elem()
}

func (o RoleForServiceAccountsEksOutput) ToRoleForServiceAccountsEksOutput() RoleForServiceAccountsEksOutput {
	return o
}

func (o RoleForServiceAccountsEksOutput) ToRoleForServiceAccountsEksOutputWithContext(ctx context.Context) RoleForServiceAccountsEksOutput {
	return o
}

func (o RoleForServiceAccountsEksOutput) Role() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RoleForServiceAccountsEks) pulumi.StringMapOutput { return v.Role }).(pulumi.StringMapOutput)
}

type RoleForServiceAccountsEksArrayOutput struct{ *pulumi.OutputState }

func (RoleForServiceAccountsEksArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoleForServiceAccountsEks)(nil)).Elem()
}

func (o RoleForServiceAccountsEksArrayOutput) ToRoleForServiceAccountsEksArrayOutput() RoleForServiceAccountsEksArrayOutput {
	return o
}

func (o RoleForServiceAccountsEksArrayOutput) ToRoleForServiceAccountsEksArrayOutputWithContext(ctx context.Context) RoleForServiceAccountsEksArrayOutput {
	return o
}

func (o RoleForServiceAccountsEksArrayOutput) Index(i pulumi.IntInput) RoleForServiceAccountsEksOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RoleForServiceAccountsEks {
		return vs[0].([]*RoleForServiceAccountsEks)[vs[1].(int)]
	}).(RoleForServiceAccountsEksOutput)
}

type RoleForServiceAccountsEksMapOutput struct{ *pulumi.OutputState }

func (RoleForServiceAccountsEksMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoleForServiceAccountsEks)(nil)).Elem()
}

func (o RoleForServiceAccountsEksMapOutput) ToRoleForServiceAccountsEksMapOutput() RoleForServiceAccountsEksMapOutput {
	return o
}

func (o RoleForServiceAccountsEksMapOutput) ToRoleForServiceAccountsEksMapOutputWithContext(ctx context.Context) RoleForServiceAccountsEksMapOutput {
	return o
}

func (o RoleForServiceAccountsEksMapOutput) MapIndex(k pulumi.StringInput) RoleForServiceAccountsEksOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RoleForServiceAccountsEks {
		return vs[0].(map[string]*RoleForServiceAccountsEks)[vs[1].(string)]
	}).(RoleForServiceAccountsEksOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoleForServiceAccountsEksInput)(nil)).Elem(), &RoleForServiceAccountsEks{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleForServiceAccountsEksArrayInput)(nil)).Elem(), RoleForServiceAccountsEksArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleForServiceAccountsEksMapInput)(nil)).Elem(), RoleForServiceAccountsEksMap{})
	pulumi.RegisterOutputType(RoleForServiceAccountsEksOutput{})
	pulumi.RegisterOutputType(RoleForServiceAccountsEksArrayOutput{})
	pulumi.RegisterOutputType(RoleForServiceAccountsEksMapOutput{})
}
