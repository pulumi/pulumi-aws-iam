// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package awsiam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resources helps you create a single IAM role which can be assume by trusted
// resources using OpenID Connect Federated Users.
//
// ## Example Usage
// ## Assumable Role With OIDC
//
// ```go
// package main
//
// import (
//
//	iam "github.com/pulumi/pulumi-aws-iam/sdk/go/aws-iam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//	    pulumi.Run(func(ctx *pulumi.Context) error {
//	        assumableRoleWithOIDC, err := iam.NewAssumableRoleWithOIDC(ctx, "assumable-role-with-oidc", &iam.AssumableRoleWithOIDCArgs{
//	            Role: iam.RoleArgs{
//	                Name:       pulumi.String("oidc-role"),
//	                PolicyArns: pulumi.ToStringArray([]string{"arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"}),
//	            },
//	            Tags: pulumi.ToStringMap(map[string]string{
//	                "Role": "oidc-role",
//	            }),
//	            ProviderUrls: pulumi.ToStringArray([]string{"oidc.eks.eu-west-1.amazonaws.com/id/BA9E170D464AF7B92084EF72A69B9DC8"}),
//	        })
//	        if err != nil {
//	            return err
//	        }
//
//	        ctx.Export("assumableRoleWithOIDC", assumableRoleWithOIDC)
//
//	        return nil
//	    })
//	}
//
// ```
// {{ /example }}
type AssumableRoleWithOIDC struct {
	pulumi.ResourceState

	// ARN of IAM role.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Name of IAM role.
	Name pulumi.StringOutput `pulumi:"name"`
	// Path of IAM role.
	Path pulumi.StringOutput `pulumi:"path"`
	// Unique ID of IAM role.
	UniqueId pulumi.StringOutput `pulumi:"uniqueId"`
}

// NewAssumableRoleWithOIDC registers a new resource with the given unique name, arguments, and options.
func NewAssumableRoleWithOIDC(ctx *pulumi.Context,
	name string, args *AssumableRoleWithOIDCArgs, opts ...pulumi.ResourceOption) (*AssumableRoleWithOIDC, error) {
	if args == nil {
		args = &AssumableRoleWithOIDCArgs{}
	}

	if isZero(args.AwsAccountId) {
		args.AwsAccountId = pulumi.StringPtr("")
	}
	if isZero(args.ForceDetachPolicies) {
		args.ForceDetachPolicies = pulumi.BoolPtr(false)
	}
	if isZero(args.MaxSessionDuration) {
		args.MaxSessionDuration = pulumi.IntPtr(3600)
	}
	var resource AssumableRoleWithOIDC
	err := ctx.RegisterRemoteComponentResource("aws-iam:index:AssumableRoleWithOIDC", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type assumableRoleWithOIDCArgs struct {
	// The AWS account ID where the OIDC provider lives, leave empty to use the account for the AWS provider.
	AwsAccountId *string `pulumi:"awsAccountId"`
	// Whether policies should be detached from this role when destroying.
	ForceDetachPolicies *bool `pulumi:"forceDetachPolicies"`
	// Maximum CLI/API session duration in seconds between 3600 and 43200.
	MaxSessionDuration *int `pulumi:"maxSessionDuration"`
	// The audience to be added to the role policy. Set to sts.amazonaws.com for cross-account assumable role. Leave empty otherwise.
	OidcFullyQualifiedAudiences []string `pulumi:"oidcFullyQualifiedAudiences"`
	// The fully qualified OIDC subjects to be added to the role policy.
	OidcFullyQualifiedSubjects []string `pulumi:"oidcFullyQualifiedSubjects"`
	// The OIDC subject using wildcards to be added to the role policy.
	OidcSubjectsWithWildcards []string `pulumi:"oidcSubjectsWithWildcards"`
	// List of URLs of the OIDC Providers.
	ProviderUrls []string `pulumi:"providerUrls"`
	// The IAM role.
	Role *Role `pulumi:"role"`
	// A map of tags to add.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a AssumableRoleWithOIDC resource.
type AssumableRoleWithOIDCArgs struct {
	// The AWS account ID where the OIDC provider lives, leave empty to use the account for the AWS provider.
	AwsAccountId pulumi.StringPtrInput
	// Whether policies should be detached from this role when destroying.
	ForceDetachPolicies pulumi.BoolPtrInput
	// Maximum CLI/API session duration in seconds between 3600 and 43200.
	MaxSessionDuration pulumi.IntPtrInput
	// The audience to be added to the role policy. Set to sts.amazonaws.com for cross-account assumable role. Leave empty otherwise.
	OidcFullyQualifiedAudiences pulumi.StringArrayInput
	// The fully qualified OIDC subjects to be added to the role policy.
	OidcFullyQualifiedSubjects pulumi.StringArrayInput
	// The OIDC subject using wildcards to be added to the role policy.
	OidcSubjectsWithWildcards pulumi.StringArrayInput
	// List of URLs of the OIDC Providers.
	ProviderUrls pulumi.StringArrayInput
	// The IAM role.
	Role RolePtrInput
	// A map of tags to add.
	Tags pulumi.StringMapInput
}

func (AssumableRoleWithOIDCArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*assumableRoleWithOIDCArgs)(nil)).Elem()
}

type AssumableRoleWithOIDCInput interface {
	pulumi.Input

	ToAssumableRoleWithOIDCOutput() AssumableRoleWithOIDCOutput
	ToAssumableRoleWithOIDCOutputWithContext(ctx context.Context) AssumableRoleWithOIDCOutput
}

func (*AssumableRoleWithOIDC) ElementType() reflect.Type {
	return reflect.TypeOf((**AssumableRoleWithOIDC)(nil)).Elem()
}

func (i *AssumableRoleWithOIDC) ToAssumableRoleWithOIDCOutput() AssumableRoleWithOIDCOutput {
	return i.ToAssumableRoleWithOIDCOutputWithContext(context.Background())
}

func (i *AssumableRoleWithOIDC) ToAssumableRoleWithOIDCOutputWithContext(ctx context.Context) AssumableRoleWithOIDCOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssumableRoleWithOIDCOutput)
}

// AssumableRoleWithOIDCArrayInput is an input type that accepts AssumableRoleWithOIDCArray and AssumableRoleWithOIDCArrayOutput values.
// You can construct a concrete instance of `AssumableRoleWithOIDCArrayInput` via:
//
//	AssumableRoleWithOIDCArray{ AssumableRoleWithOIDCArgs{...} }
type AssumableRoleWithOIDCArrayInput interface {
	pulumi.Input

	ToAssumableRoleWithOIDCArrayOutput() AssumableRoleWithOIDCArrayOutput
	ToAssumableRoleWithOIDCArrayOutputWithContext(context.Context) AssumableRoleWithOIDCArrayOutput
}

type AssumableRoleWithOIDCArray []AssumableRoleWithOIDCInput

func (AssumableRoleWithOIDCArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AssumableRoleWithOIDC)(nil)).Elem()
}

func (i AssumableRoleWithOIDCArray) ToAssumableRoleWithOIDCArrayOutput() AssumableRoleWithOIDCArrayOutput {
	return i.ToAssumableRoleWithOIDCArrayOutputWithContext(context.Background())
}

func (i AssumableRoleWithOIDCArray) ToAssumableRoleWithOIDCArrayOutputWithContext(ctx context.Context) AssumableRoleWithOIDCArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssumableRoleWithOIDCArrayOutput)
}

// AssumableRoleWithOIDCMapInput is an input type that accepts AssumableRoleWithOIDCMap and AssumableRoleWithOIDCMapOutput values.
// You can construct a concrete instance of `AssumableRoleWithOIDCMapInput` via:
//
//	AssumableRoleWithOIDCMap{ "key": AssumableRoleWithOIDCArgs{...} }
type AssumableRoleWithOIDCMapInput interface {
	pulumi.Input

	ToAssumableRoleWithOIDCMapOutput() AssumableRoleWithOIDCMapOutput
	ToAssumableRoleWithOIDCMapOutputWithContext(context.Context) AssumableRoleWithOIDCMapOutput
}

type AssumableRoleWithOIDCMap map[string]AssumableRoleWithOIDCInput

func (AssumableRoleWithOIDCMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AssumableRoleWithOIDC)(nil)).Elem()
}

func (i AssumableRoleWithOIDCMap) ToAssumableRoleWithOIDCMapOutput() AssumableRoleWithOIDCMapOutput {
	return i.ToAssumableRoleWithOIDCMapOutputWithContext(context.Background())
}

func (i AssumableRoleWithOIDCMap) ToAssumableRoleWithOIDCMapOutputWithContext(ctx context.Context) AssumableRoleWithOIDCMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssumableRoleWithOIDCMapOutput)
}

type AssumableRoleWithOIDCOutput struct{ *pulumi.OutputState }

func (AssumableRoleWithOIDCOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssumableRoleWithOIDC)(nil)).Elem()
}

func (o AssumableRoleWithOIDCOutput) ToAssumableRoleWithOIDCOutput() AssumableRoleWithOIDCOutput {
	return o
}

func (o AssumableRoleWithOIDCOutput) ToAssumableRoleWithOIDCOutputWithContext(ctx context.Context) AssumableRoleWithOIDCOutput {
	return o
}

// ARN of IAM role.
func (o AssumableRoleWithOIDCOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *AssumableRoleWithOIDC) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Name of IAM role.
func (o AssumableRoleWithOIDCOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AssumableRoleWithOIDC) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Path of IAM role.
func (o AssumableRoleWithOIDCOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v *AssumableRoleWithOIDC) pulumi.StringOutput { return v.Path }).(pulumi.StringOutput)
}

// Unique ID of IAM role.
func (o AssumableRoleWithOIDCOutput) UniqueId() pulumi.StringOutput {
	return o.ApplyT(func(v *AssumableRoleWithOIDC) pulumi.StringOutput { return v.UniqueId }).(pulumi.StringOutput)
}

type AssumableRoleWithOIDCArrayOutput struct{ *pulumi.OutputState }

func (AssumableRoleWithOIDCArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AssumableRoleWithOIDC)(nil)).Elem()
}

func (o AssumableRoleWithOIDCArrayOutput) ToAssumableRoleWithOIDCArrayOutput() AssumableRoleWithOIDCArrayOutput {
	return o
}

func (o AssumableRoleWithOIDCArrayOutput) ToAssumableRoleWithOIDCArrayOutputWithContext(ctx context.Context) AssumableRoleWithOIDCArrayOutput {
	return o
}

func (o AssumableRoleWithOIDCArrayOutput) Index(i pulumi.IntInput) AssumableRoleWithOIDCOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AssumableRoleWithOIDC {
		return vs[0].([]*AssumableRoleWithOIDC)[vs[1].(int)]
	}).(AssumableRoleWithOIDCOutput)
}

type AssumableRoleWithOIDCMapOutput struct{ *pulumi.OutputState }

func (AssumableRoleWithOIDCMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AssumableRoleWithOIDC)(nil)).Elem()
}

func (o AssumableRoleWithOIDCMapOutput) ToAssumableRoleWithOIDCMapOutput() AssumableRoleWithOIDCMapOutput {
	return o
}

func (o AssumableRoleWithOIDCMapOutput) ToAssumableRoleWithOIDCMapOutputWithContext(ctx context.Context) AssumableRoleWithOIDCMapOutput {
	return o
}

func (o AssumableRoleWithOIDCMapOutput) MapIndex(k pulumi.StringInput) AssumableRoleWithOIDCOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AssumableRoleWithOIDC {
		return vs[0].(map[string]*AssumableRoleWithOIDC)[vs[1].(string)]
	}).(AssumableRoleWithOIDCOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AssumableRoleWithOIDCInput)(nil)).Elem(), &AssumableRoleWithOIDC{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssumableRoleWithOIDCArrayInput)(nil)).Elem(), AssumableRoleWithOIDCArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssumableRoleWithOIDCMapInput)(nil)).Elem(), AssumableRoleWithOIDCMap{})
	pulumi.RegisterOutputType(AssumableRoleWithOIDCOutput{})
	pulumi.RegisterOutputType(AssumableRoleWithOIDCArrayOutput{})
	pulumi.RegisterOutputType(AssumableRoleWithOIDCMapOutput{})
}
