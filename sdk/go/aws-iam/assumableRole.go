// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package awsiam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-iam/sdk/go/aws-iam/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource helps you create a single IAM Role which can be assumed by trusted resources.
// Trusted resources can be any IAM ARNs, typically, AWS Accounts and Users.
//
// ## Example Usage
// ## Assumable Role
//
// ```go
// package main
//
// import (
//
//	iam "github.com/pulumi/pulumi-aws-iam/sdk/go/aws-iam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//	    pulumi.Run(func(ctx *pulumi.Context) error {
//	        assumableRole, err := iam.NewAssumableRole(ctx, "assumable-role", &iam.AssumableRoleArgs{
//	            TrustedRoleArns: pulumi.ToStringArray([]string{"arn:aws:iam::307990089504:root", "arn:aws:iam::835367859851:user/pulumipus"}),
//	            Role: &iam.RoleWithMFAArgs{
//	                Name:        pulumi.String("custom"),
//	                RequiresMfa: pulumi.BoolPtr(true),
//	                PolicyArns:  pulumi.ToStringArray([]string{"arn:aws:iam::aws:policy/AmazonCognitoReadOnly", "arn:aws:iam::aws:policy/AlexaForBusinessFullAccess"}),
//	            },
//	        })
//	        if err != nil {
//	            return err
//	        }
//
//	        ctx.Export("assumableRole", assumableRole)
//
//	        return nil
//	    })
//	}
//
// ```
// {{ /example }}
type AssumableRole struct {
	pulumi.ResourceState

	InstanceProfile pulumi.StringMapOutput `pulumi:"instanceProfile"`
	Role            pulumi.StringMapOutput `pulumi:"role"`
}

// NewAssumableRole registers a new resource with the given unique name, arguments, and options.
func NewAssumableRole(ctx *pulumi.Context,
	name string, args *AssumableRoleArgs, opts ...pulumi.ResourceOption) (*AssumableRole, error) {
	if args == nil {
		args = &AssumableRoleArgs{}
	}

	if args.AttachAdminPolicy == nil {
		args.AttachAdminPolicy = pulumi.BoolPtr(false)
	}
	if args.AttachPoweruserPolicy == nil {
		args.AttachPoweruserPolicy = pulumi.BoolPtr(false)
	}
	if args.AttachReadonlyPolicy == nil {
		args.AttachReadonlyPolicy = pulumi.BoolPtr(false)
	}
	if args.CustomRoleTrustPolicy == nil {
		args.CustomRoleTrustPolicy = pulumi.StringPtr("")
	}
	if args.ForceDetachPolicies == nil {
		args.ForceDetachPolicies = pulumi.BoolPtr(false)
	}
	if args.MaxSessionDuration == nil {
		args.MaxSessionDuration = pulumi.IntPtr(3600)
	}
	if args.MfaAge == nil {
		args.MfaAge = pulumi.IntPtr(86400)
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AssumableRole
	err := ctx.RegisterRemoteComponentResource("aws-iam:index:AssumableRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type assumableRoleArgs struct {
	// Whether to attach an admin policy to a role.
	AttachAdminPolicy *bool `pulumi:"attachAdminPolicy"`
	// Whether to attach a poweruser policy to a role.
	AttachPoweruserPolicy *bool `pulumi:"attachPoweruserPolicy"`
	// Whether to attach a readonly policy to a role.
	AttachReadonlyPolicy *bool `pulumi:"attachReadonlyPolicy"`
	// A custom role trust policy.
	CustomRoleTrustPolicy *string `pulumi:"customRoleTrustPolicy"`
	// Whether policies should be detached from this role when destroying.
	ForceDetachPolicies *bool `pulumi:"forceDetachPolicies"`
	// Maximum CLI/API session duration in seconds between 3600 and 43200.
	MaxSessionDuration *int `pulumi:"maxSessionDuration"`
	// Max age of valid MFA (in seconds) for roles which require MFA.
	MfaAge *int `pulumi:"mfaAge"`
	// An IAM role that requires MFA.
	Role *RoleWithMFA `pulumi:"role"`
	// STS ExternalId condition values to use with a role (when MFA is not required).
	RoleStsExternalIds []string `pulumi:"roleStsExternalIds"`
	// A map of tags to add.
	Tags map[string]string `pulumi:"tags"`
	// Actions of STS.
	TrustedRoleActions []string `pulumi:"trustedRoleActions"`
	// ARNs of AWS entities who can assume these roles.
	TrustedRoleArns []string `pulumi:"trustedRoleArns"`
	// AWS Services that can assume these roles.
	TrustedRoleServices []string `pulumi:"trustedRoleServices"`
}

// The set of arguments for constructing a AssumableRole resource.
type AssumableRoleArgs struct {
	// Whether to attach an admin policy to a role.
	AttachAdminPolicy pulumi.BoolPtrInput
	// Whether to attach a poweruser policy to a role.
	AttachPoweruserPolicy pulumi.BoolPtrInput
	// Whether to attach a readonly policy to a role.
	AttachReadonlyPolicy pulumi.BoolPtrInput
	// A custom role trust policy.
	CustomRoleTrustPolicy pulumi.StringPtrInput
	// Whether policies should be detached from this role when destroying.
	ForceDetachPolicies pulumi.BoolPtrInput
	// Maximum CLI/API session duration in seconds between 3600 and 43200.
	MaxSessionDuration pulumi.IntPtrInput
	// Max age of valid MFA (in seconds) for roles which require MFA.
	MfaAge pulumi.IntPtrInput
	// An IAM role that requires MFA.
	Role RoleWithMFAPtrInput
	// STS ExternalId condition values to use with a role (when MFA is not required).
	RoleStsExternalIds pulumi.StringArrayInput
	// A map of tags to add.
	Tags pulumi.StringMapInput
	// Actions of STS.
	TrustedRoleActions pulumi.StringArrayInput
	// ARNs of AWS entities who can assume these roles.
	TrustedRoleArns pulumi.StringArrayInput
	// AWS Services that can assume these roles.
	TrustedRoleServices pulumi.StringArrayInput
}

func (AssumableRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*assumableRoleArgs)(nil)).Elem()
}

type AssumableRoleInput interface {
	pulumi.Input

	ToAssumableRoleOutput() AssumableRoleOutput
	ToAssumableRoleOutputWithContext(ctx context.Context) AssumableRoleOutput
}

func (*AssumableRole) ElementType() reflect.Type {
	return reflect.TypeOf((**AssumableRole)(nil)).Elem()
}

func (i *AssumableRole) ToAssumableRoleOutput() AssumableRoleOutput {
	return i.ToAssumableRoleOutputWithContext(context.Background())
}

func (i *AssumableRole) ToAssumableRoleOutputWithContext(ctx context.Context) AssumableRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssumableRoleOutput)
}

// AssumableRoleArrayInput is an input type that accepts AssumableRoleArray and AssumableRoleArrayOutput values.
// You can construct a concrete instance of `AssumableRoleArrayInput` via:
//
//	AssumableRoleArray{ AssumableRoleArgs{...} }
type AssumableRoleArrayInput interface {
	pulumi.Input

	ToAssumableRoleArrayOutput() AssumableRoleArrayOutput
	ToAssumableRoleArrayOutputWithContext(context.Context) AssumableRoleArrayOutput
}

type AssumableRoleArray []AssumableRoleInput

func (AssumableRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AssumableRole)(nil)).Elem()
}

func (i AssumableRoleArray) ToAssumableRoleArrayOutput() AssumableRoleArrayOutput {
	return i.ToAssumableRoleArrayOutputWithContext(context.Background())
}

func (i AssumableRoleArray) ToAssumableRoleArrayOutputWithContext(ctx context.Context) AssumableRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssumableRoleArrayOutput)
}

// AssumableRoleMapInput is an input type that accepts AssumableRoleMap and AssumableRoleMapOutput values.
// You can construct a concrete instance of `AssumableRoleMapInput` via:
//
//	AssumableRoleMap{ "key": AssumableRoleArgs{...} }
type AssumableRoleMapInput interface {
	pulumi.Input

	ToAssumableRoleMapOutput() AssumableRoleMapOutput
	ToAssumableRoleMapOutputWithContext(context.Context) AssumableRoleMapOutput
}

type AssumableRoleMap map[string]AssumableRoleInput

func (AssumableRoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AssumableRole)(nil)).Elem()
}

func (i AssumableRoleMap) ToAssumableRoleMapOutput() AssumableRoleMapOutput {
	return i.ToAssumableRoleMapOutputWithContext(context.Background())
}

func (i AssumableRoleMap) ToAssumableRoleMapOutputWithContext(ctx context.Context) AssumableRoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssumableRoleMapOutput)
}

type AssumableRoleOutput struct{ *pulumi.OutputState }

func (AssumableRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssumableRole)(nil)).Elem()
}

func (o AssumableRoleOutput) ToAssumableRoleOutput() AssumableRoleOutput {
	return o
}

func (o AssumableRoleOutput) ToAssumableRoleOutputWithContext(ctx context.Context) AssumableRoleOutput {
	return o
}

func (o AssumableRoleOutput) InstanceProfile() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AssumableRole) pulumi.StringMapOutput { return v.InstanceProfile }).(pulumi.StringMapOutput)
}

func (o AssumableRoleOutput) Role() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AssumableRole) pulumi.StringMapOutput { return v.Role }).(pulumi.StringMapOutput)
}

type AssumableRoleArrayOutput struct{ *pulumi.OutputState }

func (AssumableRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AssumableRole)(nil)).Elem()
}

func (o AssumableRoleArrayOutput) ToAssumableRoleArrayOutput() AssumableRoleArrayOutput {
	return o
}

func (o AssumableRoleArrayOutput) ToAssumableRoleArrayOutputWithContext(ctx context.Context) AssumableRoleArrayOutput {
	return o
}

func (o AssumableRoleArrayOutput) Index(i pulumi.IntInput) AssumableRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AssumableRole {
		return vs[0].([]*AssumableRole)[vs[1].(int)]
	}).(AssumableRoleOutput)
}

type AssumableRoleMapOutput struct{ *pulumi.OutputState }

func (AssumableRoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AssumableRole)(nil)).Elem()
}

func (o AssumableRoleMapOutput) ToAssumableRoleMapOutput() AssumableRoleMapOutput {
	return o
}

func (o AssumableRoleMapOutput) ToAssumableRoleMapOutputWithContext(ctx context.Context) AssumableRoleMapOutput {
	return o
}

func (o AssumableRoleMapOutput) MapIndex(k pulumi.StringInput) AssumableRoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AssumableRole {
		return vs[0].(map[string]*AssumableRole)[vs[1].(string)]
	}).(AssumableRoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AssumableRoleInput)(nil)).Elem(), &AssumableRole{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssumableRoleArrayInput)(nil)).Elem(), AssumableRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssumableRoleMapInput)(nil)).Elem(), AssumableRoleMap{})
	pulumi.RegisterOutputType(AssumableRoleOutput{})
	pulumi.RegisterOutputType(AssumableRoleArrayOutput{})
	pulumi.RegisterOutputType(AssumableRoleMapOutput{})
}
