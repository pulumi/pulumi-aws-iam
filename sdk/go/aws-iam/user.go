// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package awsiam

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resources helps you create an IAM User, Login Profile, and Access Key. Additionally you
// can optionally upload an IAM SSH User Public Key.
//
// ## Example Usage
// ### User
//
// ```go
// package main
//
// import (
//
//	iam "github.com/pulumi/pulumi-aws-iam/sdk/go/aws-iam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//	    pulumi.Run(func(ctx *pulumi.Context) error {
//	        user, err := iam.NewUser(ctx, "user", &iam.UserArgs{
//	            Name:                  pulumi.String("pulumipus"),
//	            ForceDestroy:          pulumi.BoolPtr(true),
//	            PgpKey:                pulumi.String("keybase:test"),
//	            PasswordResetRequired: pulumi.BoolPtr(false),
//	        })
//	        if err != nil {
//	            return err
//	        }
//
//	        ctx.Export("user", user)
//
//	        return nil
//	    })
//	}
//
// ```
// {{ /example }}
type User struct {
	pulumi.ResourceState

	// The IAM access key.
	AccessKey AccessKeyOutputOutput `pulumi:"accessKey"`
	Keybase   KeybaseOutputOutput   `pulumi:"keybase"`
	// PGP key used to encrypt sensitive data for this user (if empty - secrets are not encrypted).
	PgpKey pulumi.StringOutput `pulumi:"pgpKey"`
	// The IAM user.
	UserInfo UserOutputTypeOutput `pulumi:"userInfo"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if isZero(args.Path) {
		args.Path = pulumi.StringPtr("/")
	}
	if isZero(args.SshKeyEncoding) {
		args.SshKeyEncoding = pulumi.StringPtr("SSH")
	}
	var resource User
	err := ctx.RegisterRemoteComponentResource("aws-iam:index:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type userArgs struct {
	// When destroying this user, destroy even if it has non-Pulumi-managed IAM access keys, login profile or MFA devices. Without forceDestroy a user with non-Pulumi-managed access keys and login profile will fail to be destroyed.
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// Desired name for the IAM user.
	Name string `pulumi:"name"`
	// The length of the generated password
	PasswordLength *int `pulumi:"passwordLength"`
	// Whether the user should be forced to reset the generated password on first login.
	PasswordResetRequired *bool `pulumi:"passwordResetRequired"`
	// Desired path for the IAM user.
	Path *string `pulumi:"path"`
	// The ARN of the policy that is used to set the permissions boundary for the user.
	PermissionsBoundary *string `pulumi:"permissionsBoundary"`
	// Either a base-64 encoded PGP public key, or a keybase username in the form `keybase:username`. Used to encrypt password and access key.
	PgpKey *string `pulumi:"pgpKey"`
	// Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use SSH. To retrieve the public key in PEM format, use PEM.
	SshKeyEncoding *string `pulumi:"sshKeyEncoding"`
	// The SSH public key. The public key must be encoded in ssh-rsa format or PEM format.
	SshPublicKey *string `pulumi:"sshPublicKey"`
	// A map of tags to add.
	Tags map[string]string `pulumi:"tags"`
	// Whether to upload a public ssh key to the IAM user.
	UploadIamUserSshKey *bool `pulumi:"uploadIamUserSshKey"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// When destroying this user, destroy even if it has non-Pulumi-managed IAM access keys, login profile or MFA devices. Without forceDestroy a user with non-Pulumi-managed access keys and login profile will fail to be destroyed.
	ForceDestroy pulumi.BoolPtrInput
	// Desired name for the IAM user.
	Name pulumi.StringInput
	// The length of the generated password
	PasswordLength pulumi.IntPtrInput
	// Whether the user should be forced to reset the generated password on first login.
	PasswordResetRequired pulumi.BoolPtrInput
	// Desired path for the IAM user.
	Path pulumi.StringPtrInput
	// The ARN of the policy that is used to set the permissions boundary for the user.
	PermissionsBoundary pulumi.StringPtrInput
	// Either a base-64 encoded PGP public key, or a keybase username in the form `keybase:username`. Used to encrypt password and access key.
	PgpKey pulumi.StringPtrInput
	// Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use SSH. To retrieve the public key in PEM format, use PEM.
	SshKeyEncoding pulumi.StringPtrInput
	// The SSH public key. The public key must be encoded in ssh-rsa format or PEM format.
	SshPublicKey pulumi.StringPtrInput
	// A map of tags to add.
	Tags pulumi.StringMapInput
	// Whether to upload a public ssh key to the IAM user.
	UploadIamUserSshKey pulumi.BoolPtrInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserInput interface {
	pulumi.Input

	ToUserOutput() UserOutput
	ToUserOutputWithContext(ctx context.Context) UserOutput
}

func (*User) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (i *User) ToUserOutput() UserOutput {
	return i.ToUserOutputWithContext(context.Background())
}

func (i *User) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOutput)
}

// UserArrayInput is an input type that accepts UserArray and UserArrayOutput values.
// You can construct a concrete instance of `UserArrayInput` via:
//
//	UserArray{ UserArgs{...} }
type UserArrayInput interface {
	pulumi.Input

	ToUserArrayOutput() UserArrayOutput
	ToUserArrayOutputWithContext(context.Context) UserArrayOutput
}

type UserArray []UserInput

func (UserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (i UserArray) ToUserArrayOutput() UserArrayOutput {
	return i.ToUserArrayOutputWithContext(context.Background())
}

func (i UserArray) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArrayOutput)
}

// UserMapInput is an input type that accepts UserMap and UserMapOutput values.
// You can construct a concrete instance of `UserMapInput` via:
//
//	UserMap{ "key": UserArgs{...} }
type UserMapInput interface {
	pulumi.Input

	ToUserMapOutput() UserMapOutput
	ToUserMapOutputWithContext(context.Context) UserMapOutput
}

type UserMap map[string]UserInput

func (UserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (i UserMap) ToUserMapOutput() UserMapOutput {
	return i.ToUserMapOutputWithContext(context.Background())
}

func (i UserMap) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMapOutput)
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

// The IAM access key.
func (o UserOutput) AccessKey() AccessKeyOutputOutput {
	return o.ApplyT(func(v *User) AccessKeyOutputOutput { return v.AccessKey }).(AccessKeyOutputOutput)
}

func (o UserOutput) Keybase() KeybaseOutputOutput {
	return o.ApplyT(func(v *User) KeybaseOutputOutput { return v.Keybase }).(KeybaseOutputOutput)
}

// PGP key used to encrypt sensitive data for this user (if empty - secrets are not encrypted).
func (o UserOutput) PgpKey() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.PgpKey }).(pulumi.StringOutput)
}

// The IAM user.
func (o UserOutput) UserInfo() UserOutputTypeOutput {
	return o.ApplyT(func(v *User) UserOutputTypeOutput { return v.UserInfo }).(UserOutputTypeOutput)
}

type UserArrayOutput struct{ *pulumi.OutputState }

func (UserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (o UserArrayOutput) ToUserArrayOutput() UserArrayOutput {
	return o
}

func (o UserArrayOutput) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return o
}

func (o UserArrayOutput) Index(i pulumi.IntInput) UserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *User {
		return vs[0].([]*User)[vs[1].(int)]
	}).(UserOutput)
}

type UserMapOutput struct{ *pulumi.OutputState }

func (UserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (o UserMapOutput) ToUserMapOutput() UserMapOutput {
	return o
}

func (o UserMapOutput) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return o
}

func (o UserMapOutput) MapIndex(k pulumi.StringInput) UserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *User {
		return vs[0].(map[string]*User)[vs[1].(string)]
	}).(UserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserInput)(nil)).Elem(), &User{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserArrayInput)(nil)).Elem(), UserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserMapInput)(nil)).Elem(), UserMap{})
	pulumi.RegisterOutputType(UserOutput{})
	pulumi.RegisterOutputType(UserArrayOutput{})
	pulumi.RegisterOutputType(UserMapOutput{})
}
