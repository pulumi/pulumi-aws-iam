// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * This resources helps you create a single IAM role which can be assume by trusted
 * resources using OpenID Connect Federated Users.
 *
 * ## Example Usage
 * ## Assumable Role With OIDC
 *
 * ```typescript
 * import * as iam from "@pulumi/aws-iam";
 *
 * export const assumableRoleWithOidc = new iam.AssumableRoleWithOIDC("aws-iam-example-assumable-role-with-oidc", {
 *     providerUrls: ["oidc.eks.eu-west-1.amazonaws.com/id/BA9E170D464AF7B92084EF72A69B9DC8"],
 *     role: {
 *         name: "oidc-role",
 *         policyArns: [ "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy" ],
 *     },
 *     tags: {
 *         Role: "oidc-role",
 *     },
 * });
 * ```
 * {{ /example }}
 */
export class AssumableRoleWithOIDC extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'aws-iam:index:AssumableRoleWithOIDC';

    /**
     * Returns true if the given object is an instance of AssumableRoleWithOIDC.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AssumableRoleWithOIDC {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AssumableRoleWithOIDC.__pulumiType;
    }

    /**
     * ARN of IAM role.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Name of IAM role.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Path of IAM role.
     */
    public /*out*/ readonly path!: pulumi.Output<string>;
    /**
     * Unique ID of IAM role.
     */
    public /*out*/ readonly uniqueId!: pulumi.Output<string>;

    /**
     * Create a AssumableRoleWithOIDC resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AssumableRoleWithOIDCArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["awsAccountId"] = (args ? args.awsAccountId : undefined) ?? "";
            resourceInputs["forceDetachPolicies"] = (args ? args.forceDetachPolicies : undefined) ?? false;
            resourceInputs["maxSessionDuration"] = (args ? args.maxSessionDuration : undefined) ?? 3600;
            resourceInputs["oidcFullyQualifiedAudiences"] = args ? args.oidcFullyQualifiedAudiences : undefined;
            resourceInputs["oidcFullyQualifiedSubjects"] = args ? args.oidcFullyQualifiedSubjects : undefined;
            resourceInputs["oidcSubjectsWithWildcards"] = args ? args.oidcSubjectsWithWildcards : undefined;
            resourceInputs["providerUrls"] = args ? args.providerUrls : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["path"] = undefined /*out*/;
            resourceInputs["uniqueId"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["path"] = undefined /*out*/;
            resourceInputs["uniqueId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AssumableRoleWithOIDC.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a AssumableRoleWithOIDC resource.
 */
export interface AssumableRoleWithOIDCArgs {
    /**
     * The AWS account ID where the OIDC provider lives, leave empty to use the account for the AWS provider.
     */
    awsAccountId?: pulumi.Input<string>;
    /**
     * Whether policies should be detached from this role when destroying.
     */
    forceDetachPolicies?: pulumi.Input<boolean>;
    /**
     * Maximum CLI/API session duration in seconds between 3600 and 43200.
     */
    maxSessionDuration?: pulumi.Input<number>;
    /**
     * The audience to be added to the role policy. Set to sts.amazonaws.com for cross-account assumable role. Leave empty otherwise.
     */
    oidcFullyQualifiedAudiences?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The fully qualified OIDC subjects to be added to the role policy.
     */
    oidcFullyQualifiedSubjects?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The OIDC subject using wildcards to be added to the role policy.
     */
    oidcSubjectsWithWildcards?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of URLs of the OIDC Providers.
     */
    providerUrls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The IAM role.
     */
    role?: pulumi.Input<inputs.RoleArgs>;
    /**
     * A map of tags to add.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
