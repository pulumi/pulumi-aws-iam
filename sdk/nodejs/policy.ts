// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This resource helps you create an IAM policy.
 *
 * ## Example Usage
 * ## Policy
 *
 * ```typescript
 * import * as iam from "@pulumi/aws-iam";
 *
 * export const policy = new iam.Policy("aws-iam-example-policy", {
 *     name: "aws-iam-example-policy",
 *     path: "/",
 *     description: "My example policy",
 *     policyDocument: `{
 *         "Version": "2012-10-17",
 *         "Statement": [
 *         {
 *             "Action": [
 *             "ec2:Describe*"
 *             ],
 *             "Effect": "Allow",
 *             "Resource": "*"
 *         }
 *         ]
 *     }`,
 * });
 * ```
 * {{ /example }}
 */
export class Policy extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'aws-iam:index:Policy';

    /**
     * Returns true if the given object is an instance of Policy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Policy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Policy.__pulumiType;
    }

    /**
     * The ARN assigned by AWS to this policy.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The description of the policy.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The name of the policy.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The path of the policy in IAM.
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * The policy document.
     */
    public readonly policyDocument!: pulumi.Output<string>;
    /**
     * The policy's ID.
     */
    public /*out*/ readonly policyId!: pulumi.Output<string>;

    /**
     * Create a Policy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.policyDocument === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyDocument'");
            }
            resourceInputs["description"] = (args ? args.description : undefined) ?? "IAM Policy";
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["path"] = (args ? args.path : undefined) ?? "/";
            resourceInputs["policyDocument"] = args ? args.policyDocument : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["policyId"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["path"] = undefined /*out*/;
            resourceInputs["policyDocument"] = undefined /*out*/;
            resourceInputs["policyId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Policy.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a Policy resource.
 */
export interface PolicyArgs {
    /**
     * The description of the policy.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the policy.
     */
    name: pulumi.Input<string>;
    /**
     * The path of the policy in IAM.
     */
    path?: pulumi.Input<string>;
    /**
     * The policy document.
     */
    policyDocument: pulumi.Input<string>;
    /**
     * A map of tags to add.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
