// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * This resource helps you create predefined IAM roles (`admin`, `poweruser`, and `readonly`) which
 * can be assumed by trusted resources. Trusted resources can be any IAM ARNs, typically, AWS Accounts
 * and Users.
 *
 * ## Example Usage
 * ## Assumable Roles
 *
 * ```typescript
 * import * as iam from "@pulumi/aws-iam";
 *
 * export const assumableRoles = new iam.AssumableRoles("aws-iam-example-assumable-roles", {
 *     trustedRoleArns: [ "arn:aws:iam::307990089504:root", "arn:aws:iam::835367859851:user/pulumipus" ],
 *     admin: {},
 *     poweruser: {
 *         name: "developer",
 *     },
 *     readonly: {
 *         requiresMfa: true,
 *     },
 * });
 * ```
 * {{ /example }}
 */
export class AssumableRoles extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'aws-iam:index:AssumableRoles';

    /**
     * Returns true if the given object is an instance of AssumableRoles.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AssumableRoles {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AssumableRoles.__pulumiType;
    }

    public readonly admin!: pulumi.Output<{[key: string]: string}>;
    public readonly poweruser!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly readonly!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a AssumableRoles resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AssumableRolesArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.admin === undefined) && !opts.urn) {
                throw new Error("Missing required property 'admin'");
            }
            resourceInputs["admin"] = args ? args.admin : undefined;
            resourceInputs["forceDetachPolicies"] = (args ? args.forceDetachPolicies : undefined) ?? false;
            resourceInputs["maxSessionDuration"] = (args ? args.maxSessionDuration : undefined) ?? 3600;
            resourceInputs["mfaAge"] = (args ? args.mfaAge : undefined) ?? 86400;
            resourceInputs["poweruser"] = args ? args.poweruser : undefined;
            resourceInputs["readonly"] = args ? args.readonly : undefined;
            resourceInputs["trustedRoleArns"] = args ? args.trustedRoleArns : undefined;
            resourceInputs["trustedRoleServices"] = args ? args.trustedRoleServices : undefined;
        } else {
            resourceInputs["admin"] = undefined /*out*/;
            resourceInputs["poweruser"] = undefined /*out*/;
            resourceInputs["readonly"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AssumableRoles.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a AssumableRoles resource.
 */
export interface AssumableRolesArgs {
    admin: pulumi.Input<inputs.AdminRoleWithMFAArgs>;
    /**
     * Whether policies should be detached from this role when destroying.
     */
    forceDetachPolicies?: pulumi.Input<boolean>;
    /**
     * Maximum CLI/API session duration in seconds between 3600 and 43200.
     */
    maxSessionDuration?: pulumi.Input<number>;
    /**
     * Max age of valid MFA (in seconds) for roles which require MFA.
     */
    mfaAge?: pulumi.Input<number>;
    poweruser?: pulumi.Input<inputs.PoweruserRoleWithMFAArgs>;
    readonly?: pulumi.Input<inputs.ReadonlyRoleWithMFAArgs>;
    /**
     * ARNs of AWS entities who can assume these roles.
     */
    trustedRoleArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * AWS Services that can assume these roles.
     */
    trustedRoleServices?: pulumi.Input<pulumi.Input<string>[]>;
}
