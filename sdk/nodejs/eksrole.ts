// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * This resource helps you create an IAM role that can be assumed by one or more EKS ServiceAccounts,
 * in one or more EKS Clusters. With this resource:
 *
 * - You do not need any knowledge of cluster OIDC information.
 * - You can assume the role from multiple EKS clusters, for example used in DR or when a workload is spread across clusters.
 * - You can support multiple ServiceAccount in the same cluster, for example when a workload runs in multiple namespaces.
 *
 * Notes:
 *
 * - The EKS cluster needs to exist first, in the current AWS account and region
 * - The key in the `Cluster Service Accounts` is the exact name of the EKS cluster.
 *
 * ## Example Usage
 * ## Multi Cluster
 *
 * With this resource you can provision an IAM Role named `my-app` that can be assumed from:
 *
 * - EKS cluster `staging-main-1`, namespace `default`, ServiceAccount called `my-app-staging`.
 * - EKS cluster `staging-backup-1`, namespace `default`, ServiceAccount called `my-app-staging`.
 *
 * ```typescript
 * import * as iam from "@pulumi/aws-iam";
 *
 * export const eksRole = new iam.EKSRole("aws-iam-example-eks-role", {
 *     role: {
 *         name: "eks-role",
 *         policyArns: [ "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy" ],
 *     },
 *     tags: {
 *         Name: "eks-role",
 *     },
 *     clusterServiceAccounts: {
 *         "staging-main-1": [ "default:my-app-staging" ],
 *         "staging-backup-1": [ "default:my-app-staging" ],
 *     },
 * });
 * ```
 * {{ /example }}
 */
export class EKSRole extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'aws-iam:index:EKSRole';

    /**
     * Returns true if the given object is an instance of EKSRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EKSRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EKSRole.__pulumiType;
    }

    /**
     * ARN of IAM role.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Name of IAM role.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Path of IAM role.
     */
    public /*out*/ readonly path!: pulumi.Output<string>;
    /**
     * Unique ID of IAM role.
     */
    public /*out*/ readonly uniqueId!: pulumi.Output<string>;

    /**
     * Create a EKSRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: EKSRoleArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["clusterServiceAccounts"] = args ? args.clusterServiceAccounts : undefined;
            resourceInputs["forceDetachPolicies"] = (args ? args.forceDetachPolicies : undefined) ?? false;
            resourceInputs["maxSessionDuration"] = (args ? args.maxSessionDuration : undefined) ?? 3600;
            resourceInputs["providerUrlSaPairs"] = args ? args.providerUrlSaPairs : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["rolePolicyArns"] = args ? args.rolePolicyArns : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["path"] = undefined /*out*/;
            resourceInputs["uniqueId"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["path"] = undefined /*out*/;
            resourceInputs["uniqueId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EKSRole.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a EKSRole resource.
 */
export interface EKSRoleArgs {
    /**
     * EKS cluster and k8s ServiceAccount pairs. Each EKS cluster can have multiple k8s ServiceAccount. See README for details
     */
    clusterServiceAccounts?: pulumi.Input<pulumi.Input<inputs.EKSServiceAccountArgs>[]>;
    /**
     * Whether policies should be detached from this role when destroying.
     */
    forceDetachPolicies?: pulumi.Input<boolean>;
    /**
     * Maximum CLI/API session duration in seconds between 3600 and 43200.
     */
    maxSessionDuration?: pulumi.Input<number>;
    /**
     * OIDC provider URL and k8s ServiceAccount pairs. If the assume role policy requires a mix of EKS clusters and other OIDC providers then this can be used
     */
    providerUrlSaPairs?: pulumi.Input<{[key: string]: pulumi.Input<pulumi.Input<string>[]>}>;
    role?: pulumi.Input<inputs.RoleArgs>;
    /**
     * ARNs of any policies to attach to the IAM role.
     */
    rolePolicyArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A map of tags to add.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
