// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * This resource helps you create predefined IAM roles (`admin`, `poweruser`, and `readonly`) which can be assumed
 * by trusted resources using SAML Federated Users.
 *
 * ## Example Usage
 * ### Assumable Roles With SAML
 *
 * ```typescript
 * import * as iam from "@pulumi/aws-iam";
 *
 * export const assumableRolesWithSaml = new iam.AssumableRolesWithSAML("aws-iam-example-assumable-role-with-saml", {
 *     providerIds: [ "arn:aws:iam::235367859851:saml-provider/idp_saml" ],
 *     admin: {},
 *     poweruser: {
 *         name: "developer",
 *     },
 *     readonly: {},
 * });
 * ```
 * {{ /example }}
 */
export class AssumableRolesWithSAML extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'aws-iam:index:AssumableRolesWithSAML';

    /**
     * Returns true if the given object is an instance of AssumableRolesWithSAML.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AssumableRolesWithSAML {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AssumableRolesWithSAML.__pulumiType;
    }

    public readonly admin!: pulumi.Output<{[key: string]: string}>;
    public readonly poweruser!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly readonly!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a AssumableRolesWithSAML resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AssumableRolesWithSAMLArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["admin"] = args ? (args.admin ? pulumi.output(args.admin).apply(inputs.adminRoleArgsProvideDefaults) : undefined) : undefined;
            resourceInputs["awsSamlEndpoint"] = (args ? args.awsSamlEndpoint : undefined) ?? "https://signin.aws.amazon.com/saml";
            resourceInputs["forceDetachPolicies"] = (args ? args.forceDetachPolicies : undefined) ?? false;
            resourceInputs["maxSessionDuration"] = (args ? args.maxSessionDuration : undefined) ?? 3600;
            resourceInputs["poweruser"] = args ? args.poweruser : undefined;
            resourceInputs["providerIds"] = args ? args.providerIds : undefined;
            resourceInputs["readonly"] = args ? args.readonly : undefined;
        } else {
            resourceInputs["admin"] = undefined /*out*/;
            resourceInputs["poweruser"] = undefined /*out*/;
            resourceInputs["readonly"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AssumableRolesWithSAML.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a AssumableRolesWithSAML resource.
 */
export interface AssumableRolesWithSAMLArgs {
    admin?: pulumi.Input<inputs.AdminRoleArgs>;
    /**
     * AWS SAML Endpoint.
     */
    awsSamlEndpoint?: pulumi.Input<string>;
    /**
     * Whether policies should be detached from this role when destroying.
     */
    forceDetachPolicies?: pulumi.Input<boolean>;
    /**
     * Maximum CLI/API session duration in seconds between 3600 and 43200.
     */
    maxSessionDuration?: pulumi.Input<number>;
    poweruser?: pulumi.Input<inputs.PoweruserRoleArgs>;
    /**
     * List of SAML Provider IDs.
     */
    providerIds?: pulumi.Input<pulumi.Input<string>[]>;
    readonly?: pulumi.Input<inputs.ReadonlyRoleArgs>;
}
